<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS的三种元素显示模式</title>
    <url>/2020/12/30/css-de-san-chong-yuan-su-xian-shi-mo-shi/</url>
    <content><![CDATA[<h1 id="CSS-的三章元素显示模式"><a href="#CSS-的三章元素显示模式" class="headerlink" title="CSS 的三章元素显示模式"></a><center>CSS 的三章元素显示模式</center></h1><h2 id="1-什么是元素显示模式"><a href="#1-什么是元素显示模式" class="headerlink" title="1 什么是元素显示模式"></a><font color="#A22015">1 什么是元素显示模式</font></h2><p>  网页中的 HTML 标签非常多，在不同地方会用到不同类型的标签，了解他们的特点可以更好的布局我们的网页。其中<font color="red">元素显示模式</font>就是<font color="red">元素(标签)以什么方式进行显示</font>，比如&lt;div&gt;自己占一行，比如一行可以放多个&lt;span&gt;等。</p>
<p>  HTML 元素一般分为<font color="red">块元素</font>和<font color="red">行内元素</font>两种类型。有的资料也有<font color="red">行内块元素</font>的说法。</p>
<h2 id="2-块元素"><a href="#2-块元素" class="headerlink" title="2 块元素"></a><font color="#A22015">2 块元素</font></h2><p>  常见的<font color="red">块元素</font>有<font color="red">&lt;h1&gt;~&lt;h6&gt;</font>、<font color="red">&lt;p&gt;</font>、<font color="red">&lt;div&gt;</font>、<font color="red">&lt;ul&gt;</font>、<font color="red">&lt;ol&gt;</font>、<font color="red">&lt;li&gt;</font>等，其中 &lt;div&gt; 标签是最典型的块元素。</p>
<ul>
<li><p><strong>块级元素的特点</strong></p>
<p>  1.比较霸道，自己<font color="red">独占一行</font>。<br>2.高度，宽度、外边距以及内边距都<font color="red">可以控制</font>。<br>3.宽度默认是容器(父级宽度)的100%。<br>4.是一个容器及盒子，里面可以放行内元素或者块级元素。</p>
</li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm5tqfm6bdj31p10u0qdj.jpg" alt="块级元素演示" width="100%/"></center>

<ul>
<li><p><strong>注意</strong></p>
<p>  1.文字内的元素不能使用块级元素了</p>
<p>  2.&lt;p&gt; 标签主要用于存放文字，因此 &lt;p&gt; 里面不能再放块级元素，特别是不能再放 &lt;div&gt;</p>
<p>  3.同理， &lt;h1&gt;~&lt;h6&gt; 等都是文字类块级标签，里面也不能放其他块级元素</p>
</li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm5tvmcfxtj31bi0u0ajc.jpg" alt="块级元素注意事项" width="100%/"></center>

<p>  从上面的示例可以看到当把块级元素 &lt;div&gt; 放到文字内的元素 &lt;p&gt; 中时，浏览器解析时会把它单独拿出来，同时设置的样式也不能生效。</p>
<h2 id="3-行内元素"><a href="#3-行内元素" class="headerlink" title="3 行内元素"></a><font color="#A22015">3 行内元素</font></h2><p>  常见的<font color="red">行内元素</font>有 <font color="red">&lt;a&gt;(链接)</font> 、<font color="red">&lt;strong&gt;(加粗文本)</font> 、<font color="red">&lt;b&gt;(加粗文本)</font> 、<font color="red">&lt;em&gt;(斜体文本)</font> 、<font color="red">&lt;i&gt;(斜体文本)</font> 、<font color="red">&lt;del&gt;(删除线)</font> 、<font color="red">&lt;s&gt;(删除线)</font> 、<font color="red">&lt;ins&gt;(下划线)</font> 、<font color="red">&lt;u&gt;(下划线)</font> 、<font color="red">&lt;span&gt;(盒子)</font> 等，其中 &lt;span&gt; 标签是最典型的行内元素。有的地方也将行内元素称为<font color="red">内联元素</font>。</p>
<ul>
<li><p><strong>行内元素的特点</strong></p>
<p>  1.相邻行内元素在一行上，<font color="red">一行可以显示多个</font>。</p>
<p>  2.<font color="red">高、宽直接设置是无效</font>的。</p>
<p>  3.默认宽度就是它<font color="red">本身内容的宽度</font>。</p>
<p>  4.行内元素<font color="red">只能容纳文本或其他行内元素</font>。</p>
</li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm5upagbjuj31q20swaic.jpg" alt="行内元素示例" width="100%/"></center>

<ul>
<li><p>注意</p>
<p>  1.<font color="red">链接里面不能再放链接</font></p>
<p>  2.特殊情况链接 <font color="red">&lt;a&gt; 里面可以放块级元素</font>，但是给 &lt;a&gt; 转换一下块级模式最安全。在下一部分演示。</p>
</li>
</ul>
<h2 id="4-行内块元素"><a href="#4-行内块元素" class="headerlink" title="4 行内块元素"></a><font color="#A22015">4 行内块元素</font></h2><p>  在<font color="red">行内元素</font>中有几个特殊的标签例如 &lt;img /&gt; 、&lt;input /&gt; 、&lt;td&gt; ，它们同时具有块元素和行内元素的特点。 称它们为行内块元素。</p>
<ul>
<li><p><strong>行内块元素特点</strong></p>
<p>  1.和相邻行内元素(行内块)在一行上，但是他们之间会有空白缝隙。一行可以显示多个(行内元素特点)。</p>
<p>  2.默认宽度就是它本身内容的宽度(行内元素特点)。</p>
<p>  3.高度，行高、外边距以及内边距都可以控制(块级元素特点)。</p>
</li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm5v404m2nj31q20swthh.jpg" alt="行内块元素示例" width="100%/"></center>

<h2 id="5-元素显示模式总结"><a href="#5-元素显示模式总结" class="headerlink" title="5 元素显示模式总结"></a><font color="#A22015">5 元素显示模式总结</font></h2><table>
<thead>
<tr>
<th align="center">元素模式</th>
<th align="center">元素排列</th>
<th align="center">设置样式</th>
<th align="center">默认宽度</th>
<th align="center">包含</th>
</tr>
</thead>
<tbody><tr>
<td align="center">块级元素</td>
<td align="center">一行只能一个</td>
<td align="center">可以设置宽高</td>
<td align="center">父级容器的100%</td>
<td align="center">可包含任何标签</td>
</tr>
<tr>
<td align="center">行内元素</td>
<td align="center">一行可以多个</td>
<td align="center">不能设置宽高</td>
<td align="center">本身内容的宽度</td>
<td align="center">可包含文本和行内元素</td>
</tr>
<tr>
<td align="center">行内块元素</td>
<td align="center">一行可以多个</td>
<td align="center">可以设置宽高</td>
<td align="center">本身内容的宽度</td>
<td align="center">-</td>
</tr>
</tbody></table>
<h2 id="6-元素显示模式转换"><a href="#6-元素显示模式转换" class="headerlink" title="6 元素显示模式转换"></a><font color="#A22015">6 元素显示模式转换</font></h2><p>  特殊情况下，我们需要元素模式的转换，简单理解: 一个模式的元素需要另外一种模式的特性。比如想要增加链接 &lt;a&gt; 的触发范围。</p>
<ul>
<li><p><strong>语法</strong></p>
<p>  · 转换为<font color="red">块元素</font>：<code>display: block;</code></p>
<p>  · 转换为<font color="red">行内元素</font>：<code>display: inline;</code></p>
<p>  · 转换为<font color="red">行内块元素</font>：<code>display: inline-block;</code></p>
</li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm5vqx4hbcj31kd0u013f.jpg" alt="元素显示模式的转换" width="100%/"></center>

<h2 id="7-单行文字居中显示"><a href="#7-单行文字居中显示" class="headerlink" title="7 单行文字居中显示"></a><font color="#A22015">7 单行文字居中显示</font></h2><p>  在<a href="">CSS基础知识(1)</a>中讲到过文字的水平居中可以用 <code>text-align: center;</code> 来实现，那么要想让文字垂直也居中我们怎么实现呢？这里先了解文字行高的概念。</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm5wh3l7z6j30ns09eaax.jpg" alt="文字的行高" width="80%/"></center>

<p>  <strong>解决方案：</strong> 让<font color="red">文字的行高</font>等于<font color="red">盒子的高度</font>就可以让文字在当前盒子内垂直居中。</p>
<p>  <strong>简单理解：</strong>行高的上空隙和下空隙把文字挤到中间了。如果行高小于盒子高度，文字会偏上，如果行高大于盒子高度，则文字偏下。</p>
<p>  文字的行高在CSS基础知识(1)中<a href="">文本属性</a>部分内容也有讲到，用 <code>line-height: 26px;</code>后面的属性值设置为盒子的高度即可实现单行文本垂直居中。</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm5wqso05xj31t50u045s.jpg" alt="单行文本居中显示示例" width="100%/"></center>

]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 标签（下）</title>
    <url>/2020/12/11/html-biao-qian-xia/</url>
    <content><![CDATA[<h1 id="HTML-标签（下）"><a href="#HTML-标签（下）" class="headerlink" title="HTML 标签（下）"></a><center>HTML 标签（下）</center></h1><h2 id="一、表格标签"><a href="#一、表格标签" class="headerlink" title="一、表格标签"></a><font color="born">一、表格标签</font></h2><h3 id="1-1-表格的主要作用"><a href="#1-1-表格的主要作用" class="headerlink" title="1.1 表格的主要作用"></a>1.1 表格的主要作用</h3><p>​    表格主要是用来显示、展示数据，不是用来布局的。</p>
<h3 id="1-2-表格的基本语法"><a href="#1-2-表格的基本语法" class="headerlink" title="1.2 表格的基本语法"></a>1.2 表格的基本语法</h3><ul>
<li><p><strong>语法</strong></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">&gt;</span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>		
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>表头内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>表头内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>单元格内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>单元格内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>标签详解</strong></p>
<p><font color="red">&lt;table&gt;</font>：定义表格的标签。</p>
<p><font color="red">&lt;caption&gt;</font>：定义表格标题的标签，内容会根据表格居中显示，在表格上方，不在表格框内。</p>
<p><font color="red">&lt;thead&gt;</font>：定义表格头的标签，内容会居中、加粗显示，可以多行，在表格框内部。</p>
<p><font color="red">&lt;tbody&gt;</font>：定义表格体的标签。</p>
<p><font color="red">&lt;tr&gt;</font>：定义表格行，一般将 &lt;th&gt;、&lt;td&gt; 放入其中，必须套在&lt;table&gt;中。</p>
<p><font color="red">&lt;th&gt;</font>：定义表头单元格的标签，可以在表格头部分，也可在表格体中，可以不再 &lt;tr&gt;中。</p>
<p><font color="red">&lt;td&gt;</font>：定义表单元格的标签，可以在表格头部分，也可在表格体中，可以不再 &lt;tr&gt;中。</p>
<p>td 是表格数据（table data）的缩写。</p>
</li>
</ul>
<h3 id="1-3-表格的基本属性"><a href="#1-3-表格的基本属性" class="headerlink" title="1.3 表格的基本属性"></a>1.3 表格的基本属性</h3><center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glpqd49cu4j31hu0h4adb.jpg" alt="表格的基本属性表" width="80%/"></center>

<h3 id="1-4-合并单元格"><a href="#1-4-合并单元格" class="headerlink" title="1.4 合并单元格"></a>1.4 合并单元格</h3><p>​    特殊情况下,可以把多个单元格合并为一个单元格, 这里跨行合并：rowspan=”合并单元格的个数”，跨列合并：colspan=”合并单元格的个数”。</p>
<ul>
<li>合并单元格三步曲：<ul>
<li>先确定是跨行还是跨列合并。</li>
<li>找到目标单元格. 写上合并方式 = 合并的单元格数量。比如：&lt;td colspan=”2”&gt;&lt;/td&gt;。</li>
<li>删除多余的单元格。</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>10px</span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>10px</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>  <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>500px</span> <span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">&gt;</span></span>个人简历<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>个人信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>照片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>婚姻状况：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>出生年月：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>名族：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>政治面貌：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>身高：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>学历：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gljxu00df8j30ui0oegns.jpg" alt="表格标签示例" width="80%/"></center>

<h2 id="二、列表标签"><a href="#二、列表标签" class="headerlink" title="二、列表标签"></a><font color="born">二、列表标签</font></h2><p>​    表格是用来显示数据的，那么列表就是用来布局的。 列表最大的特点就是整齐、整洁、有序，它作为布局会更加自由和方便。 根据使用情景不同，列表可以分为三大类：无序列表、有序列表和自定义列表。</p>
<h3 id="2-1-无序列表"><a href="#2-1-无序列表" class="headerlink" title="2.1 无序列表"></a>2.1 无序列表</h3><ul>
<li><p>有序列表的语法</p>
<p>&lt;ul&gt; 标签表示 HTML 页面中项目的无序列表，一般会以项目符号呈现列表项，而列表项使用 &lt;li&gt; 标签定义。 无序列表的基本语法格式如下:</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span> 
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>列表项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> 
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>列表项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> 
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>列表项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>无序列表的特点</p>
<ol>
<li>无序列表的各个列表项之间没有顺序级别之分，是并列的。</li>
<li>&lt;ul&gt;&lt;/ul&gt; 中只能嵌套 &lt;li&gt;&lt;/li&gt;，直接在 &lt;ul&gt;&lt;/ul&gt; 标签中输入其他标签或者文字的做法是不被允许的。</li>
<li>&lt;li&gt; 与 &lt;/li&gt; 之间相当于一个容器，可以容纳所有元素。</li>
<li>无序列表会带有自己的样式属性，但在实际使用时，我们会使用 CSS 来设置。</li>
</ol>
</li>
</ul>
<h3 id="2-2-有序列表"><a href="#2-2-有序列表" class="headerlink" title="2.2 有序列表"></a>2.2 有序列表</h3><ul>
<li><p>有序列表的语法</p>
<p>有序列表即为有排列顺序的列表，其各个列表项会按照一定的顺序排列定义。在 HTML 标签中，&lt;ol&gt; 标签用于定义有序列表，列表排序以数字来显示，并且使用 &lt;li&gt; 标签来定义列表项。 有序列表的基本语法格式如下:</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span> 
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>列表项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> 
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>列表项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> 
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>列表项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>有序列表的特点</p>
<ol>
<li>&lt;ol&gt;&lt;/ol&gt;中只能嵌套&lt;li&gt;&lt;/li&gt;，直接在&lt;ol&gt;&lt;/ol&gt;标签中输入其他标签或者文字的做法是不被允许的。</li>
<li>&lt;li&gt; 与 &lt;/li&gt;之间相当于一个容器，可以容纳所有元素。</li>
<li>有序列表会带有自己样式属性，但在实际使用时，我们会使用 CSS 来设置。</li>
</ol>
</li>
</ul>
<h3 id="2-3-自定义列表"><a href="#2-3-自定义列表" class="headerlink" title="2.3 自定义列表"></a>2.3 自定义列表</h3><ul>
<li><p>自定义列表的使用场景: </p>
<p>自定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gljzc97ws9j31je0b6wgv.jpg" alt="表格标签示例" width="80%/"></center>
</li>
<li><p>自定义列表的基本语法</p>
<p>在 HTML 标签中，&lt;dl&gt; 标签用于定义描述列表(或定义列表)，该标签会与 &lt;dt&gt;(定义项目/名字)和 &lt;dd&gt;(描述每一个项目/名字)一起使用。其基本语法如下:</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">&gt;</span></span>名词1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">&gt;</span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span>名词1解释1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span>名词1解释2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>自定义列表的特点</p>
<ol>
<li>&lt;dl&gt;&lt;/dl&gt; 里面只能包含 &lt;dt&gt; 和 &lt;dd&gt;。</li>
<li>&lt;dt&gt; 和 &lt;dd&gt;个数没有限制，经常是一个&lt;dt&gt; 对应多个&lt;dd&gt;。</li>
</ol>
</li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glk07by7rmj30rs0ku40s.jpg" alt="三种列表默认格式" width="80%/"></center>

<h2 id="三、表单标签"><a href="#三、表单标签" class="headerlink" title="三、表单标签"></a><font color="born">三、表单标签</font></h2><h3 id="3-1-表单的功能"><a href="#3-1-表单的功能" class="headerlink" title="3.1 表单的功能"></a>3.1 表单的功能</h3><p>​    现实生活中去银行办理业务需要填表单，它是为了收集用户信息的，那么在网页中，我们的表单同样是为了收集用户信息的，可以起到跟用户进行交互的作用。</p>
<h3 id="3-2-表单的组成"><a href="#3-2-表单的组成" class="headerlink" title="3.2 表单的组成"></a>3.2 表单的组成</h3><p>​    在 HTML 中，一个完整的表单通常由<font color="red">表单域</font>、<font color="red">表单控件(也称为表单元素)</font>和<font color="red">提示信息</font>3个部分构成。</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glk0fbytjpj31wk0qcqau.jpg" alt="表单的组成" width="80%/"></center>

<ul>
<li><p><strong>表单域</strong></p>
<p>表单域是一个包含表单元素的区域。在 HTML 标签中，&lt;form&gt; 标签用于定义表单域，以实现用户信息的收集和传递。 &lt;form&gt; 会把它范围内的表单元素信息提交给服务器。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;form action=“url地址” method=“提交方式” name=“表单域名称"&gt; 
	各种表单元素控件
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>常用属性表</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glpq6bfne8j31g20hqtc4.jpg" alt="表单域属性表" width="80%/"></center>
</li>
<li><p><strong>表单控件</strong></p>
<p>在表单域中可以定义各种表单元素，这些表单元素就是允许用户在表单中输入或者选择的内容控件。input 输入表单元素、select 下拉表单元素、textarea 文本域元素。</p>
</li>
</ul>
<h3 id="3-3-lt-input-gt-表单元素"><a href="#3-3-lt-input-gt-表单元素" class="headerlink" title="3.3 <input> 表单元素"></a>3.3 &lt;input&gt; 表单元素</h3><p>​        &lt;input&gt;标签是一个单标签，是让用户输入信息的一种表单控件，其中包含一个 type 属性，根据输入内容的不同，选择不同的属性值、例如有文本字段、复选框、掩码后的文本控件、单选按钮、按钮等。</p>
<ul>
<li><p><strong>type 属性的属性值及其描述</strong></p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glpq9eulb3j31g60nijwj.jpg" alt="type属性值及其描述表" width="80%/"></center>
</li>
<li><p><strong>除了 type 属性外，&lt;input&gt;标签的其他属性，常用属性如下：</strong></p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glpqb9vltuj31g60au408.jpg" alt="input标签的其他属性" width="80%/"></center>
</li>
<li><p><strong>【注意】</strong></p>
<ol>
<li>name 和 value 是每个表单元素都有的属性值，主要是给后台人员使用的。</li>
<li><font color="red">name 表单元素的名字，要求单选按钮和复选框都要有相同的 name 值。</font></li>
<li><font color="red">checked 用于单选按钮和复选框的，当页面打开的时候默认选择的此按钮。</font></li>
<li>maxlength 是用户可以在表单元素输入的最大字符数，一般比较少用。</li>
</ol>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--</span> <span class="token attr-name">省略基本骨架代码</span> <span class="token attr-name">--</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GET<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  文本框-用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
  密码框-密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
  单选按钮-性别：男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
  复选按钮-爱好：打篮球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>happy<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bool<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 睡觉 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>happy<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sleep<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 打游戏 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>happy<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>game<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
  提交按钮：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交上面数据<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
  重置按钮：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>重新填写<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
  普通按钮button: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>获取短信验证码<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
  上传文件：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glozdp62n3j30xe0kuwi1.jpg" alt="input表单类型展示" width="80%/"></center>

<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glozlsr9lhj31b40is42a.jpg" alt="填写信息" width="80%/"></center>

<p>点击提交按钮，会把用户填写的数据提交到表单域定义的 action 值里，这里是随便写的 xxx.php。后面会跟着用户填写的数据，提交给后台程序员使用，如下图所示。</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glozn1vptoj31iw0q2422.jpg" alt="提交功能展示" width="80%/"></center>

<p>点击选择文件即可打开电脑的文件管理，如下如所示。</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glozpbm2zuj31dd0u0wrx.jpg" alt="上传文件功能展示" width="80%/"></center>



</li>
</ul>
<ul>
<li><p><strong>&lt;label&gt; 标签</strong></p>
<p>&lt;label&gt; 标签用于绑定一个表单元素的，当点击 &lt;label&gt; 标签内的文本时，浏览器会自动将焦点光标定位到对应的表单元素上，用来增加用户的体验。</p>
<p>语法：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GET<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nan<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nan<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="3-4-lt-select-gt-下拉表单元素"><a href="#3-4-lt-select-gt-下拉表单元素" class="headerlink" title="3.4 <select> 下拉表单元素"></a>3.4 &lt;select&gt; 下拉表单元素</h3><ul>
<li><p><strong>使用场景</strong></p>
<p>在页面中，如果有多个选项让用户选择，并且想要节约页面空间时，我们就可以使用<font color="red"> &lt;select&gt;</font> 标签空间定义<font color="red">下拉列表</font>。例如我们在网页中选择籍贯，年月日等场景。</p>
</li>
<li><p><strong>语法</strong></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GET<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>选项一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">selected</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>选项二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>选项三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>选项四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>1.&lt;select&gt;中至少包含一对 &lt;option&gt;。</p>
<p>2.在&lt;option&gt; 中定义selected=”selected” 时可以把当前项设置为默认选中项。</p>
</li>
</ul>
<h3 id="3-5-lt-textarea-gt-文本域元素"><a href="#3-5-lt-textarea-gt-文本域元素" class="headerlink" title="3.5 <textarea> 文本域元素"></a>3.5 &lt;textarea&gt; 文本域元素</h3><ul>
<li><p>使用场景</p>
<p>当用户需要输入大量的内容时，就不能再使用文本框表单了，此时我们可以使用 <font color="red">&lt;textarea&gt;</font> 标签，它可以定义多行文本输入。例如留言板，评论。</p>
</li>
<li><p>语法</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GET<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  请留言
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>文本内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>1.cols=”每行中的字符数”，rows=”显示的行数”，在实际开发中很少使用，会用 CSS 来改变大小。</p>
</li>
</ul>
<h2 id="四、文档查阅"><a href="#四、文档查阅" class="headerlink" title="四、文档查阅"></a><font color="born">四、文档查阅</font></h2><h3 id="4-1-文档查阅网址推荐"><a href="#4-1-文档查阅网址推荐" class="headerlink" title="4.1 文档查阅网址推荐"></a>4.1 文档查阅网址推荐</h3><ul>
<li><p>W3C：<a href="http://www.w3school.com.cn/">http://www.w3school.com.cn</a></p>
</li>
<li><p>MDN：<a href="http://developer.mozilla.org/zh-CN">http://developer.mozilla.org/zh-CN</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>html</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>String-基础</title>
    <url>/2020/12/23/string-ji-chu/</url>
    <content><![CDATA[<h1 id="类-String-基础知识"><a href="#类-String-基础知识" class="headerlink" title="类 String 基础知识"></a><center>类 String 基础知识</center></h1><h2 id="一、类-String-简单介绍"><a href="#一、类-String-简单介绍" class="headerlink" title="一、类 String 简单介绍"></a><font color="#A22015">一、类 String 简单介绍</font></h2><p>  类 <code>String</code> 是 <code>java.lang</code>包下的类，所以不需要导包就可以直接使用。String 类代表字符串。Java 程序中的所有字符串字面值（如 <code>"abc"</code> ）都作为此类的实例实现。</p>
<p>  字符串是<font color="red">常量</font>；它们的值在创建之后不能更改。<code>StringBuffer</code>（字符串缓冲区）支持可变的字符串。因为 String 对象是不可变的，所以可以共享。</p>
<ul>
<li><p><strong>记住字符串的三个特点</strong></p>
<ol>
<li><p> 字符串的<font color="red">内容永不可变</font>。</p>
</li>
<li><p> 正是因为字符串不可改变，所以字符串是<font color="red">可以共享使用</font>的。</p>
</li>
<li><p> 字符串效果上相当于是 char[] 字符数组，但是<font color="red">底层原理</font>是 byte[] 字节数组。</p>
</li>
</ol>
</li>
</ul>
<p>String 是类是一个对象，不是 java 的<font color="red">三类8种</font>基本数据类型。</p>
<ul>
<li><p><strong>基本数据类型</strong></p>
<ol>
<li><p> 字符型：char</p>
</li>
<li><p> 布尔型：boolean</p>
</li>
<li><p> 数值型：byte、short、int、long、float、double</p>
</li>
</ol>
</li>
</ul>
<h2 id="二、类-String-构造方法"><a href="#二、类-String-构造方法" class="headerlink" title="二、类 String 构造方法"></a><font color="#A22015">二、类 String 构造方法</font></h2><p>  字符串的构造方法有很多，常见的是<font color="red">一种直接创建</font>的方法和<font color="red">几种构造方法</font>。其中<font color="red"> <code>StringBuffer</code> </font>和<font color="red"><code>StringBuilder</code></font>会在其他文中单独讨论。</p>
<ul>
<li><p>  <strong>直接创建</strong> <code>String str = "Hello";</code> 右边直接用双引号</p>
</li>
<li><p><strong>常见构造方法</strong></p>
<ol>
<li> <code>String()</code> ：构造一个空。</li>
<li> <code>String(byte[] bytes)</code> ：用 <font color="red">byte 数组</font>来构造字符串。</li>
<li> <code>String(char[] value)</code>：用 <font color="red">char 数组</font>来构造字符串。</li>
<li> <code>String(String original)</code> ：用<font color="red">已存在的字符串</font>来构造新的字符串。</li>
<li> <code>String(StringBuffer buffer) </code>：用<font color="red">字符串缓冲区中的内容</font>来构造新的字符串。</li>
<li> <code>String(StringBuilder builder)</code> ：用<font color="red">字符串生成器中的内容</font>来构造新的字符串。</li>
</ol>
</li>
<li><p>  <strong>代码示例演示</strong></p>
</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoString</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用空参构造</span>
        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 小括号留空，说明字符串什么内容都没有。</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第1个字符串："</span> <span class="token operator">+</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 根据字符数组创建字符串</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>charArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第2个字符串："</span> <span class="token operator">+</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 根据字节数组创建字符串</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byteArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">99</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>byteArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第3个字符串："</span> <span class="token operator">+</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 直接创建</span>
        <span class="token class-name">String</span> str4 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第4个字符串："</span> <span class="token operator">+</span> str4<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码运行结果</strong></li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">第1个字符串：
第2个字符串：ABC
第3个字符串：abc
第4个字符串：Hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="三、字符串常量池与-String-内容比较"><a href="#三、字符串常量池与-String-内容比较" class="headerlink" title="三、字符串常量池与 String 内容比较"></a><font color="#A22015">三、字符串常量池与 String 内容比较</font></h2><h3 id="3-1-字符串常量"><a href="#3-1-字符串常量" class="headerlink" title="3.1 字符串常量"></a>3.1 字符串常量</h3><p>  <font color="red">字符串常量池</font>：程序当中<font color="red">直接写上的双引号字符串，就在字符串常量池</font>中。在堆中存放 new 出来的内容。对于<font color="red">基本类型</font>来说，<code>==</code> 是<font color="red">进行数值</font>的比较。对于<font color="red">引用类型</font>来说，<code>==</code> 是进行<font color="red">地址值</font>的比较。</p>
<ul>
<li>  <strong>代码示例演示</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoString</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>charArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// false</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2 <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// false</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>内存图解</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gly3surcx3j31w20qoe3f.jpg" alt="创建字符串时内存图解" width="100%/"></center>

<p>  跟多内存相关的知识会在其他文中详细讲解，期待~</p>
<h3 id="3-2-String-的内容比较"><a href="#3-2-String-的内容比较" class="headerlink" title="3.2 String 的内容比较"></a>3.2 String 的内容比较</h3><p>  <code>==</code> 是进行对象的<font color="red">地址值比较</font>，如果确实需要字符串的<font color="red">内容比较</font>，可以使用下面两个方法。</p>
<ul>
<li><p><code>public boolean equals(Object obj)</code> ：参数可以是任何对象，只有参数<font color="red">是一个字符串并且内容相同</font>的才会给true；否则返回false。</p>
<p>  1.任何对象都能用Object进行接收。<br>2.equals 方法具有对称性，也就是 a.equals(b) 和 b.equals(a) 效果一样。<br>3.如果比较双方一个常量一个变量，推荐把常量字符串写在前面。（<font color="red">推荐：</font>“abc”.equals(str)    不推荐：str.equals(“abc”)）</p>
</li>
<li><p>  <code>public boolean equalsIgnoreCase(String str)</code> ：忽略大小写，进行内容比较。</p>
</li>
<li><p>  <strong>代码示例演示</strong></p>
</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">De03_String</span>内容比较 <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'H'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>charArray<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span>

        <span class="token class-name">String</span> str4 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// false</span>

        <span class="token class-name">String</span> str5 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 推荐：false</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str5<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 不推荐：报错，空指针异常NullPointerException</span>

        <span class="token class-name">String</span> strA <span class="token operator">=</span> <span class="token string">"Java"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> strB <span class="token operator">=</span> <span class="token string">"java"</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strA<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>strB<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// false，严格区分大小写</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strA<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>strB<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// true，忽略大小写</span>

        <span class="token comment">// 注意，只有英文字母区分大小写，其他都不区分大小写</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc一123"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"abc壹123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="四、类-String-常用方法"><a href="#四、类-String-常用方法" class="headerlink" title="四、类 String 常用方法"></a><font color="#A22015">四、类 String 常用方法</font></h2><h3 id="4-1-与获取相关的方法"><a href="#4-1-与获取相关的方法" class="headerlink" title="4.1 与获取相关的方法"></a>4.1 与获取相关的方法</h3><ol>
<li> <code>public int length()</code>：获取字符串当中含有的<font color="red">字符个数</font>，拿到字符串长度。</li>
<li> <code>public String concat(String str)</code>：将当前字符串和参数字符串<font color="red">拼接</font>成为返回值新的字符串。</li>
<li> <code>public char charAt(int index)</code>：获取<font color="red">指定索引位置的单个字符</font>。（索引从0开始。）</li>
<li> <code>public int indexOf(String str)</code>：<font color="red">查找</font>参数字符串在本字符串当中<font color="red">首次出现的索引位置</font>，如果没有返回-1值。</li>
</ol>
<ul>
<li><p><strong>注意</strong></p>
<p>  数组a的长度：                         a.length<br>ArrayList集合b的长度：         b.size()<br>String对象c的长度:                 c.length()</p>
</li>
<li><p>  <strong>代码示例演示</strong></p>
</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">DomoString</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      	<span class="token comment">// 获取字符串的长度</span>
        <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token string">"asdasfeutrvauevbueyvb"</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符串的长度是："</span> <span class="token operator">+</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">// 拼接字符串</span>
        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"World"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str3 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>	
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello，原封不动</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// World，原封不动</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// HelloWorld，新的字符串</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">// 获取指定索引位置的单个字符</span>
        <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在1号索引位置的字符是："</span> <span class="token operator">+</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 查找参数字符串在本来字符串当中出现的第一次索引位置</span>
        <span class="token comment">// 如果根本没有，返回-1值</span>
        <span class="token class-name">String</span> original <span class="token operator">=</span> <span class="token string">"HelloWorldHelloWorld"</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> original<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"llo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一次索引值是："</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-2-与截取相关的方法"><a href="#4-2-与截取相关的方法" class="headerlink" title="4.2 与截取相关的方法"></a>4.2 与截取相关的方法</h3><p>  字符串的<font color="red">截取方法</font>用 <font color="red">substring</font> 函数。</p>
<ol>
<li> <code>public String substring(int index)</code>：截取从参数位置一直到字符串末尾，返回新字符串。</li>
<li> <code>public String substring(int begin, int end)</code>：截取从begin开始，一直到end结束，中间的字符串。[begin,end)，包含左边，不包含右边。</li>
</ol>
<ul>
<li>  <strong>代码示例演示</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoString</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"HelloWorld"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str2 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// HelloWorld，原封不动</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// World，新字符串</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str3 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// oWo</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-3-与转换相关的方法"><a href="#4-3-与转换相关的方法" class="headerlink" title="4.3 与转换相关的方法"></a>4.3 与转换相关的方法</h3><p>  String 当中与转换相关的常用方法有：</p>
<ol>
<li> <code>public char[] toCharArray()</code>：将当前字符串<font color="red">拆分成为字符数组</font>作为返回值。</li>
<li> <code>public byte[] getBytes()</code>：获得当前字符串底层的<font color="red">字节数组</font>。</li>
<li> <code>public String replace(CharSequence oldString, CharSequence newString)</code>：将所有出现的老字符串替换成为新的字符串，返回替换之后的结果新字符串。（<font color="red">备注</font>：CharSequence 意思就是说可以接受字符串类型。）</li>
</ol>
<ul>
<li>  <strong>代码示例演示</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoString</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 转换成为字符数组</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// H</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 转换成为字节数组</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 字符串的内容替换</span>
        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"How do you do?"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str2 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"o"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// How do you do?</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// H*w d* y*u d*?</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 弹幕屏蔽</span>
        <span class="token class-name">String</span> lang1 <span class="token operator">=</span> <span class="token string">"会不会玩儿呀！你大爷的！你大爷的！你大爷的！！！"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> lang2 <span class="token operator">=</span> lang1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"你大爷的"</span><span class="token punctuation">,</span> <span class="token string">"****"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lang2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 会不会玩儿呀！****！****！****！！！</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-4-与分割相关的方法"><a href="#4-4-与分割相关的方法" class="headerlink" title="4.4 与分割相关的方法"></a>4.4 与分割相关的方法</h3><p>  String 当中与<font color="red">分割字符串</font>方法：</p>
<ol>
<li> <code>public String[] split(String regex)</code>：按照参数的规则，将字符串切分成为若干部分。</li>
</ol>
<ul>
<li><p><strong>注意</strong></p>
<p>  1.<font color="red">split</font> 方法的参数其实是一个“正则表达式”。其它文中探讨正则表达式。</p>
<p>  2.如果按照<font color="red">英文句点</font>“<font color="red">.</font>”进行切分，必须写”<font color="red">\\.</font>“（两个反斜杠）</p>
</li>
<li><p>  <strong>代码示例演示</strong></p>
</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoString</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"aaa,bbb,ccc"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"aaa bbb ccc"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> str2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">"XXX.YYY.ZZZ"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array3 <span class="token operator">=</span> str3<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array3<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码运行结果</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">aaa bbb ccc 
aaa bbb ccc 
XXX YYY ZZZ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode写HTML文档</title>
    <url>/2020/12/16/vscode-xie-html-wen-dang/</url>
    <content><![CDATA[<h1 id="VSCode-写-HTML-文档"><a href="#VSCode-写-HTML-文档" class="headerlink" title="VSCode 写 HTML 文档"></a><center>VSCode 写 HTML 文档</center></h1><h2 id="一、VSCode-的使用"><a href="#一、VSCode-的使用" class="headerlink" title="一、VSCode 的使用"></a><font color="born">一、VSCode 的使用</font></h2><h3 id="1-1-软件的下载和基本的-html-文件创建"><a href="#1-1-软件的下载和基本的-html-文件创建" class="headerlink" title="1.1 软件的下载和基本的 html 文件创建"></a>1.1 软件的下载和基本的 html 文件创建</h3><ul>
<li><p>VSCode 下载可以去<a href="https://code.visualstudio.com/">VSCode官网</a>下载</p>
</li>
<li><p>新建文件，该文件名和和文件格式为<font color="red">.html</font>即可</p>
</li>
<li><p>在新建的 html 文件中输入 ! 接着回车或按 Tab 键即可生成网页骨架。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 输入 ! 回车可快速生成下面骨架 --&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>修改网页的&lt; title &gt; 和 &lt; body &gt; 标签为自己想修改的内容然后右键选择Open In Default Browser 在默认浏览器中打开，可能你的右键没有这个选项，需要安装插件。</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gliqfg55fxj317a0s8djx.jpg" alt="默认浏览器中打开网页" width="70%/"></center>
</li>
<li><p>觉得页面代码字体不合适可以通过 command + 加号键、和 command + 减号键调整字体大小。</p>
</li>
</ul>
<h3 id="1-2-VSCode-插件使用"><a href="#1-2-VSCode-插件使用" class="headerlink" title="1.2 VSCode 插件使用"></a>1.2 VSCode 插件使用</h3><ul>
<li><p>插件安装方法，在最左边的是插件功能选择，之后再搜索框搜索插件名安装，重启 VSCode 即可生效。</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gliqprm66nj319e0tsdnt.jpg" alt="VSCode插件安装" width="70%/"></center>
</li>
<li><p>推荐安装的插件</p>
<ul>
<li><font color="red">Chinese(Simplified)Language Pack for VS Code</font>：中文（简体）语言包</li>
<li><font color="red">Open in Browser</font>：右键选择在浏览器中打开 html 文件，上面演示的功能</li>
<li><font color="red">JS-CSS-HTML Formatter</font>：每次保存，都会自动格式化js、css 和 html 代码</li>
<li><font color="red">Auto Rename Tag</font>：自动重命名配对的 HTML/XML 标签</li>
<li><font color="red">CSS Peek</font>：追踪至样式</li>
</ul>
<p>更多好用的插件希望大家相互推荐~</p>
</li>
</ul>
<h3 id="1-3-VSCode-工具生成的骨架标签新增的代码"><a href="#1-3-VSCode-工具生成的骨架标签新增的代码" class="headerlink" title="1.3 VSCode 工具生成的骨架标签新增的代码"></a>1.3 VSCode 工具生成的骨架标签新增的代码</h3><ul>
<li><p><font color="red">文档类型声明标签 &lt; !DOCTYPE &gt;</font>：告诉浏览器使用那种 HTML 版本来显示网页</p>
<p>&lt; !DOCTYPE html &gt; 表示当前页面采用的是 HTML5 版本来显示网页。&lt; !DOCTYPE html &gt; 不是一个 HTML 标签，它只是一个文档类型声明标签。</p>
</li>
<li><p><font color="red">lang 语言种类</font>：用来定义当前文档显示的语言</p>
<p><font color="red">en</font> 定义语言为英语，<font color="red">zh-CN</font>  定义语言为中文。无论哪种都可以在网页里写中英文，都能正常显示，这个属性只用于<font color="red">浏览器翻译功能的判断</font>而已。</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glircl05pzj314w0kuacx.jpg" alt="lang 属性的影响" width="67%/"></center>
</li>
<li><p><font color="red">字符集</font>：是多个字符的集合，以便计算机能够识别和存储各种文字</p>
<p>在&lt; head&gt; 标签内，可以通过 &lt; meta&gt; 标签的 charset 属性来规定 HTML 文档使用的字符编码集。</p>
<p>charset 常用值有：GB2312、BIG5、GBK 和 UTF-8，其中 <font color="red">UTF-8</font> 也被称为<font color="red">万国码</font>，基本包含了全世界所有国家需要用到的字符。</p>
<p>【注意】:<font color="red">上面语法是必须要写的代码，否则可能引起乱码的情况。一般情况下，统一使用“UTF-8”编码，尽量统一写成标准的 “UTF-8”，不要写成 “utf8” 或 “UTF8”。</font></p>
</li>
</ul>
]]></content>
      <categories>
        <category>工具技巧</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
        <tag>Html</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客搭建</title>
    <url>/2020/12/08/ge-ren-bo-ke-da-jian/</url>
    <content><![CDATA[<h1 id="基于-hexo-的个人博客搭建"><a href="#基于-hexo-的个人博客搭建" class="headerlink" title="基于 hexo 的个人博客搭建"></a><center>基于 hexo 的个人博客搭建</center></h1><h2 id="一、个人博客搭建的几种方法"><a href="#一、个人博客搭建的几种方法" class="headerlink" title="一、个人博客搭建的几种方法"></a><font color="born">一、个人博客搭建的几种方法</font></h2><h3 id="1-1-动态博客的搭建"><a href="#1-1-动态博客的搭建" class="headerlink" title="1.1 动态博客的搭建"></a>1.1 动态博客的搭建</h3><ol>
<li>自己动手写前端后端搭建动态博客。（比较困难）</li>
<li>通过wordpress动态博客框架系统。（<a href="http://wordpress.org/">wordpress网址</a>）</li>
</ol>
<h3 id="1-2-静态博客的框架"><a href="#1-2-静态博客的框架" class="headerlink" title="1.2 静态博客的框架"></a>1.2 静态博客的框架</h3><ol>
<li>hexo框架：快速、简介且高效的博客框架。<font color="red">比较火</font>（<a href="http://hexo.io/zh-cn">hexo</a>）</li>
<li>jekyllrb框架：将纯文本转换为静态网站和博客。（<a href="http://jekyllrb.com/zh-cn">jekyllrb</a>）</li>
<li>gohugo框架：基于go语言的静态博客框架。（<a href="https://www.gohugo.org/">gohugo</a>）</li>
<li>vuepress框架：Vue供电的静态站点生成器。（<a href="https://vuepress.vuejs.org/">veepress</a>）</li>
</ol>
<h2 id="二、个人博客搭建教程—–hexo"><a href="#二、个人博客搭建教程—–hexo" class="headerlink" title="二、个人博客搭建教程—–hexo"></a><font color="born">二、个人博客搭建教程—–hexo</font></h2><p>​    由于 hexo 框架比较火，网上的教程也比较全，接下来就以 hexo 的搭建步骤来演示。系统环境是MacOs，Windown系统大同小异。</p>
<h3 id="2-1-安装Node-js-（直接去官网下载安装即可node-js）"><a href="#2-1-安装Node-js-（直接去官网下载安装即可node-js）" class="headerlink" title="2.1 安装Node.js    （直接去官网下载安装即可node.js）"></a>2.1 安装Node.js    （直接去官网下载安装即可<a href="https://nodejs.org/zh-cn/">node.js</a>）</h3><p>​    安装的时候会安装<font color="red">Node.js</font>本身和<font color="red">npm</font>包管理器。都是后序需要用到的工具。</p>
<p>​    在终端中输入node -v 和 npm -v 查看node.js 和 npm 的版本，如果安装成功则会显示下图类似结果。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">node -v
<span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glf8sspqk1j30v40awad8.jpg" alt="检查nodejs 和 npm 是否安装成功" width="80%"></center>

<h3 id="2-2-安装-hexo-博客框架"><a href="#2-2-安装-hexo-博客框架" class="headerlink" title="2.2 安装 hexo 博客框架"></a>2.2 安装 hexo 博客框架</h3><ul>
<li><p>利用npm包管理器来安装hexo框架，由于国内镜像源的速度很慢，一般会先利用npm输入下行命令安装一个 cnpm 指向淘宝的镜像源。在输入cnpm检查是否安装成功，出现下图使用方法和帮助文档则表示安装成功。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glf98irwa1j316c0u0jys.jpg" alt="检查 cnpm 是否安装成功" width="80%"></center>

<ul>
<li><p>利用 cnpm 全局安装 hexo 博客框架。输入下列命令安装。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>用 hexo -v 命令检验 hexo 是否安装成功，出现下面相关信息则表示安装成功，可以看得出hexo 框架是基于 nodejs 的。</p>
</li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glf9swpmi7j31900nwqce.jpg" alt="检查 hexo 是否安装成功" width="80%"></center>

<h3 id="2-3-开始使用-hexo-搭建博客"><a href="#2-3-开始使用-hexo-搭建博客" class="headerlink" title="2.3 开始使用 hexo 搭建博客"></a>2.3 开始使用 hexo 搭建博客</h3><ul>
<li>新建一个文件夹，用于存放博客的相关文件，出了问题直接删掉这个文件夹即可，重来。我是在我的用户【文稿】文件夹下建了一个【Blog】文件夹。</li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glf9zte6juj31bm0pc45n.jpg" alt="新建一个博客的专属文件夹" width="70%"></center>

<ul>
<li><p>在终端中到新建的【Blog】文件夹目录下，把该文件夹初始化为博客文件夹，用下列命令。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<p>​    初始化这个需要些时间……..</p>
<p>​    初始化成功截图如下：</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glfbbxgdl9j31900jwk25.jpg" alt="初始化博客文件夹成功" width="80%/"></center>

<p>​    初试化成功后会在博客目录【Blog】下生成一系列文件，如下图。</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glfbodfzjjj31jk0iw4b2.jpg" alt="初始化博客生成的文件" width="80%/"></center>

<ul>
<li>启动博客，初始化好博客之后就非常好启动博客，用 hexo s 命令来启动hexo 服务 s 表示 server。</li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glfc7uin02j31jk0iw4ad.jpg" alt="启动 hexo" width="80%"></center>

<p>​    第一次启动可能会出错，大部分都是权限的问题，只要修改所有文件和文件夹的权限即可。当启动之后就可以去浏览器输入 <a href="http://localhost:4000/">http://localhost:4000</a> 访问到我们的博客。是默认主题的。默认给你生成了一篇博文hello-world。</p>
<h3 id="2-4-第一篇自己的博客"><a href="#2-4-第一篇自己的博客" class="headerlink" title="2.4 第一篇自己的博客"></a>2.4 第一篇自己的博客</h3><ul>
<li>新建markdown文件</li>
</ul>
<p>​      自动生成的博文在【Blog】-&gt;【source】-&gt;【_posts】文件夹下，以后我们写自己的博文也是放在这个文件夹，下面我们来自己创建第一篇博文。</p>
<p>可以在【_posts】问价夹下直接新建markdown文件，也可用下面命令在终端中新建。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token string">"博文的题目"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><p>【注意】：</p>
<ol>
<li>在上述新建博客的过程中也可能会出错，也是因为权限问题，需要修改【_posts】的权限才能新建成功。</li>
<li>新建的markdown文件有一个模板，放在【Blog】-&gt;【scaffolds】的 post.md ，其他两个文件一个是草稿，一个也不太清楚…。</li>
</ol>
</li>
<li><p>生成博客相关文件</p>
<p>要在【Blog】目录下操作。生成前先清理下文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>再根据md文件生成相应的网页文件用下面命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glfdq9tva3j30x00u04qp.jpg" alt="生成博客文件成功" width="80%"></center>

<p>​    再重新用hexo s 命令启动hexo 在 <a href="http://localhost:4000/">http://localhost:4000</a> 就可以看到我们自己写的第一篇博客啦！</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glfdvcau4fj31dd0u0hdt.jpg" alt="博客生成成功" width="80%"></center>

<p>​    到此，hexo博客的搭建就完成了。但是它只能在本地打开，接下来我们需要把它部署到远端去，这里推荐的部署方式是把它部署到github上去。</p>
<h3 id="2-5-把博客部署到github上公开使用"><a href="#2-5-把博客部署到github上公开使用" class="headerlink" title="2.5 把博客部署到github上公开使用"></a>2.5 把博客部署到github上公开使用</h3><ul>
<li>先要在github上创建一个跟自己用户名相同的后缀为.github.io的仓库，注意这里必须要与用户名相同。</li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glfe566ct6j31a40iyjun.jpg" alt="创建特定的github仓库" width="80%"></center>

<ul>
<li><p>接着需要在【Blog】目录下的终端里裝一个 Git 的部署插件。用下面命令安装</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> --save hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glfjw4ob5sj315a0u0h84.jpg" alt="git部署插件安装成功" width="80%/"></center>
</li>
<li><p>配置【Blog】文件夹下的 _config.yml 文件</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glfek6mdn0j31240mutcq.jpg" alt="修改配置文件" width="80%/"></center>

<p>​    在# Deployment部分添加图示里面的代码，类型type为git,地址repo为刚刚新建的GitHub仓库的地址，如图14。branch为master。</p>
</li>
<li><p>将 hexo 部署到远端 GitHub 上</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<p>​    中间会要求输入自己的GitHub账号密码，上述都没有问题就可以部署成功。此时，GitHub刚刚新建的仓库中会多出 hexo 博客的相文件。</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glffzitzvkj328q0u0jx2.jpg" alt="部署成功远端文件" width="80%"></center>

<p>​    到这里，你就可以用 <a href="https://ganming1.github.io/">https://ganming1.github.io</a> 来访问自己的个人网站博客啦。</p>
<h3 id="2-6-更换博客主题"><a href="#2-6-更换博客主题" class="headerlink" title="2.6 更换博客主题"></a>2.6 更换博客主题</h3><ul>
<li><p>要更改主题，首先要下载主题</p>
<p>可以在【Blog】目录的终端下用 git 下载</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/litten/hexo-theme-yilia.git themes/yilia<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<p>​        <a href="https://github.com/litten/hexo-theme-yilia.git">https://github.com/litten/hexo-theme-yilia.git</a> 是你想下载的主题远端地址。</p>
<p>​        themes/yilia 是你下载主题后保存的地址。</p>
<ul>
<li>下载好主题后会在【Blog】-&gt;【themes】文件里多出我们下载的主题。</li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glfgo6c0tkj31f40o8wh2.jpg" alt="下载的新主题" width="80%"></center>

<ul>
<li>下载好主题后，可以在【Blog】目录下的 _config.yml 文件中修改使用的主题。</li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glfgvtlosfj31e20sgafp.jpg" alt="在配置文件中更改使用新主题" width="80%"></center>

<p>​    接下来 hexo clean 、hexo g、hexo s、hexo d 清除，生成，开启，推送一系列之前的动作就可以把新主题推送到远端的GitHub个人网站上去。</p>
<p>​    本人尝试过很多主题，个人推荐 matery 主题，大概样子可以参考我的个人网页：<a href="http://ganming1.github.io/">http://ganming1.github.io</a> 更多主题个性化设置欢迎留言讨论。</p>
]]></content>
      <categories>
        <category>工具技巧</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣103-二叉树的锯齿形层序遍历</title>
    <url>/2020/12/22/li-kou-103-er-cha-shu-de-ju-chi-xing-ceng-xu-bian-li/</url>
    <content><![CDATA[<h1 id="力扣103-二叉树的锯齿形层序遍历"><a href="#力扣103-二叉树的锯齿形层序遍历" class="headerlink" title="力扣103-二叉树的锯齿形层序遍历"></a><center>力扣103-二叉树的锯齿形层序遍历</center></h1><h2 id="一、原题题目"><a href="#一、原题题目" class="headerlink" title="一、原题题目"></a><font color="#A22015">一、原题题目</font></h2><h3 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h3><p>  给定一个二叉树，返回其节点值的锯齿形层序遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。</p>
<p>例如：给定二叉树 <code>[3,9,20,null,null,15,7]</code></p>
<pre class="line-numbers language-none"><code class="language-none">  3
 / \
9  20
  /  \
 15   7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>返回锯齿形层序遍历如下：</p>
<pre class="line-numbers language-none"><code class="language-none">[
  [3],
  [20,9],
  [15,7]
]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/">https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/</a></p>
<h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a><font color="#A22015">二、解题思路</font></h2><h3 id="2-1-题目意思理解"><a href="#2-1-题目意思理解" class="headerlink" title="2.1 题目意思理解"></a>2.1 题目意思理解</h3><p>  这道题就是在层次遍历的基础上把奇数层和偶数层给区分开来，知道二叉树的层次遍历应该就不难想到解题方法。</p>
<ul>
<li>  二叉树的层次遍历</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>   <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        		list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
          	list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  在上面层次遍历的基础上，我们需要一层一层的输出节点，所以在进入while循环后就要看看上一轮存了多少个元素在list中，依次把list 中的节点取出遍历（实则放入一个数组中）供后面插入结果集，取出的过程要看是否有左右孩子节点，有则加入list，下轮循环输出。  </p>
<h3 id="2-2-详细代码（Java）"><a href="#2-2-详细代码（Java）" class="headerlink" title="2.2 详细代码（Java）"></a>2.2 详细代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">zigzagLevelOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义结果变量</span>
        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 定义队列</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                          <span class="token comment">// 根节点不为空先加入队列</span>
            queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token punctuation">;</span>                         <span class="token comment">// 定义列表存放每一层节点的数组</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token comment">// 队列不为空时循环</span>
            <span class="token keyword">int</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// 统计当前层的元素数量</span>
            list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 初始化列表为空</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">// 遍历队列中的前 size 个节点</span>
                <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 按顺序弹出队列元素，加入集合</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 当前元素的左子树入队，即把下一层的元素加入队列</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 当前元素的右子树入队，即把下一层的元素加入队列</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 用结果集中已经存在的数组数判断当前层时奇数层还是偶数层</span>
                <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 结果集中有奇数个结果集了，说明当前层是偶数层，要翻转加入</span>
            <span class="token punctuation">}</span>
            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-3-算法执行结果"><a href="#2-3-算法执行结果" class="headerlink" title="2.3 算法执行结果"></a>2.3 算法执行结果</h3><center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glx2o1u7snj30s00ei3zw.jpg" alt="算法执行结果" width="80%/"></center>

<h2 id="三、总结分析"><a href="#三、总结分析" class="headerlink" title="三、总结分析"></a><font color="#A22015">三、总结分析</font></h2><p>  二叉树的题目还是很多的，设计深度优先遍历，广度优先遍历，层次遍历等遍历方法，还是要单独的总结一下下。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>中等</tag>
        <tag>力扣</tag>
        <tag>树</tag>
        <tag>层序遍历</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/12/07/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>力扣1046-最后一块石头的重量</title>
    <url>/2020/12/30/li-kou-1046-zui-hou-yi-kuai-shi-tou-de-chong-liang/</url>
    <content><![CDATA[<h1 id="力扣1046-最后一块石头的重量"><a href="#力扣1046-最后一块石头的重量" class="headerlink" title="力扣1046-最后一块石头的重量"></a><center>力扣1046-最后一块石头的重量</center></h1><h2 id="一、原题题目"><a href="#一、原题题目" class="headerlink" title="一、原题题目"></a><font color="#A22015">一、原题题目</font></h2><h3 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h3><p>  有一堆石头，每块石头的重量都是正整数。每一回合，从中选出两块<strong>最重的</strong>石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x &lt;= y。那么粉碎的可能结果如下：</p>
<p>· 如果 x == y，那么两块石头都会被完全粉碎；<br>· 如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。<br>  最后，最多只会剩下一块石头。返回此石头的重量。如果没有石头剩下，就返回 0。</p>
<h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><ul>
<li><p><strong>示例1：</strong></p>
<p>  <strong>输入：</strong> <code>[2,7,4,1,8,1]</code><br><strong>输出：</strong> <code>1</code> <br><strong>解释：</strong> <br>先选出 7 和 8，得到 1，所以数组转换为 [2,4,1,1,1]，<br>  再选出 2 和 4，得到 2，所以数组转换为 [2,1,1,1]，<br>  接着是 2 和 1，得到 1，所以数组转换为 [1,1,1]，<br>  最后选出 1 和 1，得到 0，最终数组转换为 [1]，这就是最后剩下那块石头的重量。</p>
</li>
</ul>
<p><strong>提示：</strong></p>
<ul>
<li>  <code>1 &lt;= stones.length &lt;= 30</code></li>
<li>  <code>1 &lt;= stones[i] &lt;= 1000</code></li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/last-stone-weight/">https://leetcode-cn.com/problems/last-stone-weight/</a></p>
<h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a><font color="#A22015">二、解题思路</font></h2><ul>
<li>  <strong>排序解题思路</strong></li>
</ul>
<p>  先对数组排序，从后计算两个数的差值，当差值为0时，丢弃这两个数，研究的区域砍掉后两个数。当差值不为0时，将差值插入到前面的有序研究区域内，最后研究区域砍掉后面一个数。不断循环，当研究区域只有一个数时，则它是剩下来的最后一块石头重量，直接返回，否则没有石头剩下，返回0。</p>
<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">lastStoneWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stones<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stones <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment">// 如果数组为空返回0</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stones<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> stones<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// 如果数组至于一个元素，返回这个元素</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>stones<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 对数组排序</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> stones<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment">// 数组研究区域最后的下标</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment">// 当研究区域有两个或以上的数时</span>
      <span class="token keyword">int</span> sub <span class="token operator">=</span> stones<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">-</span>stones<span class="token punctuation">[</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 求研究区域最后两数之差</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>sub <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>   index<span class="token operator">-=</span><span class="token number">2</span><span class="token punctuation">;</span>       <span class="token comment">// 差为0，两个数都丢弃，研究区域-2</span>
      <span class="token keyword">else</span><span class="token punctuation">{</span>                           <span class="token comment">// 差不为0 插入差值</span>
        stones<span class="token punctuation">[</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> sub<span class="token punctuation">;</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>stones<span class="token punctuation">)</span><span class="token punctuation">;</span>
        index<span class="token operator">-=</span><span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> stones<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">// 最后研究区域只有一个数，则返回</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                      <span class="token comment">// 否则说明最后没有研究数据，返回0</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm58lo21p2j30s40eidh8.jpg" alt="代码执行结果" width="100%/"></center>

<p>  上述代码第九行后面插入差值的地方不要自己写代码实现，直接放在后面两个数中小的位置上，然后再排序就相当于插入进去啦！</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>力扣</tag>
        <tag>简单</tag>
        <tag>排序</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣135-分发糖果</title>
    <url>/2020/12/24/li-kou-135-fen-fa-tang-guo/</url>
    <content><![CDATA[<h1 id="力扣135-分发糖果"><a href="#力扣135-分发糖果" class="headerlink" title="力扣135-分发糖果"></a><center>力扣135-分发糖果</center></h1><h2 id="一、原题题目"><a href="#一、原题题目" class="headerlink" title="一、原题题目"></a><font color="#A22015">一、原题题目</font></h2><h3 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h3><p>  老师想给孩子们分发糖果，有 <em>N</em> 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。你需要按照以下要求，帮助老师给这些孩子分发糖果：</p>
<p>  ● 每个孩子至少分配到 1 个糖果。<br>  ● 相邻的孩子中，评分高的孩子必须获得更多的糖果。</p>
<p>  那么这样下来，老师至少需要准备多少克糖果呢？</p>
<h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><ul>
<li><p><strong>示例1：</strong></p>
<p>  <strong>输入：</strong> [1, 0, 2]<br><strong>输出：</strong> 5<br><strong>解释：</strong> 你可以分别给这三个孩子分发 2、1、2 颗糖果。</p>
</li>
<li><p><strong>示例2：</strong></p>
<p>  <strong>输入：</strong> [1, 2, 2]<br><strong>输出：</strong> 4<br><strong>解释：</strong> 你可以分别给这三个孩子分发 1、2、1 颗糖果。第三个孩子只得到 1 颗糖果，这已满足上述两个条件。</p>
</li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a href="">https://leetcode-cn.com/problems/candy/</a></p>
<h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a><font color="#A22015">二、解题思路</font></h2><h3 id="2-1-题目意思理解"><a href="#2-1-题目意思理解" class="headerlink" title="2.1 题目意思理解"></a>2.1 题目意思理解</h3><p>  看到困难的题目就不自信啦~自己思考了一会没想到什么好的思路就开始看别人的题解啦。</p>
<ul>
<li><p><strong>规则定义：</strong> 相邻的孩子中，评分高的孩子必须获得更多的糖果。有 A 和 B 两个孩子，A 在 B 的左边。</p>
<p>  ● 左规则：当 <code>ratingsA &gt; ratingsB</code> A 孩子要比 B 孩子的糖果数量多。<br>● 右规则：当 <code>ratingsA &lt;= ratingsB</code> B 孩子要比 A 孩子的糖果数量多。</p>
<p>  相邻的学生中，评分高的学生必须获得更多的糖果 <strong>等价于</strong> 所有学生满足左规则且满足右规则。</p>
</li>
<li><p><strong>算法流程：</strong></p>
<p>  1.先从左至右遍历学生成绩 <code>ratings</code>，按照以下规则给糖，并记录在 <code>left</code> 中：</p>
<p>   ● 先给所有学生 1 颗糖；<br> ● 若 ratings<sub>i</sub> &gt; ratings<sub>i-1</sub> ,则第 i 名学生糖比第 i-1 名学生多一个。<br> ● 若 ratings<sub>i</sub> &lt;= ratings<sub>i-1</sub> ,则第 i 名学生糖的数量不变。（由右向左遍历处理）</p>
<p>  2.同理，在此规则下从右至左遍历学生成绩并记录在 <code>right</code> 中，可以保证所有学生糖数量 <strong>满足右规则</strong> 。</p>
<p>  3.最终，取以上 22 轮遍历 <code>left</code> 和 <code>right</code> 对应学生糖果数的 <strong>最大值</strong> ，这样则 <strong>同时满足左规则和右规则</strong> ，即得到每个同学的最少糖果数量。</p>
</li>
<li><p><strong>复杂度分析：</strong></p>
<p>  ● <strong>时间复杂度 O(N)：</strong> 遍历两遍数组即可得到结果；<br>● <strong>空间复杂度 O(N)：</strong> 需要借用<code>left</code>，<code>right</code>的线性额外空间。</p>
</li>
</ul>
<p>以上参考题解来源：<a href="https://leetcode-cn.com/problems/candy/solution/candy-cong-zuo-zhi-you-cong-you-zhi-zuo-qu-zui-da-/">大佬题解</a>  </p>
<h3 id="2-2-详细代码（Java）"><a href="#2-2-详细代码（Java）" class="headerlink" title="2.2 详细代码（Java）"></a>2.2 详细代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">candy</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ratings<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> ratings<span class="token punctuation">.</span>length<span class="token punctuation">;</span>               <span class="token comment">// 统计人数</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token comment">// 从左到右记录满足左规则每人应该分的糖数</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment">// 统计左规则每人应该分的糖数</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span>ratings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>ratings<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token comment">// 糖数从0开始计，默认分发的一个糖果记在最后的结果 result 里</span>
               left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>left<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 最后一个同学应该得的糖果数（去掉了默认会有的一颗糖）</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> len <span class="token operator">+</span> right<span class="token punctuation">;</span>               <span class="token comment">// len:默认每人分一个糖，right:最后一个同学得的糖果数</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token comment">// 统计其他孩子应得到的糖果数</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ratings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>ratings<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    right<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            result <span class="token operator">+=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  上述代码并没有安装2.1中的算法流程写，只保留了 <code>left</code> 数组统计从左到右的满足左规则的结果，满足右规则是用一个临时变量 <code>right</code> 表示，计算比较完后直接统计到最后的结果 <code>result</code> 这样可以进一步节省空间。</p>
<h3 id="2-3-算法执行结果"><a href="#2-3-算法执行结果" class="headerlink" title="2.3 算法执行结果"></a>2.3 算法执行结果</h3><center><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glyutxaj0dj30s00eemyk.jpg" alt="算法执行结果" width="100%/"></center>

<h2 id="三、总结分析"><a href="#三、总结分析" class="headerlink" title="三、总结分析"></a><font color="#A22015">三、总结分析</font></h2><p>  这道题还是比较难自己想到这样去做吧，见过做过以后碰到类似的就争取要会做啦~</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>力扣</tag>
        <tag>困难</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣205-同构字符串</title>
    <url>/2020/12/29/li-kou-205-tong-gou-zi-fu-chuan/</url>
    <content><![CDATA[<h1 id="力扣205-同构字符串"><a href="#力扣205-同构字符串" class="headerlink" title="力扣205-同构字符串"></a><center>力扣205-同构字符串</center></h1><h2 id="一、原题题目"><a href="#一、原题题目" class="headerlink" title="一、原题题目"></a><font color="#A22015">一、原题题目</font></h2><h3 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h3><p>  给定两个字符串 <code>s</code> 和 <code>t</code> ，判断它们是否是同构的。如果 <code>s</code> 中的字符可以按某种映射关系替换得到 <code>t</code> ，那么这两个字符串是同构的。每个出现的字符都应当映射到另一个字符，同时不改变字符的顺序。不同字符不能映射到同一个字符上，相同字符只能映射到同一个字符上，字符可以映射到自己本身。</p>
<h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><ul>
<li><p><strong>示例1：</strong></p>
<p>  <strong>输入：</strong> <code>s = "egg", t = "add"</code><br><strong>输出：</strong> <code>true</code></p>
</li>
<li><p><strong>示例2：</strong></p>
<p>  <strong>输入：</strong> <code>s = "foo", t = "bar"</code><br><strong>输出：</strong> <code>false</code></p>
</li>
<li><p><strong>示例3：</strong></p>
<p>  <strong>输入：</strong> <code>s = "paper", t = "title"</code><br><strong>输出：</strong> <code>true</code></p>
</li>
</ul>
<p><strong>提示：</strong></p>
<ul>
<li>  可以假设 <code>s</code> 和 <code>t</code> 长度相同。</li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/isomorphic-strings/">https://leetcode-cn.com/problems/isomorphic-strings/</a></p>
<h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a><font color="#A22015">二、解题思路</font></h2><h3 id="2-1-利用【哈希表映射】解题"><a href="#2-1-利用【哈希表映射】解题" class="headerlink" title="2.1 利用【哈希表映射】解题"></a>2.1 利用【哈希表映射】解题</h3><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  这个题比较简单，简单思考想到用哈希表来存储映射关系，用 s 中的字符作为键， t 当中对应位置的字符作为值存储，当碰到下列两种情况需要返回 false 。否则将映射加入哈希表，直到遍历完字符串返回 true 。</p>
<p>1.当遍历到键在哈希表中已经存在但值与 t 中对应的值不同时则返回 false 。<br>2.当遍历到键不在哈希表中，但 t 中对应的值在哈希表中时也要返回 false 。</p>
<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isIsomorphic</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    
          	<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>		<span class="token comment">// 上述第一种情况</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    
          	<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>		<span class="token comment">// 上述第二种情况</span>
      	<span class="token keyword">else</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm55kb6pplj30s00ekwfw.jpg" alt="哈希表映射执行结果" width="100%/"></center>

<h3 id="2-2-利用【数组映射】解题"><a href="#2-2-利用【数组映射】解题" class="headerlink" title="2.2 利用【数组映射】解题"></a>2.2 利用【数组映射】解题</h3><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  相同上面利用哈希表的思路，这里换做用数组来保存映射关系。</p>
<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isIsomorphic</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sTt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>			<span class="token comment">// 保存 s 到 t 的映射</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>sTt<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>					<span class="token comment">// 初试都填充为-1</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tTs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>			<span class="token comment">// 保存 s 到 t 的映射</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>tTs<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>					<span class="token comment">// 初试都填充为-1</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>sTt<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>sTt<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>		<span class="token comment">// !=-1表示已经保存过当前位置元素S到t的映射，但是保存的值与当前t中当前位置值不一样</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>tTs<span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>tTs<span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>		<span class="token comment">// !=-1表示已经保存过当前位置元素t到s的映射，但是保存的值与当前s中当前位置值不一样</span>
      sTt<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 没保存过，保存s到t的映射</span>
      tTs<span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 同时保存t到s的映射</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm594p0vm2j30s00emgn0.jpg" alt="数组映射执行结果" width="100%/"></center>

<h3 id="2-3-利用【数组连边】解题"><a href="#2-3-利用【数组连边】解题" class="headerlink" title="2.3 利用【数组连边】解题"></a>2.3 利用【数组连边】解题</h3><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  还是定义两个数组，为具有对应关系的字符连边并赋予权值，初始值为 0 表示未有映射关系，同为 0 才能连边。</p>
<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isIsomorphic</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sm<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">!=</span>tm<span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
          	<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        sm<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> tm<span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>	<span class="token comment">// 连边符权值</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm59mivx4fj30s00ee0u5.jpg" alt="数组连边执行结果" width="100%/"></center>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>力扣</tag>
        <tag>简单</tag>
        <tag>数组</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣290-单词规律</title>
    <url>/2020/12/16/li-kou-290-dan-ci-gui-lu/</url>
    <content><![CDATA[<h1 id="力扣290-单词规律"><a href="#力扣290-单词规律" class="headerlink" title="力扣290-单词规律"></a><center>力扣290-单词规律</center></h1><h2 id="一、原题题目"><a href="#一、原题题目" class="headerlink" title="一、原题题目"></a><font color="born">一、原题题目</font></h2><h3 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h3><p>​        给定一种规律 pattern 和一个字符串 str ，判断 str 是否遵循相同的规律。这里的遵循指完全匹配，例如， pattern 里的每个字母和字符串 str 中的每个非空单词之间存在着双向连接的对应规律。</p>
<h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><ul>
<li><p><strong>示例1：</strong></p>
<p><strong>输入：</strong> pattern = “abba”, str = “dog cat cat dog”<br><strong>输出：</strong> true</p>
</li>
<li><p><strong>示例2：</strong></p>
<p><strong>输入：</strong> pattern = “abba”, str = “dog cat cat fish”<br><strong>输出：</strong> false</p>
</li>
<li><p><strong>示例3：</strong></p>
<p><strong>输入：</strong> pattern = “aaaa”, str = “dog cat cat dog”</p>
<p><strong>输出：</strong> false</p>
</li>
<li><p><strong>示例4：</strong></p>
<p><strong>输入：</strong> pattern = “abba”, str = “dog dog dog dog”</p>
<p><strong>输出：</strong> false</p>
</li>
<li><p><strong>说明：</strong> 你可以假设  pattern 只包含小写字母，str 包含了由单个空格分隔的小写字母。</p>
</li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/word-pattern">https://leetcode-cn.com/problems/word-pattern</a></p>
<h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a><font color="born">二、解题思路</font></h2><h3 id="2-1-题目意思理解"><a href="#2-1-题目意思理解" class="headerlink" title="2.1 题目意思理解"></a>2.1 题目意思理解</h3><p>​    这个题目是个很简单的题目，很容易想到思路。</p>
<ul>
<li>首先用 split 函数将字符串 str 按空格切割成字符串数组 arraystr []。</li>
<li>比较 pattern 与 arraystr 的长度，如果不相同直接返回 false ，否则进入下面的比较过程。</li>
<li>建立一个 HashMap，键用来存储 pattern 中的字母，值用来存储 arraystr 数组中对应位置的单词，当然在存储的过程中会进行检验的，当键值对都没存在过时则加入 HashMap ，当有一个（键或值）存在时，取出该键值对与当前准备插入的比较，若完全相同则符合，直接下一个，若有一个（键或值）不相同时，则直接返回 false 。</li>
<li>如果程序跑到了最后还没返回 false 则返回 true 。</li>
</ul>
<h3 id="2-2-详细代码（Java）"><a href="#2-2-详细代码（Java）" class="headerlink" title="2.2 详细代码（Java）"></a>2.2 详细代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">wordPattern</span><span class="token punctuation">(</span><span class="token class-name">String</span> pattern<span class="token punctuation">,</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arraystr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">// 分割字符串</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arraystr<span class="token punctuation">.</span>length <span class="token operator">!=</span> pattern<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token comment">// 长度不同，直接返回false</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pattern<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token comment">// 当前键在map中没存在过</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span>arraystr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// 当前值在map中也没存在过</span>
                    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>arraystr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 都没存在则加入map</span>
                <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                                  <span class="token comment">// 健不存在但值存在，返回false</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>                                                  <span class="token comment">// 键存在</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arraystr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 值也存在，并且就是对应的键值对，什么也不做跳过</span>
                <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                                  <span class="token comment">// 所存的键值对与当前不一样，返回false</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                                                <span class="token comment">// 遍历结束，没有中途返回false的说明符合规律</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>代码第13行进行字符串内容的比较的时候一定要用<font color="red">.equals</font>函数来比较，不能用<font color="red">==</font>或<font color="red">!=</font>，否则都会出错。</li>
</ul>
<h3 id="2-3-算法执行结果"><a href="#2-3-算法执行结果" class="headerlink" title="2.3 算法执行结果"></a>2.3 算法执行结果</h3><center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glpj9qxoc0j30pa0cw3zq.jpg" alt="算法执行结果" width="80%/"></center>

<h2 id="三、总结分析"><a href="#三、总结分析" class="headerlink" title="三、总结分析"></a><font color="born">三、总结分析</font></h2><p>​    题目很简单，单纯的哈希表的练习。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>力扣</tag>
        <tag>简单</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣217-存在重复元素</title>
    <url>/2020/12/24/li-kou-217-cun-zai-chong-fu-yuan-su/</url>
    <content><![CDATA[<h1 id="力扣217-存在重复元素"><a href="#力扣217-存在重复元素" class="headerlink" title="力扣217-存在重复元素"></a><center>力扣217-存在重复元素</center></h1><h2 id="一、原题题目"><a href="#一、原题题目" class="headerlink" title="一、原题题目"></a><font color="#A22015">一、原题题目</font></h2><h3 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h3><p>  给定一个整数数组，判断是否存在重复元素。如果任意一值在数组中出现至少两次，函数返回 <code>true</code> 。如果数组中每个元素都不相同，则返回 <code>false</code> 。</p>
<h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><ul>
<li><p><strong>示例1：</strong></p>
<p>  <strong>输入：</strong> [1,2,3,1]<br><strong>输出：</strong> true</p>
</li>
<li><p><strong>示例2：</strong></p>
<p>  <strong>输入：</strong> [1,2,3,4]<br><strong>输出：</strong> false</p>
</li>
<li><p><strong>示例3：</strong></p>
<p>  <strong>输入：</strong> [1,1,1,3,3,4,3,2,4,2]<br><strong>输出：</strong> true</p>
</li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a href="">https://leetcode-cn.com/problems/contains-duplicate/</a></p>
<h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a><font color="#A22015">二、解题思路</font></h2><h3 id="2-1-HashMap思路解题"><a href="#2-1-HashMap思路解题" class="headerlink" title="2.1 HashMap思路解题"></a>2.1 HashMap思路解题</h3><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  此题很简单，只需要把数组里的每一个元素依次放入哈希表中，以元素为 <code>key</code> ，个数为 <code>value</code>。只要碰到该元素已经存在与哈希表中，则可返回 <code>true</code>，如果能遍历完还没返回结果则最后返回 <code>false</code>。</p>
<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  上述代码中规中矩，对于一个稍微有点计算机基础的人来说没有任何难度。</p>
<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glyvu2r8vgj30s20ei0u4.jpg" alt="HashMap执行结果" width="100%/"></center>

<p>  结果好像很惨<del>说明还有其它更优的方法。赶紧再思考思考</del></p>
<h3 id="2-2-HashSet思路解题"><a href="#2-2-HashSet思路解题" class="headerlink" title="2.2 HashSet思路解题"></a>2.2 HashSet思路解题</h3><p>  看别人题解用的同样的思路，但是用的是 HashSet 性能提升了不少</p>
<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glyw2zl7i1j30s40ei0u4.jpg" alt="HashSet执行结果" width="100%/"></center>

<h3 id="2-3-排序思路解题"><a href="#2-3-排序思路解题" class="headerlink" title="2.3 排序思路解题"></a>2.3 排序思路解题</h3><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  在对数字从小到大排序之后，数组的重复元素一定出现在相邻位置中。因此，我们可以扫描已排序的数组，每次判断相邻的两个元素是否相等，如果相等则说明存在重复的元素。</p>
<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glywbwixbyj30s00eeta3.jpg" alt="排序算法执行结果" width="100%/"></center>

<p>  此题结束，还是排序算法结果可以些。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>力扣</tag>
        <tag>简单</tag>
        <tag>排序</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣316-去除重复字母</title>
    <url>/2020/12/20/li-kou-316-qu-chu-chong-fu-zi-mu/</url>
    <content><![CDATA[<h1 id="力扣316-去除重复字母"><a href="#力扣316-去除重复字母" class="headerlink" title="力扣316-去除重复字母"></a><center>力扣316-去除重复字母</center></h1><h2 id="一、原题题目"><a href="#一、原题题目" class="headerlink" title="一、原题题目"></a><font color="born">一、原题题目</font></h2><h3 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h3><p>  给你一个字符串 <code>s</code> ，请你去除字符串中重复的字母，使得每个字母只出现一次。需保证<strong>返回结果的字典序最小</strong>（要求不能打乱其他字符的相对位置）。</p>
<p><strong>注意：</strong>该题与 1081 <a href="https://leetcode-cn.com/problems/smallest-subsequence-of-distinct-characters">https://leetcode-cn.com/problems/smallest-subsequence-of-distinct-characters</a> 相同</p>
<h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><ul>
<li><p><strong>示例1：</strong></p>
<p>  <strong>输入：</strong> s = “bcabc”</p>
<p>  <strong>输出：</strong> “abc”</p>
</li>
<li><p><strong>示例2：</strong></p>
<p>  <strong>输入：</strong> s = “cbacdcbc”</p>
<p>  <strong>输出：</strong> “acdb”</p>
</li>
</ul>
<p><strong>提示：</strong></p>
<ul>
<li>  <code>1 &lt;= s.length &lt;= 10^4</code></li>
<li>  <code>s</code> 由小写英文字母组成</li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/remove-duplicate-letters/">https://leetcode-cn.com/problems/remove-duplicate-letters/</a></p>
<h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a><font color="born">二、解题思路</font></h2><h3 id="2-1-题目意思理解"><a href="#2-1-题目意思理解" class="headerlink" title="2.1 题目意思理解"></a>2.1 题目意思理解</h3><p>  这里有个<strong>字典序</strong>概念可能大多数人都已经知道啦，咋们简单提一下即可。</p>
<p>  <strong>字典序：</strong>是指按照单词出现在字典中的顺序去比较字符串的方法。例如 “abc” 的字典序在 “acdb” 的前面。</p>
<p>  这题自己思考了很久，大概也有自己的思路，但实时起来太过于复杂，最终还是放弃，去看题解了。毕竟刷题嘛，时间有限，看题解也是快速掌握方法思路的方法，前提还是要自己有所思考。</p>
<p>  看完官方题解后，顿时明白我自己思考的问题在哪里。官方题解里有下面三个数据结构来保存相关信息。<a href="https://leetcode-cn.com/problems/remove-duplicate-letters/solution/qu-chu-zhong-fu-zi-mu-by-leetcode-soluti-vuso/">官方题解</a></p>
<ul>
<li><p>  定义一个长度为26的数组会统计每个字符最后出现的位置，用于检测后面是否还存在某个字符的作用。</p>
</li>
<li><p>定义一个栈用于存需要选出的字符，会出现下面三种情况：</p>
<p>  <font color="red">一：</font>如果当前考虑的字符已经存在过则直接跳过这个字符。<font color="red">（代码12行）</font></p>
<p>  <font color="red">二：</font>如果当前考虑的字符就是排在栈顶字符字典序之后的，且在栈中没有存在过，那么这个字符就要入栈。<font color="red">（代码19行）</font></p>
<p>  <font color="red">三：</font>如果当前考虑的字符没有在栈中存在过，且是栈顶字符字典序之前的字符，那么就可能要考虑考虑栈顶的元素是否可以先丢弃，选择后面的那个字符来使整个字符串的字典序变小，这里就用到前面的数组，如果后面还有栈顶元素，则此时栈顶元素丢弃，如果后面没有，则不能丢弃，直接将当前元素入栈，这个过程是循环判断的过程。<font color="red">（代码14行）</font></p>
</li>
<li><p>  定义一个长度为26的布尔数组用于存储是否在栈中存在了。</p>
</li>
</ul>
<h3 id="2-2-详细代码（Java）"><a href="#2-2-详细代码（Java）" class="headerlink" title="2.2 详细代码（Java）"></a>2.2 详细代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">removeDuplicateLetters</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lastIntex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 用于存储每个字符最后出现的位置</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">// 存储每个字符最后出现的位置</span>
            lastIntex<span class="token punctuation">[</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 定义栈</span>
        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 定义是否存在于栈中的数组</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 遍历每一个字符</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">continue</span><span class="token punctuation">;</span>       <span class="token comment">// 分析中的第一种情况</span>
            <span class="token comment">// 分析中的第三种情况</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>stack<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> lastIntex<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">Character</span> top <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                visited<span class="token punctuation">[</span>top<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 分析中的第二种情况</span>
            stack<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            visited<span class="token punctuation">[</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 以下是把栈中的结果保存成字符串输出</span>
        <span class="token class-name">StringBuilder</span> resstr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Character</span> ch <span class="token operator">:</span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            resstr<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> resstr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-3-算法执行结果"><a href="#2-3-算法执行结果" class="headerlink" title="2.3 算法执行结果"></a>2.3 算法执行结果</h3><center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gluqpggfhjj30sc0eijst.jpg" alt="算法执行结果" width="80%/"></center>

<h2 id="三、总结分析"><a href="#三、总结分析" class="headerlink" title="三、总结分析"></a><font color="born">三、总结分析</font></h2><p>  这道题自己有思考，虽然没想出来，但觉得每道题无论是否能做出来自己都需要有一个思考的过程，充分的思考可以让自己更容易理解别人的解题思路，印象也会更加深刻，然后自己记录下来供自己以后复习回顾。可能大家看了我上面所写的觉得很难懂，但这是在我的理解之上写的题解，我看到这些肯定能懂了，所以想要完全理解的小伙伴先自己有足够的思考再看官方题解我觉得就够了。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>中等</tag>
        <tag>力扣</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣376-摆动序列</title>
    <url>/2020/12/24/li-kou-376-bai-dong-xu-lie/</url>
    <content><![CDATA[<h1 id="力扣376-摆动序列"><a href="#力扣376-摆动序列" class="headerlink" title="力扣376-摆动序列"></a><center>力扣376-摆动序列</center></h1><h2 id="一、原题题目"><a href="#一、原题题目" class="headerlink" title="一、原题题目"></a><font color="#A22015">一、原题题目</font></h2><h3 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h3><p>  如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为 <strong>摆动序列</strong> 。第一个差（如果存在的话）可能是正数或负数。少于两个元素的序列也是摆动序列。</p>
<p>  例如， <code>[1,7,4,9,2,5]</code> 是一个摆动序列，因为差值 <code>(6,-3,5,-7,3)</code> 是正负交替出现的。相反, <code>[1,4,7,2,5]</code> 和 <code>[1,7,4,5,5]</code> 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。</p>
<p>  给定一个整数序列，返回作为摆动序列的最长子序列的长度。 通过从原始序列中删除一些（也可以不删除）元素来获得子序列，剩下的元素保持其原始顺序。</p>
<h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><ul>
<li><p><strong>示例1：</strong></p>
<p>  <strong>输入：</strong> [1,7,4,9,2,5]<br><strong>输出：</strong> 6<br><strong>解释：</strong> 整个序列均为摆动序列。</p>
</li>
<li><p><strong>示例2：</strong></p>
<p>  <strong>输入：</strong> [1,17,5,10,13,15,10,5,16,8]<br><strong>输出：</strong> 7<br><strong>解释：</strong> 这个序列包含几个长度为 7 摆动序列，其中一个可为[1,17,10,13,10,16,8]。</p>
</li>
<li><p><strong>示例3：</strong></p>
<p>  <strong>输入：</strong> [1,2,3,4,5,6,7,8,9]<br><strong>输出：</strong> 2</p>
</li>
</ul>
<p><strong>进阶：</strong><br>你能否用 O(<em>n</em>) 时间复杂度完成此题?</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="">https://leetcode-cn.com/problems/wiggle-subsequence</a></p>
<h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a><font color="#A22015">二、解题思路</font></h2><h3 id="2-1-动态规划（dp）思路解题"><a href="#2-1-动态规划（dp）思路解题" class="headerlink" title="2.1 动态规划（dp）思路解题"></a>2.1 动态规划（dp）思路解题</h3><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  在自己思考这个题目的时候就觉得这是一个<font color="red">动态规划</font>的题目，但没能写出整体过程，参考官方题解。</p>
<ul>
<li>  当序列长度为 <code>0</code> 或 <code>1</code> 时，摆动序列的长度也对应为 <code>0</code> 或 <code>1</code> 。当序列长度 <code>&gt;=2</code> 时，需要讨论。</li>
<li>  遍历序列：<code>up[i]</code> 表示前 <code>i</code> 个数据并且最后是上升的最长摆动序列，称为最长上升摆动序列，<code>down[i]</code> 表示前 <code>i</code> 个数据并且最后是下降的最长摆动序列，称为最长下降摆动序列。</li>
</ul>
<p>讨论当前第 <code>i</code> 个数的加入：</p>
<ul>
<li><p>  <code>nums[i] = nums[i-1]</code> ：摆动序列长度不变</p>
</li>
<li><p><code>nums[i] &gt; nums[i-1]</code> ：下降摆动序列不变</p>
<p>  1.当 <code>nums[i]</code> 放入<font color="red">最长下降摆动序列</font> <code>up[i] = down[i-1] + 1</code><br>2.当 <code>nums[i]</code> 放入<font color="red">最长上升摆动序列</font> <code>up[i] = up[i-1]</code> </p>
</li>
<li><p><code>nums[i] &lt; nums[i-1]</code> ：上升摆动序列不变</p>
<p>  1.当 <code>nums[i]</code> 放入<font color="red">最长上升摆动序列</font> <code>down[i] = up[i-1] + 1</code><br>2.当 <code>nums[i]</code> 放入<font color="red">最长下降摆动序列</font> <code>down[i] = down[i-1]</code></p>
</li>
<li><p>  <strong>详细代码（Java）</strong></p>
</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">wiggleMaxLength</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>              <span class="token comment">// 记录数组的长度</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>len<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> len<span class="token punctuation">;</span>             <span class="token comment">// 如果数组不超过2个数，那么就是摆动序列</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> up <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 记录到每个位置的上升摆动序列长度</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> down <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment">// 记录到每个位置的下降摆动序列长度</span>
        up<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> down<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment">// 第一个位置即可以看做是上升的或是下降的长度为1的摆动序列</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">// 从第二个元素开始遍历</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment">// 如果后一个元素比前一个大，则只会影响上升摆动序列长度</span>
                up<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>up<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>down<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 只更新上升摆动序列长度</span>
                down<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> down<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 下降序列长度不会影响</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 如果后一个元素比前一个小，则只会影响下降摆动序列长度，同上分析</span>
                down<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>up<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>down<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                up<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> up<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment">// 如果后一个元素等于前值，则上升和下降都不影响</span>
                up<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> up<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                down<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> down<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>up<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>down<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glze7uqljpj30ry0eidh8.jpg" alt="动规算法执行结果" width="100%/"></center>

<p>  观察到上述代码每次更新 up 和 down 数组时只用到了前一个值，并且最后返回结果也只用到最后的值，故在空间上还可以做一定的优化。</p>
<ul>
<li>  <strong>优化代码</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">wiggleMaxLength</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>          <span class="token comment">// 记录数组长度</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>len<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> len<span class="token punctuation">;</span>         <span class="token comment">// 如果数组不超过2个数，那么就是摆动序列</span>
        <span class="token keyword">int</span> up <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>down <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">// 刚开始第一个元素即是上升序列又是下降序列，且长度为1</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">// 从第二个开始遍历</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment">// 如果后一个元素比前一个大，只更新上升摆动序列长度</span>
                up <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>up<span class="token punctuation">,</span>down<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// 如果后一个元素比前一个小，只更新下降摆动序列长度</span>
                down <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>down<span class="token punctuation">,</span>up<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>up<span class="token punctuation">,</span>down<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>优化执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glzeh352vpj30ry0ecwfv.jpg" alt="优化动规执行结果" width="100%/"></center>

<p>  空间复杂度上得到了一点提升，注意力扣每次跑代码测试用例可能有所差异，相同的代码每次跑结果可能都会有些差异。</p>
<h3 id="2-2-贪心思路解题"><a href="#2-2-贪心思路解题" class="headerlink" title="2.2 贪心思路解题"></a>2.2 贪心思路解题</h3><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  本题要求通过从原始序列中删除一些（也可以不删除）元素来获得子序列，剩下的元素保持其原始顺序。那么当我么碰到连续上升或连续下降的数据时就要执行删除操作啦，那么问题就是留下哪一个数能使整个留下来的子序列为最长摆动序列。</p>
<p><strong>局部最优：</strong> 当碰到单调坡度时，保留峰值即是局部最优的情况。<br><strong>整体最优：</strong> 当整个序列有最多保留下来的峰值时，就是达到最长摆动序列的全局最优情况。</p>
<p>  至于上述所说的为什么成立，这里借用网友题解的一张图尝试说明下原因，我个人觉得当我们碰到连续递增的序列时，例如 10，13，15 时，我们应该选择最大的保留，这样在后序数据中选择一个下降的数可接受范围更大，即可能使我们最终留下来的摆动序列最长。递减的序列同样道理应该选择最小的数保留。</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glzf1f6r49j31040dyjth.jpg" alt="示例2分析" width="100%/"></center>

<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">wiggleMaxLength</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>          <span class="token comment">// 记录数组长度</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> len<span class="token punctuation">;</span>     <span class="token comment">// 如果数组不超过2个数，那么就是摆动序列</span>
        <span class="token keyword">int</span> curdiff <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment">// 开始时的当前差值设为0</span>
        <span class="token keyword">int</span> prediff <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment">// 开始时的之前差值设为0</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                  <span class="token comment">// 刚开始第一个元素是峰值，统计1个</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">// 从第二个开始遍历</span>
            curdiff <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 计算当前差值</span>
            <span class="token comment">// 如果当前差值与之前差值变号了，并且当前差值不是0则表示是峰值</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>curdiff <span class="token operator">&gt;</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> prediff<span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token operator">||</span> curdiff<span class="token generics"><span class="token punctuation">&lt;</span>0<span class="token operator">&amp;</span><span class="token operator">&amp;</span>prediff<span class="token punctuation">&gt;</span></span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                count<span class="token operator">++</span><span class="token punctuation">;</span>
                prediff <span class="token operator">=</span> curdiff<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glzfhdk8hmj30si0eo3zx.jpg" alt="贪心算法执行结果" width="100%/"></center>

<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a><font color="#A22015">三、总结</font></h2><p>  此题真的是动态规划和贪心算法里的经典题型。值得自己深入研究，很多想法虽然都是看别人的题解自己整理的，但在自己整理的过程中也想明白了很多细节。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>中等</tag>
        <tag>力扣</tag>
        <tag>贪心</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣387-字符串中的第一个唯一字符</title>
    <url>/2020/12/23/li-kou-387-zi-fu-chuan-zhong-de-di-yi-ge-wei-yi-zi-fu/</url>
    <content><![CDATA[<h1 id="力扣387-字符串中的第一个唯一字符"><a href="#力扣387-字符串中的第一个唯一字符" class="headerlink" title="力扣387-字符串中的第一个唯一字符"></a><center>力扣387-字符串中的第一个唯一字符</center></h1><h2 id="一、原题题目"><a href="#一、原题题目" class="headerlink" title="一、原题题目"></a><font color="#A22015">一、原题题目</font></h2><h3 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h3><p>  给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。</p>
<ul>
<li><p>示例：</p>
<p>  s = “leetcode”<br>  返回 0</p>
<p>  s = “loveleetcode”<br>  返回 2</p>
</li>
</ul>
<p>提示：你可以假定该字符串只包含小写字母。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/first-unique-character-in-a-string/">https://leetcode-cn.com/problems/first-unique-character-in-a-string/</a></p>
<h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a><font color="#A22015">二、解题思路</font></h2><h3 id="2-1-题目意思理解"><a href="#2-1-题目意思理解" class="headerlink" title="2.1 题目意思理解"></a>2.1 题目意思理解</h3><p>  这是一道简单的字符串相关题目，根据题目意思，要找出只出现一次的并且最靠前的那一个，我们可以用一个哈希表来存储出现的字符和出现的次数，再依次用字符串中的字符去取哈希表中的个数，值为1就返回该字符在字符串中的位置。</p>
<h3 id="2-2-详细代码（Java）"><a href="#2-2-详细代码（Java）" class="headerlink" title="2.2 详细代码（Java）"></a>2.2 详细代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">firstUniqChar</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-3-算法执行结果"><a href="#2-3-算法执行结果" class="headerlink" title="2.3 算法执行结果"></a>2.3 算法执行结果</h3><center><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glx4czghrij30s00eign1.jpg" alt="算法执行结果" width="80%/"></center>

<p>  效率好像不是很高。当我直接用数组存储每个字符的个数时，代码如下，性能得到了提升。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">firstUniqChar</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            count<span class="token punctuation">[</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token punctuation">[</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<center><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glx4ohwy1jj30s20ei3zx.jpg" alt="改进算法执行结果" width="80%/"></center>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>力扣</tag>
        <tag>简单</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣389-找不同</title>
    <url>/2020/12/18/li-kou-389-zhao-bu-tong/</url>
    <content><![CDATA[<h1 id="力扣389-找不同"><a href="#力扣389-找不同" class="headerlink" title="力扣389-找不同"></a><center>力扣389-找不同</center></h1><h2 id="一、原题题目"><a href="#一、原题题目" class="headerlink" title="一、原题题目"></a><font color="born">一、原题题目</font></h2><h3 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h3><p>  给定两个字符串 <strong><em>s</em></strong> 和 <strong><em>t</em></strong>，它们只包含小写字母。字符串 <strong><em>t</em></strong> 由字符串 <strong><em>s</em></strong> 随机重排，然后在随机位置添加一个字母。请找出在 <strong><em>t</em></strong> 中被添加的字母。</p>
<h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><ul>
<li><p><strong>示例一</strong></p>
<p>  <strong>输入：</strong> s = “abcd”, t = “abcde”</p>
<p>  <strong>输出：</strong> “e”</p>
<p>  <strong>解释：</strong> ‘e’ 是那个被添加的字母。</p>
</li>
<li><p><strong>示例二</strong></p>
<p>  <strong>输入：</strong> s = “”, t = “y”</p>
<p>  <strong>输出：</strong> “y”</p>
</li>
<li><p><strong>示例三</strong></p>
<p>  <strong>输入：</strong> s = “a”, t = “aa”</p>
<p>  <strong>输出：</strong> “a”</p>
</li>
<li><p><strong>示例四</strong></p>
<p>  <strong>输入：</strong> s = “ae”, t = “aea”</p>
<p>  <strong>输出：</strong> “a”</p>
</li>
</ul>
<p><strong>提示：</strong></p>
<ul>
<li>  <code>0 &lt;= s.length &lt;= 1000</code></li>
<li>  <code>t.length == s.length + 1</code></li>
<li>  <code>s</code> 和 <code>t</code> 只包含小写字母</li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/find-the-difference/">https://leetcode-cn.com/problems/find-the-difference/</a></p>
<h2 id="二、解题思路1"><a href="#二、解题思路1" class="headerlink" title="二、解题思路1"></a><font color="born">二、解题思路1</font></h2><h3 id="2-1-题目理解分析"><a href="#2-1-题目理解分析" class="headerlink" title="2.1 题目理解分析"></a>2.1 题目理解分析</h3><p>  题目很直白，也非常容易想到思路，我第一个思路就是用一个 HashMap 去存储 s 字符串中每个字符的个数（字符作为 key ，个数作为 value）。然后遍历 t 字符串的时候去减掉对应字符的个数值，当有不在 HashMap 中的字符或个数已经为0的字符即为加进去的字符。</p>
<h3 id="2-2-详细代码（Java）"><a href="#2-2-详细代码（Java）" class="headerlink" title="2.2 详细代码（Java）"></a>2.2 详细代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">findTheDifference</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 定义 map </span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   <span class="token comment">// 统计 s 中的每个字符个数</span>
      <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token operator">?</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   <span class="token comment">// 检验 t 中添加进去的字符</span>
      <span class="token keyword">char</span> ch <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> 
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// 如果字符在 map 中存在，并且个数大于0，则个数减一</span>
      <span class="token keyword">else</span> <span class="token keyword">return</span> ch<span class="token punctuation">;</span>                                 <span class="token comment">// 否则为添加进去的那个字符，直接返回</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-3-算法执行结果"><a href="#2-3-算法执行结果" class="headerlink" title="2.3 算法执行结果"></a>2.3 算法执行结果</h3><center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gls1b3l77vj30ry0egq4b.jpg" alt="算法执行结果" width="80%/"></center>

<p>  算法简单是简单，结果也很残忍，时间上只击败8.17%的用户，不行~~~还得想想其他思路提升性能。下面是将存储方法改为数组存储，因为题目限制了只有小写字母，所有用26长度的 int 数组就可以达到统计个数的目的。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">findTheDifference</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                   <span class="token comment">// 定义数组存储个数</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// 同时对 s 和 t 中字符个数统计</span>
      count<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token comment">// s 中的字符相应位置加1</span>
      count<span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token comment">// t 中的字符相应位置减1</span>
    <span class="token punctuation">}</span>
    count<span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token comment">// t 中最后一个字符相应位置减1</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   <span class="token comment">// 查找添加的字符</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 个数为-1的即为添加的字符，其他都是0</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gls1x0qlnrj30s20eg0u5.jpg" alt="改进算法执行结果" width="80%/"></center>

<p>  速度上得到了不小的提升，不过还不是很理想。再去参考参考别的大神的题解看看…….</p>
<h2 id="三、解题思路2-位运算"><a href="#三、解题思路2-位运算" class="headerlink" title="三、解题思路2(位运算)"></a><font color="born">三、解题思路2(位运算)</font></h2><h3 id="3-1-题目理解分析"><a href="#3-1-题目理解分析" class="headerlink" title="3.1 题目理解分析"></a>3.1 题目理解分析</h3><p>  这题说的是字符串 t 只比 s 多了一个字符，其他字符他们的数量都是一样的，如果我们把字符串 s 和 t 合并就会发现，除了那个多出的字符出现奇数次，其他的所有字符都是出现偶数次，这种情况我们就可以用<font color="red">异或运算</font>来解决啦。</p>
<ul>
<li><p>异或运算的三点规律：</p>
<p>  1.<font color="red">a^a=0</font>：任何数字和自己异或都是0</p>
<p>  2.<font color="red">a^0=a</font>：任何数字和0异或还是自己</p>
<p>  3.<font color="red">a^b^a=a^a^b</font>：异或运算具有交换律</p>
</li>
<li><p>用题目示例一举例</p>
<p>  s = “abcd”，t = “abcde”，合并之后为 “abcdabcde” ，每一位都进行异或运算为 a^b^c^d^a^b^c^d^e ，再利用上述规律3 可以交换为 a^a^b^b^c^c^d^d^e ，再用规律1可以得到 0^0^0^0^e ，最后由规律2得到最后结果为 e。</p>
</li>
</ul>
<h3 id="3-2-详细代码（Java）"><a href="#3-2-详细代码（Java）" class="headerlink" title="3.2 详细代码（Java）"></a>3.2 详细代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">findTheDifference</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 合并 s 和 t 并且转化为 char 数组</span>
    <span class="token keyword">char</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                            <span class="token comment">// 定义输出结果的字符</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> aChar <span class="token operator">:</span> chars<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result <span class="token operator">^=</span> aChar<span class="token punctuation">;</span>                        <span class="token comment">// 对每一个字符进行异或操作</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>                              <span class="token comment">// 返回保留结果的字符</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-3-算法执行结果"><a href="#3-3-算法执行结果" class="headerlink" title="3.3 算法执行结果"></a>3.3 算法执行结果</h3><center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gls34pyssvj30s40egta3.jpg" alt="异或方法执行结果" width="80%/"></center>

<p>  代码少就算了，性能还直接飙升100%，所以位运算还是得掌握啊！！！</p>
<h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a><font color="born">四、总结</font></h2><p>  感觉任何事情都是这样的，你拍脑门就能想到的事情，很多人也同样能轻松想到，并且肯定并不是很好的。方法稍微高级一点的，它掌握起来可能更费力一点，但带给你的结果肯定也是可观的。跟生活中的很多道理类似……</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>力扣</tag>
        <tag>简单</tag>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣435-无重叠区间</title>
    <url>/2020/12/31/li-kou-435-wu-chong-die-qu-jian/</url>
    <content><![CDATA[<h1 id="力扣435-无重叠区间"><a href="#力扣435-无重叠区间" class="headerlink" title="力扣435-无重叠区间"></a><center>力扣435-无重叠区间</center></h1><h2 id="一、原题题目"><a href="#一、原题题目" class="headerlink" title="一、原题题目"></a><font color="#A22015">一、原题题目</font></h2><h3 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h3><p>  给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。</p>
<p><strong>注意:</strong></p>
<ol>
<li> 可以认为区间的终点总是大于它的起点。</li>
<li> 区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。</li>
</ol>
<h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><ul>
<li><p><strong>示例1：</strong></p>
<p>  <strong>输入：</strong> <code>[ [1,2], [2,3], [3,4], [1,3] ]</code><br><strong>输出：</strong> <code>1</code> <br><strong>解释：</strong> 移除 <code>[1,3]</code> 后，剩下的区间没有重叠。</p>
</li>
<li><p><strong>示例2：</strong></p>
<p>  <strong>输入：</strong> <code>[ [1,2], [1,2], [1,2] ]</code><br><strong>输出：</strong> <code>2</code> <br><strong>解释：</strong> 你需要移除两个 <code>[1,2]</code> 来使剩下的区间没有重叠。</p>
</li>
<li><p><strong>示例3：</strong></p>
<p>  <strong>输入：</strong> <code>[ [1,2], [2,3] ]</code><br><strong>输出：</strong> <code>0</code> <br><strong>解释：</strong> 你不需要移除任何区间，因为它们已经是无重叠的了。</p>
</li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/non-overlapping-intervals/">https://leetcode-cn.com/problems/non-overlapping-intervals/</a></p>
<h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a><font color="#A22015">二、解题思路</font></h2><h3 id="2-1-利用【贪心-右边界排序】解题"><a href="#2-1-利用【贪心-右边界排序】解题" class="headerlink" title="2.1 利用【贪心+右边界排序】解题"></a>2.1 利用【贪心+右边界排序】解题</h3><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  看了这个题想了很久，总觉得是之前做过，但是就是没想到具体的方法，之后在题解中才回忆到这是一道<font color="red">区间调度问题</font>，例如今天有很多事情安排要做，每件事情有起始时间点和结束时间点，怎么选择安排时间做事才能使处理的事情数最多。</p>
<p>  这里我们对每个区间的右边界进行从小到大排序，然后依次选择结束时间早并且没有区间重合的区间，有重合的就是我们需要剔除的区间。至于这样下来，为什么就是剔除的最少的？我们可以这么理解，剔除的最少也就是我们要保留的最多，为了使后面能选择的更多我们需要后面留下的空间更大，所以我们每次挑区间右边界最小的区间更合理，这里就是贪心的思路了，每次选右边界最小的就是局部最优，让后面的空间更大。这样处理完得到的结果就是全局最优。这里借用题解里一位大佬的动图演示过程。</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm73t1ry65g30zk0k0ani.gif" alt="贪心解题图解" style="zoom:100%;"></center>

<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">eraseOverlapIntervals</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intervals<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>intervals<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment">// 如果数组没有元素，返回0</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>intervals<span class="token punctuation">,</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">-&gt;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 对数组元素按第二个值(右边界)进行升序排序</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                              <span class="token comment">// 统计重叠区间的个数,初始化为0</span>
    <span class="token keyword">int</span> x_end <span class="token operator">=</span> intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">// 记录现在的结束边界</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>intervals<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 从第二个元素开始遍历每一个元素</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>x_end<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment">// 当前元素的左边界小于记录的结束边界则表示重合</span>
            count<span class="token operator">++</span><span class="token punctuation">;</span>                            <span class="token comment">// 统计重合区间个数+1</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> x_end <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment">// 当前元素的左边界不小于记录的右边界则表示不重合，更新记录的结束边界</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm74avtqmwj30s40eewfw.jpg" alt="哈希表映射执行结果" width="100%/"></center>

<h3 id="2-2-利用【贪心-左边界排序】解题"><a href="#2-2-利用【贪心-左边界排序】解题" class="headerlink" title="2.2 利用【贪心+左边界排序】解题"></a>2.2 利用【贪心+左边界排序】解题</h3><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  在题解里还看到这样的一个思路，是对每个元素的第一个值（左边界）进行排序，碰到有重叠的区间我们选择第二个值（右边界）更小的区间保留，这里其实跟上面的思路一样，为了让后面的空间更大更能选出更多的区间，达到全局最优。代码也比较容易但性能比上一个好，这里不太明白为什么？</p>
<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">eraseOverlapIntervals</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intervals<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>intervals<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token comment">// 如果数组没有元素，返回0</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>intervals<span class="token punctuation">,</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">-&gt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 对数组元素按第一个值(左边界)进行升序排序</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                  <span class="token comment">// 统计重叠区间的个数,初始化为0</span>
    <span class="token keyword">int</span> end <span class="token operator">=</span> intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                      <span class="token comment">// 记录现在的结束边界</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>intervals<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment">// 从第二个元素开始遍历每一个元素</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>end<span class="token punctuation">)</span><span class="token punctuation">{</span>                   <span class="token comment">// 当前元素左边界小于记录的结束边界则表示有重合</span>
            count<span class="token operator">++</span><span class="token punctuation">;</span>                                <span class="token comment">// 统计重合区间个数+1</span>
            end <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 更新记录的结束边界为重叠区间中右边界更小的值</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> end <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                 <span class="token comment">// 当前元素左边界不小于记录的右边界则表示没有重合，更新结束边界</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm759fcn4hj30s00egq4b.jpg" alt="数组映射执行结果" width="100%/"></center>

<p>  在大家的思路中还看到双指针的方法，其实就是对左右边界同时排序，先左边界排序，左边界相同的时候按右边界排序，再来选择。跟上面的思路差别不大。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>中等</tag>
        <tag>力扣</tag>
        <tag>排序</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣455-分发饼干</title>
    <url>/2020/12/25/li-kou-455-fen-fa-bing-gan/</url>
    <content><![CDATA[<h1 id="力扣455-分发饼干"><a href="#力扣455-分发饼干" class="headerlink" title="力扣455-分发饼干"></a><center>力扣455-分发饼干</center></h1><h2 id="一、原题题目"><a href="#一、原题题目" class="headerlink" title="一、原题题目"></a><font color="#A22015">一、原题题目</font></h2><h3 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h3><p>  假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p>
<p>  对每个孩子 <code>i</code>，都有一个胃口值 <code>g[i]</code>，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 <code>j</code>，都有一个尺寸 <code>s[j]</code> 。如果 <code>s[j] &gt;= g[i]</code>，我们可以将这个饼干 <code>j</code> 分配给孩子 <code>i</code> ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p>
<h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><ul>
<li><p><strong>示例1：</strong></p>
<p>  <strong>输入：</strong>  g = [1,2,3], s = [1,1]<br><strong>输出：</strong> 1<br><strong>解释：</strong> 你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。<br>虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。<br>所以你应该输出1。</p>
</li>
<li><p><strong>示例2：</strong></p>
<p>  <strong>输入：</strong> g = [1,2], s = [1,2,3]<br><strong>输出：</strong> 2<br><strong>解释：</strong> 你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。<br>你拥有的饼干数量和尺寸都足以让所有孩子满足。<br>所以你应该输出2.</p>
</li>
</ul>
<p><strong>提示：</strong></p>
<ul>
<li>  <code>1 &lt;= g.length &lt;= 3 * 10^4</code></li>
<li>  <code>0 &lt;= s.length &lt;= 3 * 10^4</code></li>
<li>  <code>1 &lt;= g[i], s[j] &lt;= 2^31 - 1</code></li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/assign-cookies">https://leetcode-cn.com/problems/assign-cookies</a></p>
<h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a><font color="#A22015">二、解题思路</font></h2><h3 id="2-1-贪心思路解题"><a href="#2-1-贪心思路解题" class="headerlink" title="2.1 贪心思路解题"></a>2.1 贪心思路解题</h3><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  读完题目马上能感觉的到这是一道贪心可以解决的题目。对每个孩子，每次尽可能的分跟他口味值尽量差不多的饼干尺寸值（局部最优），这样就可能尽可能多的满足孩子（全局最优）。为了给孩子分配与他口味值最接近的饼干，我们对两个数组进行排序，从小口味值和小饼干尺寸依次往后考虑，直到饼干或孩子考虑完了。</p>
<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findContentChildren</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> g<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 对 g 数组排序</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 对 s 数组排序</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment">// 统计孩子满足的个数</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment">// 记录分到第几块饼干了</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 遍历每个孩子</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token keyword">return</span> count<span class="token punctuation">;</span>   <span class="token comment">// 如果饼干已经考虑完了则返回结果</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> k<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 从第k块饼干开始考虑</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// 当前饼干能满足当前孩子</span>
                    count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment">// 饼干分给这个孩子</span>
                    k <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token comment">// 开始分下一块饼干</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token comment">// 挑出饼干层，为下一个孩子分饼干</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> count<span class="token punctuation">;</span>       <span class="token comment">// 孩子遍历完了，返回结果</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glzh2ir7k8j30s00egta4.jpg" alt="算法执行结果" width="100%/"></center>

<p>  思路相同，处理 Java 基础造成的代码简洁性~如下网友的代码更加简洁，能提升空间复杂度。</p>
<ul>
<li>  <strong>优化代码</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findContentChildren</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> g<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 对 g 数组排序</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 对 s 数组排序</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment">// 记录孩子的索引</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment">// 记录饼干的索引</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 还有孩子和饼干没考虑完</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">// 当前饼干能满足当前孩子，分给这个孩子</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment">// 讨论下一个孩子</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token comment">// 当前饼干不能满足当前孩子，讨论下一块饼干</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> i<span class="token punctuation">;</span>               <span class="token comment">// 循环结束，返回分到饼干的孩子数</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>优化执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glzhs11tyej30s20eign0.jpg" alt="优化代码执行结果" width="100%/"></center>

<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a><font color="#A22015">三、总结</font></h2><p>  这道题算是贪心入门题啦，很简单，得很快的做出来才行。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>力扣</tag>
        <tag>简单</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣48-旋转图像</title>
    <url>/2020/12/19/li-kou-48-xuan-zhuan-tu-xiang/</url>
    <content><![CDATA[<h1 id="力扣48-旋转图像"><a href="#力扣48-旋转图像" class="headerlink" title="力扣48-旋转图像"></a><center>力扣48-旋转图像</center></h1><h2 id="一、原题题目"><a href="#一、原题题目" class="headerlink" title="一、原题题目"></a><font color="born">一、原题题目</font></h2><h3 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h3><p>  给定一个 <em>n</em> × <em>n</em> 的二维矩阵表示一个图像。将图像顺时针旋转 90 度。</p>
<p>说明：</p>
<p>  你必须在<strong>原地</strong>旋转图像，这意味着你需要直接修改输入的二维矩阵。<strong>请不要</strong>使用另一个矩阵来旋转图像。</p>
<h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><ul>
<li><p><strong>示例1：</strong></p>
  <pre class="line-numbers language-none"><code class="language-none">给定 matrix = 
[
  [1,2,3],
  [4,5,6],
  [7,8,9]
],
原地旋转输入矩阵，使其变为:
[
  [7,4,1],
  [8,5,2],
  [9,6,3]
]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>示例2：</strong></p>
  <pre class="line-numbers language-none"><code class="language-none">给定 matrix =
[
  [ 5, 1, 9,11],
  [ 2, 4, 8,10],
  [13, 3, 6, 7],
  [15,14,12,16]
],
原地旋转输入矩阵，使其变为:
[
  [15,13, 2, 5],
  [14, 3, 4, 1],
  [12, 6, 8, 9],
  [16, 7,10,11]
]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/rotate-image">https://leetcode-cn.com/problems/rotate-image</a></p>
<h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a><font color="born">二、解题思路</font></h2><h3 id="2-1-题目意思理解"><a href="#2-1-题目意思理解" class="headerlink" title="2.1 题目意思理解"></a>2.1 题目意思理解</h3><p>  这个题因为以前见过知道怎么做所以很快就回忆起了正常的思路是对矩阵进行两次翻转就能达到顺时针旋转90°的目的：①水平翻转，②沿次对角线翻转。下面以一个简单的数组演示主次对角线的区别，其实谁先谁后也会有所影响的。自己可以动手画画探究探究。</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glxlcx2hzsj30o60aiwg8.jpg" alt="不同翻转顺序" width="80%/"></center>

<h3 id="2-2-详细代码（Java）"><a href="#2-2-详细代码（Java）" class="headerlink" title="2.2 详细代码（Java）"></a>2.2 详细代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> r <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>r<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 实现水平翻转</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        matrix<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        matrix<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">// 实现沿次对角线的翻转</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        matrix<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>代码<font color="red">第14行</font>要找好翻转每个位置对应的坐标变换是怎么变的。当（row1,col1）、（row2,col2）这两个位置关于次对角线对称的时候，我发现是<font color="red">row1 + col2 = 行数-1</font>；<font color="red">col1 + row2 = 行数-1</font>；可以简单理解为<font color="red">新的行标</font>font和<font color="red">旧的列标</font> “互余”，<font color="red">新的列标</font>与<font color="red">旧的行标</font> “互余”</li>
</ul>
<h3 id="2-3-算法执行结果"><a href="#2-3-算法执行结果" class="headerlink" title="2.3 算法执行结果"></a>2.3 算法执行结果</h3><center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gltm0e1416j30ry0ee3zw.jpg" alt="算法执行结果" width="80%/"></center>

<h2 id="三、总结分析"><a href="#三、总结分析" class="headerlink" title="三、总结分析"></a><font color="born">三、总结分析</font></h2><p>  这道题像是一道技巧题，有些题目如果有特定的技巧，特定的规律，往往都会比正常解放快很多。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>中等</tag>
        <tag>力扣</tag>
        <tag>数组</tag>
        <tag>技巧题</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣49-字母异位分组</title>
    <url>/2020/12/21/li-kou-49-zi-mu-yi-wei-fen-zu/</url>
    <content><![CDATA[<h1 id="力扣49-字母异位分组"><a href="#力扣49-字母异位分组" class="headerlink" title="力扣49-字母异位分组"></a><center>力扣49-字母异位分组</center></h1><h2 id="一、原题题目"><a href="#一、原题题目" class="headerlink" title="一、原题题目"></a><font color="born">一、原题题目</font></h2><h3 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h3><p>  给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。</p>
<h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><ul>
<li><p><strong>示例1：</strong></p>
<p>  <strong>输入：</strong> [“eat”, “tea”, “tan”, “ate”, “nat”, “bat”]</p>
<p>  <strong>输出：</strong></p>
  <pre class="line-numbers language-none"><code class="language-none">[
  ["ate","eat","tea"],
  ["nat","tan"],
  ["bat"]
]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<p><strong>说明：</strong></p>
<ul>
<li><p>  所有输入均为小写字母。</p>
</li>
<li><p>  不考虑答案输出的顺序。</p>
</li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/group-anagrams/">https://leetcode-cn.com/problems/group-anagrams/</a></p>
<h2 id="二、解题思路一"><a href="#二、解题思路一" class="headerlink" title="二、解题思路一"></a><font color="born">二、解题思路一</font></h2><h3 id="2-1-题目意思理解"><a href="#2-1-题目意思理解" class="headerlink" title="2.1 题目意思理解"></a>2.1 题目意思理解</h3><p>  这道题题目意思比较简单，即单词的字母组成上相同的但排列顺序不同的分为一个组，遍历每一个单词和保存结果lists中的每一个组中单词是不是异位的，是则加入改组，不是则判断下一组，直到遍历完存在的所有组，则创建一个新组加入。</p>
<h3 id="2-2-详细代码（Java）"><a href="#2-2-详细代码（Java）" class="headerlink" title="2.2 详细代码（Java）"></a>2.2 详细代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">groupAnagrams</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> lists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 定义保存结果的 lists</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token comment">// 遍历每一个单词</span>
            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                           <span class="token comment">// 记录是否有加入已经存在的组</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">:</span> lists<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment">// 遍历lists中的每一个组</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSameWords</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>   <span class="token comment">// 判断当前组的第一个单词和遍历的单词是否异位</span>
                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">// 是异位则加入该组</span>
                    flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                            <span class="token comment">// 状态改为已加入组的状态</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                               <span class="token comment">// 跳过后面的组</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 没有加入组，说明没有与任何已经存在的组异位，自己独自建组加入lists</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                lists<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> lists<span class="token punctuation">;</span>           <span class="token comment">// 最终返回lists</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSameWords</span><span class="token punctuation">(</span><span class="token class-name">String</span> word1<span class="token punctuation">,</span><span class="token class-name">String</span> word2<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">// 判断两个单词是否异位</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>word1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span> word2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars1 <span class="token operator">=</span> word1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars2 <span class="token operator">=</span> word2<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>chars1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>chars2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>chars1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>chars2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-3-算法执行结果"><a href="#2-3-算法执行结果" class="headerlink" title="2.3 算法执行结果"></a>2.3 算法执行结果</h3><center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glve3zxthnj30s60ei75o.jpg" alt="算法执行结果" width="80%/"></center>

<p>  结果比较惨，但还好也是自己很快就相处来的方法，接着再思考思考提升下性能。</p>
<h2 id="三、解题思路二（哈希表）"><a href="#三、解题思路二（哈希表）" class="headerlink" title="三、解题思路二（哈希表）"></a><font color="born">三、解题思路二（哈希表）</font></h2><h3 id="3-1-题目意思理解"><a href="#3-1-题目意思理解" class="headerlink" title="3.1 题目意思理解"></a>3.1 题目意思理解</h3><p>  大概意思跟上一种思路一致，用哈希表来存储结果，每一个单词先转换成字符数组，然后排序，再把排序后的字符数组转换成字符串作为同类异位单词的 key ，组作为 value。例如示例：[“eat”, “tea”, “tan”, “ate”, “nat”, “bat”]，对于 “eat” 和 “tea” 单词他们转化求 key 都是 “aet” ，即属于同一个组。</p>
<h3 id="3-2-详细代码（Java）"><a href="#3-2-详细代码（Java）" class="headerlink" title="3.2 详细代码（Java）"></a>3.2 详细代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">groupAnagrams</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 定义哈希表存储分组结果</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span>strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment">// 遍历每一个单词</span>
            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 单词转换成字符数组</span>
            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">// 对单词字符数组排序</span>
            <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 得到单词对应的 key </span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>hashMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment">// 如果这个 key 在哈希表中存在 </span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 取出 key 对应的组 </span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">// 将该单词加入到这个组 </span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>                                          <span class="token comment">// 如果这个 key 在哈希表中不存在 </span>
                <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 要新创建一个组</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">// 新创建的组中加入该单词</span>
                hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">// 新创建的组加入哈希表中</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hashMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 哈希表值的部分转换成需要输出的格式</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-3-算法执行结果"><a href="#3-3-算法执行结果" class="headerlink" title="3.3 算法执行结果"></a>3.3 算法执行结果</h3><center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glvftwputnj30ry0ec0u4.jpg" alt="改进算法执行结果" width="80%/"></center>

<p>  这个结果还行，两种方法思路上差别还是存在很大差距的，哈希表的运用大幅度提升了性能。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>中等</tag>
        <tag>力扣</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣62-不同路径</title>
    <url>/2020/12/25/li-kou-62-bu-tong-lu-jing/</url>
    <content><![CDATA[<h1 id="力扣62-不同路径"><a href="#力扣62-不同路径" class="headerlink" title="力扣62-不同路径"></a><center>力扣62-不同路径</center></h1><h2 id="一、原题题目"><a href="#一、原题题目" class="headerlink" title="一、原题题目"></a><font color="#A22015">一、原题题目</font></h2><h3 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h3><p>  一个机器人位于一个 <code>m x n</code> 网格的左上角 （起始点在下图中标记为 <code>Start</code> ）。机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 <code>Finish</code> ）。问总共有多少条不同的路径？</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm0d3g60e6j30b4053q32.jpg" alt="题目示图" width="100%/"></center>

<h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><ul>
<li><p><strong>示例1：</strong></p>
<p>  <strong>输入：</strong>  <code>m = 3, n = 7</code><br><strong>输出：</strong> <code>28</code></p>
</li>
<li><p><strong>示例2：</strong></p>
<p>  <strong>输入：</strong> <code>m = 3, n = 2</code><br><strong>输出：</strong> <code>3</code><br><strong>解释：</strong> 从左上角开始，总共有 3 条路径可以到达右下角。<br>1.向右 -&gt; 向右 -&gt; 向下<br>2.向右 -&gt; 向下 -&gt; 向右<br>3.向下 -&gt; 向右 -&gt; 向右</p>
</li>
<li><p><strong>示例3：</strong></p>
<p>  <strong>输入：</strong> <code>m = 7, n = 3</code><br><strong>输出：</strong> <code>28</code></p>
</li>
<li><p><strong>示例4：</strong></p>
<p>  <strong>输入：</strong> <code>m = 3, n = 3</code><br><strong>输出：</strong> <code>6</code></p>
</li>
</ul>
<p><strong>提示：</strong></p>
<ul>
<li>  <code>1 &lt;= m, n &lt;=100</code></li>
<li>  题目数据保证答案小于等于 <code>2 * 10^9</code></li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a href="">https://leetcode-cn.com/problems/unique-paths</a></p>
<h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a><font color="#A22015">二、解题思路</font></h2><h3 id="2-1-递归思路解题"><a href="#2-1-递归思路解题" class="headerlink" title="2.1 递归思路解题"></a>2.1 递归思路解题</h3><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  读完题目思考片刻，确定这是一道<font color="red">递归</font>的题。定义状态 <code>count(m,n)</code> 表示当矩形是 <code>m x n</code>网格时从左上到右下的路径数，由于每次只可以往下走和往右走，故 <code>count(m,n) = count(m,n-1) + count(m-1,n)</code> 此时的行数和列数都要大于 <code>1</code> ，当 <code>m == 1</code> 或 <code>n == 1</code> 时 <code>count(m,n) = 1</code> 是我们的递归出口。</p>
<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">1</span><span class="token operator">||</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>			<span class="token comment">// 递归出口</span>
        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">uniquePaths</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 递归</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm0dnnbvopj30s808ojrr.jpg" alt="递归执行结果" width="100%/"></center>

<p>  代码执行结果超出时间限制，因为计算 <code>uniquePaths(m,n)</code> 时会先去计算 <code>uniquePaths(m-1,n)</code> 和 <code>uniquePaths(m,n-1)</code>，之后由会一层一层往下去计算，知道碰到递归出口才有结果，并再将结果一层一层的往回传，故时间消耗很大。这也是<font color="red">自顶向下</font>的递归解题</p>
<h3 id="2-1-动态规划思路解题"><a href="#2-1-动态规划思路解题" class="headerlink" title="2.1 动态规划思路解题"></a>2.1 动态规划思路解题</h3><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  由于上面的递归时间消耗太大，我们就改变策略<font color="red">自底向上</font>的计算结果，并将结果保留在如下二维数组 <code>result</code> 中，当所处的位置和终点位于同一行或同一列时，就只能直接沿直线走到终点，所以这些位置都是 <code>1</code> 种路径，如图的绿色位置，由于每次走都只能往下或右走，故<font color="red">当前位置的路径数</font>取决于<font color="red">下面位置与右边位置的路径之和</font>，即 <code>result[i][j] = result[i+1][j] + result[i][j+1]</code> 并且我们的填表顺序也有要求，必须是当前位置下方和右方的都已经填好，才能填当前位置。我们可以按照下图中细箭头的方向向上填表，同时沿着粗箭头向左填表，填完表后返回 <code>result[0][0]</code> 即为最终结果。 </p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm0elputkpj30my0bitat.jpg" alt="动态规划图解" width="100%/"></center>

<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                 <span class="token comment">// 定义结果表</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> result<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">// 初始化最后一行为1</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">// 初始化最后一列为1</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment">// 列从右往左填</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment">// 行从下往上填</span>
                result<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>result<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// 当前位置等于下面和右边之和</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 返回起点结果</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm0f0v5qb3j30ry0ee0u4.jpg" alt="动态规划执行结果" width="100%/"></center>

<p>  时间上完胜，空间效果也不错，做完后也去看看了题解，一方面看看自己思考的结论对不对（主要看上面的方法是不是递归和动态规划，其实有的时候还傻傻的分不太清）另一方面就是看看有没有改进的地方，看到空间上还有提升的空间，主要是我们刚刚定义的结果二维数组并不是都有用的在计算结果的时候只需要保留部分就好，这里我实在是懒得再去优化了，不是很难，想尝试的朋友可以写写看。</p>
<h3 id="2-3-数学公式思路解题"><a href="#2-3-数学公式思路解题" class="headerlink" title="2.3 数学公式思路解题"></a>2.3 数学公式思路解题</h3><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  其次看到还有一种解题思路是通过数学公式的方法，这里也只简单介绍一下：我们要想到达终点，需要往下走n-1步，往右走 <code>m-1</code>步，总共需要走 <code>n+m-2</code> 步。他无论往右走还是往下走他的总的步数是不会变的。也就相当于总共要走 <code>n+m-2</code>步，往右走 <code>m-1</code> 步总共有多少种走法，很明显这就是一个排列组合问题，公式如下</p>
<p><left><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm0fd3eml8j30d406lweo.jpg" alt="动态规划执行结果" width="40%/">  <img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm0fdp9gccj30k705wt92.jpg" alt="动态规划执行结果" width="60%/"></left></p>
<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> n <span class="token operator">+</span> m <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">-</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">/</span> i<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm0fjia88sj30s00ei75o.jpg" alt="数学技巧执行结果" width="100%/"></center>

<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a><font color="#A22015">三、总结</font></h2><p>  这里推荐着重理解动态规划和递归的解题思路，虽然这个题的递归超时了，但很多题目里递归也是一种很好的解题思路。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>中等</tag>
        <tag>力扣</tag>
        <tag>动态规划</tag>
        <tag>技巧题</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣649-Dota2参议院</title>
    <url>/2020/12/11/li-kou-649-dota2-can-yi-yuan/</url>
    <content><![CDATA[<h1 id="力扣649-Dota2-参议院"><a href="#力扣649-Dota2-参议院" class="headerlink" title="力扣649-Dota2 参议院"></a><center>力扣649-Dota2 参议院</center></h1><h2 id="一、原题题目"><a href="#一、原题题目" class="headerlink" title="一、原题题目"></a><font color="born">一、原题题目</font></h2><h3 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h3><p>​        Dota2 的世界里有两个阵营：Radiant (天辉)和 Dire(夜魇)。Dota2 参议院由来自两派的参议员组成。现在参议院希望对一个 Dota2 游戏里的改变作出决定。他们以一个基于轮为过程的投票进行。在每一轮中，每一位参议员都可以行使两项权利中的一项：</p>
<ol>
<li><p>禁止一名参议员的权利：参议员可以让另一位参议员在这一轮和随后的几轮中丧失<strong>所有的权利</strong>。</p>
</li>
<li><p>宣布胜利：如果参议员发现有权利投票的参议员都是<strong>同一个阵营的</strong>，他可以宣布胜利并决定在游戏中的有关变化。</p>
</li>
</ol>
<p>​       给定一个字符串代表每个参议员的阵营。字母 “R” 和 “D” 分别代表了 Radiant（天辉）和 Dire（夜魇）。然后，如果有 n 个参议员，给定字符串的大小将是 n。以轮为基础的过程从给定顺序的第一个参议员开始到最后一个参议员结束。这一过程将持续到投票结束。所有失去权利的参议员将在过程中被跳过。假设每一位参议员都足够聪明，会为自己的政党做出最好的策略，你需要预测哪一方最终会宣布胜利并在 Dota2 游戏中决定改变。输出应该是 Radiant 或 Dire。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/dota2-senate">https://leetcode-cn.com/problems/dota2-senate</a></p>
<h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><ul>
<li><p><strong>示例1：</strong></p>
<p><strong>输入：</strong>“RD”<br><strong>输出：</strong>“Radiant”<br><strong>解释：</strong>第一个参议员来自 Radiant 阵营并且他可以使用第一项权利让第二个参议员失去权力，因此第二个参议员将被跳过因为他没有任何权利。然后在第二轮的时候，第一个参议员可以宣布胜利，因为他是唯一一个有投票权的人。</p>
</li>
<li><p><strong>示例2：</strong></p>
<p><strong>输入：</strong>“RDD”<br><strong>输出：</strong>“Dire”<br><strong>解释：</strong><br>第一轮中,第一个来自 Radiant 阵营的参议员可以使用第一项权利禁止第二个参议员的权利，第二个来自 Dire 阵营的参议员会被跳过因为他的权利被禁止，第三个来自 Dire 阵营的参议员可以使用他的第一项权利禁止第一个参议员的权利，因此在第二轮只剩下第三个参议员拥有投票的权利,于是他可以宣布胜利。</p>
</li>
<li><p><strong>提示：</strong></p>
<p>给定字符串的长度在 <code>[1, 10,000]</code> 之间.</p>
</li>
</ul>
<h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a><font color="born">二、解题思路</font></h2><h3 id="2-1-题目意思理解"><a href="#2-1-题目意思理解" class="headerlink" title="2.1 题目意思理解"></a>2.1 题目意思理解</h3><p>​    如果读明白了题目的意思，应该可以理解当前参议员要么是被前面的另一队参议员禁止了，否则就应该去禁止后面最靠近它的另一队参议员。</p>
<p>​    可以理解为带攻击属性的一种游戏。先定义下我们的游戏。</p>
<ul>
<li><p>游戏有两个队，D队和R队，目标是杀光其他队的所有人，即可获得胜利✌️。战士是一个一个到达战场的。</p>
</li>
<li><p>Dnumber 和 Rnumber 分别表示两个队的总人数，可以通过一次遍历输入数据获得。</p>
</li>
<li><p>Dattack 和 Rattack 分别表示两个队当前的攻击力属性，为几就表示可以杀死对方几个人。</p>
</li>
<li><p>Ddie 和 Rdie 分别表示两个队当前死了多少英雄战士，当死亡人数等于总人数时，对方获胜。</p>
<p>第一次遍历输入数据</p>
</li>
<li><p>需要统计每个对的总人数并进行一轮厮杀。被杀死的战士将其原大写字母改为小写字母记入史册，永垂不朽。</p>
<p>后几轮遍历就是完全厮杀</p>
</li>
<li><p>直到出现哪个对死亡人数达到总队伍人数，对方队获胜。</p>
</li>
</ul>
<h2 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a><font color="born">三、代码实现</font></h2><h3 id="3-1-详细代码（Java）"><a href="#3-1-详细代码（Java）" class="headerlink" title="3.1 详细代码（Java）"></a>3.1 详细代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">predictPartyVictory</span><span class="token punctuation">(</span><span class="token class-name">String</span> senate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token class-name">Rnumber</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Dnumber</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>			<span class="token comment">// 记录每个队的总人数</span>
    <span class="token keyword">int</span> <span class="token class-name">Rattack</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Dattack</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>			<span class="token comment">// 记录每个队的攻击值</span>
    <span class="token keyword">int</span> <span class="token class-name">Rdie</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Ddie</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>					<span class="token comment">// 记录每个对的死亡战士</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> senate<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 将字符串转换成字符数组方便遍历处理</span>
    <span class="token comment">// 第一轮统计总人数并厮杀一轮</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'D'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>		<span class="token comment">// 来的是D队战士</span>
        <span class="token class-name">Dnumber</span><span class="token operator">++</span><span class="token punctuation">;</span>				<span class="token comment">// D队人数加1</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Rattack</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>		<span class="token comment">// 如果R队攻击值大于0</span>
          chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'d'</span><span class="token punctuation">;</span>  	<span class="token comment">// 则刚刚上来的D队战士成炮灰</span>
          <span class="token class-name">Rattack</span><span class="token operator">--</span><span class="token punctuation">;</span>		<span class="token comment">// 同时消耗R队一个攻击值</span>
          <span class="token class-name">Ddie</span><span class="token operator">++</span><span class="token punctuation">;</span>				<span class="token comment">// D队死亡人数加1</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token class-name">Dattack</span><span class="token operator">++</span><span class="token punctuation">;</span>		<span class="token comment">// 如果R队攻击值为0，则D队攻击值积累加1</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>					<span class="token comment">// 来的是R队战士</span>
        <span class="token class-name">Rnumber</span><span class="token operator">++</span><span class="token punctuation">;</span>				<span class="token comment">// R队人数加1</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Dattack</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>		<span class="token comment">// 如果D队攻击值大于0</span>
          chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'r'</span><span class="token punctuation">;</span>		<span class="token comment">// 则刚刚上来的R队战士成炮灰</span>
          <span class="token class-name">Dattack</span><span class="token operator">--</span><span class="token punctuation">;</span>		<span class="token comment">// 同时消耗D队一个攻击值</span>
          <span class="token class-name">Rdie</span><span class="token operator">++</span><span class="token punctuation">;</span>				<span class="token comment">// R队死亡人数加1</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token class-name">Rattack</span><span class="token operator">++</span><span class="token punctuation">;</span>	    <span class="token comment">// 如果D队攻击值为0，则R队攻击值积累加1</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 后几轮厮杀</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>		<span class="token comment">// 这个 if 判断达到轮战的目的</span>
        i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 战士战死，直接跳过，先判断这个可以提高性能</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'d'</span><span class="token operator">||</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'r'</span><span class="token punctuation">)</span>	<span class="token keyword">continue</span><span class="token punctuation">;</span>		
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Rdie</span><span class="token operator">==</span><span class="token class-name">Rnumber</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token string">"Dire"</span><span class="token punctuation">;</span>			<span class="token comment">// R队被歼灭，D队获胜</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Ddie</span><span class="token operator">==</span><span class="token class-name">Dnumber</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token string">"Radiant"</span><span class="token punctuation">;</span>		<span class="token comment">// D队被歼灭，R队获胜</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'D'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>	        <span class="token comment">// 来的是D队战士，不加总人数其他同上处理</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Rattack</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token class-name">Rattack</span><span class="token operator">--</span><span class="token punctuation">;</span>
          chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'d'</span><span class="token punctuation">;</span>
          <span class="token class-name">Ddie</span><span class="token operator">++</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Ddie</span> <span class="token operator">==</span> <span class="token class-name">Dnumber</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"Radiant"</span><span class="token punctuation">;</span>	<span class="token comment">// 判断是否结束</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token class-name">Dattack</span><span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>						<span class="token comment">// 来的是R队战士，不加总人数其他同上处理</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Dattack</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token class-name">Dattack</span><span class="token operator">--</span><span class="token punctuation">;</span>
          chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'r'</span><span class="token punctuation">;</span>
          <span class="token class-name">Rdie</span><span class="token operator">++</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Rdie</span> <span class="token operator">==</span> <span class="token class-name">Rnumber</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"Dire"</span><span class="token punctuation">;</span>	<span class="token comment">// 判断是否结束</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token class-name">Rattack</span><span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>	<span class="token comment">// 因为上面的return语句都在if语句后，所以加上这个不会被执行的return语句</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-2-算法执行结果"><a href="#3-2-算法执行结果" class="headerlink" title="3.2 算法执行结果"></a>3.2 算法执行结果</h3><center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glk8jfyf4bj30s40ee75b.jpg" alt="算法执行结果" width="80%/"></center>

<h2 id="四、总结分析"><a href="#四、总结分析" class="headerlink" title="四、总结分析"></a><font color="born">四、总结分析</font></h2><p>​    个人感觉这个题目是题目意思有点让人费解，读懂题目意思后思路还是挺简单的。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>中等</tag>
        <tag>力扣</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣714-买卖股票的最佳时机含手续费</title>
    <url>/2020/12/17/li-kou-714-mai-mai-gu-piao-de-zui-jia-shi-ji-han-shou-xu-fei/</url>
    <content><![CDATA[<h1 id="力扣714-买卖股票的最佳时机含手续费"><a href="#力扣714-买卖股票的最佳时机含手续费" class="headerlink" title="力扣714-买卖股票的最佳时机含手续费"></a><center>力扣714-买卖股票的最佳时机含手续费</center></h1><h2 id="一、原题题目"><a href="#一、原题题目" class="headerlink" title="一、原题题目"></a><font color="born">一、原题题目</font></h2><h3 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h3><p>​    给定一个整数数组 prices，其中第 i 个元素代表了第 i 天的股票价格 ；非负整数 fee 代表了交易股票的手续费用。你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。返回获得利润的最大值。</p>
<p>​    注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。</p>
<h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><ul>
<li><p><strong>示例一</strong></p>
<p>  <strong>输入：</strong> prices = [1, 3, 2, 8, 4, 9], fee = 2</p>
<p>  <strong>输出：</strong> 8</p>
<p>  <strong>解释：</strong> 能够达到的最大利润:</p>
<p>  在此处买入 prices[0] = 1<br>  在此处卖出 prices[3] = 8<br>  在此处买入 prices[4] = 4<br>  在此处卖出 prices[5] = 9<br>  总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8.</p>
</li>
<li><p><strong>注意：</strong></p>
<ul>
<li>  <code>0 &lt; prices.length &lt;= 50000</code>.</li>
<li>  <code>0 &lt; prices[i] &lt; 50000</code>.</li>
<li>  <code>0 &lt;= fee &lt; 50000</code>.</li>
</ul>
</li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee</a></p>
<h2 id="二、解题思路（动态规划）"><a href="#二、解题思路（动态规划）" class="headerlink" title="二、解题思路（动态规划）"></a><font color="born">二、解题思路（动态规划）</font></h2><h3 id="2-1-题目理解"><a href="#2-1-题目理解" class="headerlink" title="2.1 题目理解"></a>2.1 题目理解</h3><ul>
<li>  <strong>题前感慨（时间紧不用看，跳至【言归正传】部分）</strong></li>
</ul>
<p> 给定每日股票价格的数组，每天可以选择是否买入/卖出，持有时不能再次买入，每笔交易有固定的手续费，求可获得的最大利润。给定每日股票价格的数组，每天可以选择是否买入/卖出，持有时不能再次买入，每笔交易有固定的手续费，求可获得的最大利润。</p>
<p> 这是一道入门的动态规划题目……当说出这句话的时候表示说话者已经对动态规划有所掌握了，所以能很快的分析出它是一道动态规划题，并且很容易就能想到什么状态变量，转移方程的所以它是一道简单的动态规划题目。但对于很多算法新手来说，难的是识别它是个动态规划题。</p>
<p> 本文主要解决该算法题，下面会结合本题简单说到动态规划，动态规划的详细讲解自己也会全面的整理一份资料供自己总结复习，同时也分享出来给需要的网友参考~。</p>
<ul>
<li>  <strong>言归正传</strong></li>
</ul>
<p> <strong>【1.识别动态规划】</strong>动态规划所处理的问题是一个多阶段决策问题，一般由初始状态开始，通过对中间阶段决策的选择，达到结束状态，此问题当中我们的初试状态就是第0天开始，结束状态就是第n天结束。中间的买入/卖出就是中间决策的选择。</p>
<p> <strong>【2.确定状态定义状态变量】</strong>知道是动态规划题后就老老实实的确定状态和定义状态变量，如何正确合理的确定状态也至关重要，例如这里可以以每天交易结束后手里是否有股票为状态，两种状态：有股票，没有股票。我们的目的是求最后的最大利润的，所以定义状态变量可以这样定义：dp[i][0] 表示第 i 天交易结束后手里没有股票的最大利润。dp[i][1] 表示第 i 天交易结束后手里有股票的最大利润。</p>
<p> <strong>【3.推导状态转移方程】</strong>先考虑 dp[i][0] 的转移方程，第 i 天结束，手里没有股票，那么一定是今天没有买入。可能的状态有前一天可能是也没有股票状态 dp[i-1][0]，或前一天结束时手里有股票 dp[i-1][1]被我今天卖了。因此转移方程为：<br>$$<br>dp[i][0] = max{dp[i-1][0],dp[i-1][1]+prices[i]-fee}<br>$$<br> 在考虑 dp[i][1] 的转移方程，第 i 天结束后，手里有股票，那么一定是今天没有卖出。可能的状态有前一天本来就是有股票状态 dp[i-1][1]，或者前一天结束时没有股票dp[i-1][0]，但我今天买入了。因此转移方程为：<br>$$<br>dp[i][1] = max{dp[i-1][1],dp[i-1][0]-prices[i]}<br>$$<br> <strong>【4.确定边界】</strong>其实就是确定初始状态，第0天交易结束时有 dp[0][0] = 0，dp[0][1] = -prices[0]。</p>
<h3 id="2-2-详细代码（Java）"><a href="#2-2-详细代码（Java）" class="headerlink" title="2.2 详细代码（Java）"></a>2.2 详细代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">,</span> <span class="token keyword">int</span> fee<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">// 状态变量，存储每天有或没有股票的最大收益</span>
        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token comment">// 初始值，第0天没股票即没有买入，收益为0</span>
        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 初始值，第0天有股票即买入了，收益为-prices[0]</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 循环更新每天的状态</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> fee<span class="token punctuation">)</span><span class="token punctuation">;</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>prices<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>prices<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回最后一天两种状态的最大值</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-3-算法执行结果"><a href="#2-3-算法执行结果" class="headerlink" title="2.3 算法执行结果"></a>2.3 算法执行结果</h3><center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glqwb0qsl4j30s40eijst.jpg" alt="算法执行结果" width="80%/"></center>

<p> 算法性能不是很好，其他很多题友可能想出了更好的方法。这里重点总结该题对动态规划的运用，空间复杂度上可以稍微提升一下，因为在上述算法中定义了一个二维数组去求每一天的状态，是没有必要的，因为最后的输出只需要最后一天的。我们可以定义两个变量来存储就好了。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">,</span> <span class="token keyword">int</span> fee<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> nothave <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">// 初始值，第0天没股票即没有买入，收益为0</span>
        <span class="token keyword">int</span> have <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// 初始值，第0天有股票即买入了，收益为-prices[0]</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 循环更新状态值</span>
            <span class="token keyword">int</span> n <span class="token operator">=</span> nothave<span class="token punctuation">,</span>y <span class="token operator">=</span> have<span class="token punctuation">;</span>           <span class="token comment">// 下面的更新中都要用到之前的值，所以要临时存储一下</span>
            nothave <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>y <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> fee<span class="token punctuation">)</span><span class="token punctuation">;</span>
            have <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>n <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nothave<span class="token punctuation">,</span>have<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 返回两种状态的最大值</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glqwvrsntgj30ry0eeq4c.jpg" alt="改进算法执行结果" width="80%/"></center>

<p> 出乎意的是性能得到了很大的提升…….</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>中等</tag>
        <tag>力扣</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣738-单调递增的数字</title>
    <url>/2020/12/15/li-kou-738-dan-diao-di-zeng-de-shu-zi/</url>
    <content><![CDATA[<h1 id="力扣738-单调递增的数字"><a href="#力扣738-单调递增的数字" class="headerlink" title="力扣738-单调递增的数字"></a><center>力扣738-单调递增的数字</center></h1><h2 id="一、原题题目"><a href="#一、原题题目" class="headerlink" title="一、原题题目"></a><font color="born">一、原题题目</font></h2><h3 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h3><p>​        给定一个非负整数 N，找出小于或等于N的最大的整数，同时这个整数需要满足其各个位数上的数字是单调递增。    </p>
<p>​    （当且仅当每个相邻位数上的数字 x 和 y 满足 x &lt;= y 时，我们称这个整数是单调递增的。）</p>
<h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><ul>
<li><p><strong>示例1：</strong></p>
<p><strong>输入：</strong>N = 10<br><strong>输出：</strong>9</p>
</li>
<li><p><strong>示例2：</strong></p>
<p><strong>输入：</strong>N = 1234<br><strong>输出：</strong>1234</p>
</li>
<li><p><strong>示例3：</strong></p>
<p><strong>输入：</strong>N = 332</p>
<p><strong>输出：</strong>299</p>
</li>
<li><p><strong>说明：</strong>N 是在[0, 10<sup>9</sup>]范围内的一个整数。</p>
</li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/monotone-increasing-digits">https://leetcode-cn.com/problems/monotone-increasing-digits</a></p>
<h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a><font color="born">二、解题思路</font></h2><h3 id="2-1-题目意思理解"><a href="#2-1-题目意思理解" class="headerlink" title="2.1 题目意思理解"></a>2.1 题目意思理解</h3><p>​    按照题目意思，我们从前往后去分析数据，如果当前位数上的值小于后一位的值时，那么当前位值要 -1，右边的所有位置 9 。否则按照位数向右递归。</p>
<h3 id="2-2-详细代码（Java）"><a href="#2-2-详细代码（Java）" class="headerlink" title="2.2 详细代码（Java）"></a>2.2 详细代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">monotoneIncreasingDigits</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将 int 转换成字符串再转换成字符数组 </span>
       <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strN <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     
       <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// 找到前一个数值大于当前数值的位置</span>
       <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>strN<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> strN<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>strN<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">// 原数字不是单调递增的</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>strN<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token comment">// 前一个数值大了，执行减一操作，减一后要检验之前的</span>
           <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> strN<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>strN<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
               strN<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
               i<span class="token operator">--</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
           <span class="token comment">// 讲最终修改后的位置之后都改为 9</span>
           <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>strN<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> strN<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'9'</span><span class="token punctuation">;</span>        
       <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>strN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-3-算法执行结果"><a href="#2-3-算法执行结果" class="headerlink" title="2.3 算法执行结果"></a>2.3 算法执行结果</h3><center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glodhbs9wpj310y0cq0u3.jpg" alt="算法执行结果" width="80%/"></center>

<h2 id="三、总结分析"><a href="#三、总结分析" class="headerlink" title="三、总结分析"></a><font color="born">三、总结分析</font></h2><p>​        从前往后遍历，如果前面的值大于后面的值就把当前位数减一然后把后面的值变成9，以此类推</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>中等</tag>
        <tag>力扣</tag>
        <tag>数组</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣746-使用最小花费爬楼梯</title>
    <url>/2020/12/21/li-kou-746-shi-yong-zui-xiao-hua-fei-pa-lou-ti/</url>
    <content><![CDATA[<h1 id="力扣746-使用最小花费爬楼梯"><a href="#力扣746-使用最小花费爬楼梯" class="headerlink" title="力扣746-使用最小花费爬楼梯"></a><center>力扣746-使用最小花费爬楼梯</center></h1><h2 id="一、原题题目"><a href="#一、原题题目" class="headerlink" title="一、原题题目"></a><font color="born">一、原题题目</font></h2><h3 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h3><p>  数组的每个索引作为一个阶梯，第 i个阶梯对应着一个非负数的体力花费值cost[i]（索引从0开始）。每当你爬上一个阶梯你都要花费对应的体力花费值，然后你可以选择继续爬一个阶梯或者爬两个阶梯。您需要找到达到楼层顶部的最低花费。在开始时，你可以选择从索引为 0 或 1 的元素作为初始阶梯。</p>
<h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><ul>
<li><p><strong>示例1：</strong></p>
<p>  <strong>输入：</strong> cost = [10, 15, 20]</p>
<p>  <strong>输出：</strong> 15</p>
<p>  <strong>解释：</strong> 最低花费是从cost[1]开始，然后走两步即可到阶梯顶，一共花费15。</p>
</li>
<li><p><strong>示例2：</strong></p>
<p>  <strong>输入：</strong> cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]</p>
<p>  <strong>输出：</strong> 6</p>
<p>  <strong>解释：</strong> 最低花费方式是从cost[0]开始，逐个经过那些1，跳过cost[3]，一共花费6。</p>
</li>
</ul>
<p><strong>注意：</strong></p>
<ol>
<li> <code>cost</code> 的长度将会在 <code>[2, 1000]</code>。</li>
<li> 每一个 <code>cost[i]</code> 将会是一个Integer类型，范围为 <code>[0, 999]</code>。</li>
</ol>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/min-cost-climbing-stairs">https://leetcode-cn.com/problems/min-cost-climbing-stairs</a></p>
<h2 id="二、解题思路（动态规划）"><a href="#二、解题思路（动态规划）" class="headerlink" title="二、解题思路（动态规划）"></a><font color="born">二、解题思路（动态规划）</font></h2><h3 id="2-1-题目意思理解"><a href="#2-1-题目意思理解" class="headerlink" title="2.1 题目意思理解"></a>2.1 题目意思理解</h3><p>  吐槽一下原题的题目表达太不清晰~。参考网友谈论彻底明白到底是表达的什么<strong>意思：</strong>其实就是让我们要<font color="red">通过整个数组</font>，cost[i] 表示通过该位置的<font color="red">过路费</font>，交了过路费，你可以<font color="red">走一步</font>，也可以<font color="red">走两步</font>，目的是要<font color="red">彻底走完数组</font>，<font color="red">花费最少</font>。可以从 <font color="red">cost[0]</font> 或 <font color="red">cost[1]</font> 开始起步。</p>
<p>  明白题目意思后比较容易理解该题目也是一个动态规划的题目，几天前也碰到过一个动态规划的题目：<a href="https://ganming1.github.io/2020/12/17/li-kou-714-mai-mai-gu-piao-de-zui-jia-shi-ji-han-shou-xu-fei/">力扣714-买卖股票的最佳时机含手续费</a>，里面有简单介绍动态规划的内容。</p>
<ul>
<li><p>  <font color="red">定义状态变量</font> cost[i] 为到达并跨过第 i 级台阶总的最小费用，直接利用原数组保存结果。</p>
</li>
<li><p><font color="red">找状态转移方程</font>：</p>
<p>  1.要到达第 i 级台阶可以有第 i-1 级台阶走一步到达，再交上这一级台阶的过路费跨过。总费用为 cost[i-1] + cost[i]。</p>
<p>  2.要到达第 i 级台阶也可以由第 i-2 级台阶走两步到达，在交上这一级台阶的过路费跨过。总费用为 cost[i-2] + cost[i]。</p>
<p>  应该去下面两种情况中的较小值<br></p><center>cost[i] = Math.min(cost[i-1] + cost[i], cost[i-2] + cost[i])</center><p></p>
</li>
<li><p>  <font color="red">初始状态</font>即只需要知道到达并跨过第 0 级台阶和到达并跨过第 1 级台阶总的最小费用即可，而到达第 0 和第 1 级台阶没有前面费用需要，所以只需要跨过费用即可，所以初始状态 cost[0] = cost[0]，cost[1] = cost[1]。  </p>
</li>
</ul>
<h3 id="2-2-详细代码（Java）"><a href="#2-2-详细代码（Java）" class="headerlink" title="2.2 详细代码（Java）"></a>2.2 详细代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minCostClimbingStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cost<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cost <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token comment">// 输入异常判断</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cost<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> cost<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 只有一级台阶</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>cost<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">// 动态规划更新总最小费用</span>
            <span class="token keyword">int</span> cost1 <span class="token operator">=</span> cost<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// 上一级台阶通过跨一步到达的</span>
            <span class="token keyword">int</span> cost2 <span class="token operator">=</span> cost<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// 上两级台阶通过跨两步到达的</span>
            cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>cost1<span class="token punctuation">,</span>cost2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 选最小的作为跨过这个台阶的总最小费用</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 跨过最后一个台阶走一步或倒数第二个台阶走两步都是完成全过程</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>cost<span class="token punctuation">[</span>cost<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>cost<span class="token punctuation">[</span>cost<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-3-算法执行结果"><a href="#2-3-算法执行结果" class="headerlink" title="2.3 算法执行结果"></a>2.3 算法执行结果</h3><center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glvax410v3j30s00eg3zx.jpg" alt="算法执行结果" width="80%/"></center>

<h2 id="三、总结分析"><a href="#三、总结分析" class="headerlink" title="三、总结分析"></a><font color="born">三、总结分析</font></h2><p>  又一道动态规划题，赶紧整理起来。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>力扣</tag>
        <tag>简单</tag>
        <tag>数组</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣84-柱状图中最大的矩形</title>
    <url>/2020/12/26/li-kou-84-zhu-zhuang-tu-zhong-zui-da-de-ju-xing/</url>
    <content><![CDATA[<h1 id="力扣84-柱状图中最大的矩形"><a href="#力扣84-柱状图中最大的矩形" class="headerlink" title="力扣84-柱状图中最大的矩形"></a><center>力扣84-柱状图中最大的矩形</center></h1><h2 id="一、原题题目"><a href="#一、原题题目" class="headerlink" title="一、原题题目"></a><font color="#A22015">一、原题题目</font></h2><h3 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h3><p>  给定 <em>n</em> 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。求在该柱状图中，能够勾勒出来的矩形的最大面积。</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4xe0rvdoj31fw0s4apj.jpg" alt="题目示图" width="100%/"> </center>


<p>  以上左图是柱状图的示例，其中每个柱子的宽度为 1，给定的高度为 <code>[2,1,5,6,2,3]</code>。右图中阴影部分为所能勾勒出的最大矩形面积，其面积为 <code>10</code> 个单位。</p>
<h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><ul>
<li><p><strong>示例：</strong></p>
<p>  <strong>输入：</strong>  [2,1,5,6,2,3]<br><strong>输出：</strong> 10</p>
</li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/largest-rectangle-in-histogram/">https://leetcode-cn.com/problems/largest-rectangle-in-histogram/</a></p>
<h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a><font color="#A22015">二、解题思路</font></h2><h3 id="2-1-【暴力】思路解题"><a href="#2-1-【暴力】思路解题" class="headerlink" title="2.1 【暴力】思路解题"></a>2.1 【暴力】思路解题</h3><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  读完题目没有想到这个题算是什么类型的题，但自己有一个解题思路：遍历数组的每一个元素，确定其左右比它高的元素个数和，包含它自己作为以它为参考中心的能勾勒出的矩形的宽，以它的值为高去计算面积。与最大面积值比较是否取代最大面积值。</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm3k5iy5n0j31bw0qudjk.jpg" alt="暴力解法图解" width="100%/"></center>

<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">largestRectangleArea</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> heights<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>heights <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> heights<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// 数组为空返回0</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> heights<span class="token punctuation">.</span>length<span class="token punctuation">;</span>       <span class="token comment">// 记录长度</span>
        <span class="token keyword">int</span> max <span class="token operator">=</span> heights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment">// 开始把最大面积定位heights[0]</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">// 遍历每一个元素</span>
            <span class="token keyword">int</span> left <span class="token operator">=</span> i<span class="token punctuation">,</span>right <span class="token operator">=</span> i<span class="token punctuation">;</span>     <span class="token comment">// 定义开始小于自己的左右边界，开始都等于自己</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>heights<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&gt;=</span>heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  left<span class="token operator">--</span><span class="token punctuation">;</span>     <span class="token comment">// 往左边去找小于自己的左边界</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>right<span class="token operator">&lt;</span>len<span class="token operator">&amp;&amp;</span>heights<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">&gt;=</span>heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>   right<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">// 往右边去找小于自己的右边界</span>
            max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 此时的宽为 right - left -1</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> max<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p><strong>性能分析</strong></p>
<p>  时间复杂度：O(<em>N</em><sup>2</sup>)，这里 <em>N</em> 是输入数组的长度。<br>空间复杂度：O(1)。</p>
</li>
<li><p>  <strong>代码执行结果</strong></p>
</li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm0lexr4xdj30rw0eagn0.jpg" alt="暴力执行结果" width="100%/"></center>

<p>  虽然是通过了，但时间和空间上性能都不是很好。看了相关题解介绍后才知道自己想的这种是暴力解法，之所以效率低，是因为每考虑过一个位置后没有为后面的计算提供相关信息简化后面的运算。</p>
<h3 id="2-1-【栈】思路解题"><a href="#2-1-【栈】思路解题" class="headerlink" title="2.1 【栈】思路解题"></a>2.1 【栈】思路解题</h3><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  上述的暴力解法每次遍历的时候没有记录相关的信息给后面的计算提供帮助，所以效率比较低，但是读了官方题解之后其实感觉还是不是很明白，左思右想后大概应该是这么个思路过程。</p>
<p>  我们在暴力解法中，需要不断的向左右去找严格比当前值小的下标，然后计算宽度。左边是我们已经遍历过的数据，但是没能保存住最下值的下标（需要优化的地方），右边的最小值还是需要继续遍历去找到。这里我直接在参考的题解上得出下面利用栈的过程：其实就是两种情况：</p>
<ol>
<li> 当前位置的值（高度）大于栈顶位置的值（高度）时，当前位置的下标入栈：因为后面的位置高度比栈顶位置的高度大，及还没找到比它小的右边界，所以入栈先不能计算栈顶元素位置的最大矩形。</li>
<li> 当前位置的值（高度）小于栈顶位置的值（高度）时，记下当前位置下标即是栈顶元素的右边界，说明栈顶元素就可以求出最大矩形，则出栈，对应值作为高度，再找到左边比它小的左边界即可，如果栈不为空即新的栈顶位置就是左边界，栈为空则左边界一直可以到第一个元素，即下标为0，为了计算统一，我们定这种情况的左边界为-1。</li>
</ol>
<p>  下面以示例 <code>[2,1,5,6,2,3]</code> 一步一步演示过程：</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4sn4j74zj31440acwha.jpg" alt="第一步" width="100%/"></center>

<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4uqfblg3j314i0asgqu.jpg" alt="第二步" width="100%/"></center>

<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4t0nuu5zj31520bc0vi.jpg" alt="第三步" width="100%/"></center>

<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4t2b2125j31480bw775.jpg" alt="第四步" width="100%/"></center>

<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4urogw0dj31460b2gr6.jpg" alt="第五步" width="100%/"></center>

<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4usv3oxij31420bc797.jpg" alt="第六步" width="100%/"></center>

<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4ueuwt48j314y0agq57.jpg" alt="第七步" width="100%/"></center>

<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4utxc4ozj313w0asgpv.jpg" alt="第八步" width="100%/"></center>

<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4uwifxhsj31480astcr.jpg" alt="第九步" width="100%/"></center>

<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4uzfhrinj31400ba78i.jpg" alt="第十步" width="100%/"></center>

<p>  经过上述步骤后最后 Smax 即保存的最大矩形面积。</p>
<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">largestRectangleArea</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> heights<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>heights <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> heights<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// 数组为空返回0</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> heights<span class="token punctuation">.</span>length<span class="token punctuation">;</span>       <span class="token comment">// 记录长度</span>
        <span class="token keyword">int</span> <span class="token class-name">Smax</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                   <span class="token comment">// 记录最大面积</span>
        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment">// 遍历每一个元素</span>
            <span class="token comment">// 栈不为空，且当前元素小于栈顶元素，则计算栈顶元素能勾勒矩形的面积</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>heights<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">int</span> right <span class="token operator">=</span> i<span class="token punctuation">;</span>          <span class="token comment">// 右边界为当前下标</span>
                <span class="token keyword">int</span> height <span class="token operator">=</span> heights<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 栈顶出栈记录高度</span>
                <span class="token keyword">int</span> left <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>stack<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 左边界：栈不空则为栈顶元素，否则为-1</span>
                <span class="token class-name">Smax</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Smax</span><span class="token punctuation">,</span>height<span class="token operator">*</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 计算面积比较</span>
            <span class="token punctuation">}</span>
            stack<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 栈顶元素不大于当前值，入栈</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">// 遍历完了数组</span>
            <span class="token keyword">int</span> right <span class="token operator">=</span> len<span class="token punctuation">;</span>        <span class="token comment">// 右边界为数组长度</span>
            <span class="token keyword">int</span> height <span class="token operator">=</span> heights<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 栈顶出栈记录高度</span>
            <span class="token keyword">int</span> left <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>stack<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 左边界：栈不空则为栈顶元素，否则为-1</span>
            <span class="token class-name">Smax</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Smax</span><span class="token punctuation">,</span>height<span class="token operator">*</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 计算面积比较</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">Smax</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4vy9bkh7j30s60eiwfw.jpg" alt="栈思路执行结果" width="100%/"></center>

<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a><font color="#A22015">三、总结</font></h2><p>  画上面的演示过程太费时间啦！哎~不过现在搞的挺明白的也好。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>力扣</tag>
        <tag>困难</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣85-最大矩形</title>
    <url>/2020/12/26/li-kou-85-zui-da-ju-xing/</url>
    <content><![CDATA[<h1 id="力扣85-最大矩形"><a href="#力扣85-最大矩形" class="headerlink" title="力扣85-最大矩形"></a><center>力扣85-最大矩形</center></h1><h2 id="一、原题题目"><a href="#一、原题题目" class="headerlink" title="一、原题题目"></a><font color="#A22015">一、原题题目</font></h2><h3 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h3><p>  给定一个仅包含 <code>0</code> 和 <code>1</code> 、大小为 <code>rows x cols</code> 的二维二进制矩阵，找出只包含 <code>1</code> 的最大矩形，并返回其面积。</p>
<h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><ul>
<li><p><strong>示例1：</strong></p>
  <center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm0k2iw9laj30b608yt92.jpg" alt="题目示图" width="60%/"></center>

<p>  <strong>输入：</strong>  matrix = [[“1”,”0”,”1”,”0”,”0”],[“1”,”0”,”1”,”1”,”1”],[“1”,”1”,”1”,”1”,”1”],[“1”,”0”,”0”,”1”,”0”]]<br><strong>输出：</strong> 6<br><strong>解释：</strong> 最大矩形如上图所示。</p>
</li>
<li><p><strong>示例2：</strong></p>
<p>  <strong>输入：</strong> matrix = []<br><strong>输出：</strong> 0<br></p>
</li>
<li><p><strong>示例3：</strong></p>
<p>  <strong>输入：</strong> matrix = [[“0”]]<br><strong>输出：</strong> 0</p>
</li>
<li><p><strong>示例4：</strong></p>
<p>  <strong>输入：</strong> matrix = [[“1”]]<br><strong>输出：</strong> 1</p>
</li>
<li><p><strong>示例5：</strong></p>
<p>  <strong>输入：</strong> matrix = [[“0”,”0”]]<br><strong>输出：</strong> 0</p>
</li>
</ul>
<p><strong>提示：</strong></p>
<ul>
<li>  <code>row == matrix.length</code></li>
<li>  <code>cols == matrix[0].length</code></li>
<li>  <code>0 &lt;= row, cols &lt;= 200</code></li>
<li>  <code>matrix[i][j]</code> 为 <code>0</code> 或 <code>1</code></li>
</ul>
<p>来源：力扣（LeetCode）<br><br>链接：<a href="">https://leetcode-cn.com/problems/maximal-rectangle/</a></p>
<h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a><font color="#A22015">二、解题思路</font></h2><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  这个题基于<a href="https://ganming1.github.io/2020/12/26/li-kou-84-zhu-zhuang-tu-zhong-zui-da-de-ju-xing/">力扣第84题-柱状图中最大的矩形</a>可以比较容易的想到思路，我们可以一行一行的考虑最大的矩形，如图所示。利用上一题的思路还是很容易想到解题思路的。</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4xwx93olj30c50c6mxt.jpg" alt="思路图解" width="100%/"></center>

<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maximalRectangle</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">||</span> matrix <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// 当字符二维数组不存在输出0</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 记录每一行中每一个位置向上连续1的个数</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 记录最大的矩形面积，初始化为0</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 遍历每一行</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 统计每一个位置向上连续1的个数</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment">// 每一个位置初始化向上连续1的个数为0</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span>k<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">// 向上遍历</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
          <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span><span class="token function">largestRectangleArea</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 第84题-柱状图中最大的矩形</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">largestRectangleArea</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> heights<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>heights <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> heights<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// 数组为空返回0</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> heights<span class="token punctuation">.</span>length<span class="token punctuation">;</span>       <span class="token comment">// 记录长度</span>
    <span class="token keyword">int</span> <span class="token class-name">Smax</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                   <span class="token comment">// 记录最大面积</span>
    <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment">// 遍历每一个元素</span>
      <span class="token comment">// 栈不为空，且当前元素小于栈顶元素，则计算栈顶元素能勾勒矩形的面积</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>heights<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> right <span class="token operator">=</span> i<span class="token punctuation">;</span>          <span class="token comment">// 右边界为当前下标</span>
        <span class="token keyword">int</span> height <span class="token operator">=</span> heights<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 栈顶出栈记录高度</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>stack<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 左边界：栈不空则为栈顶元素，否则为-1</span>
        <span class="token class-name">Smax</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Smax</span><span class="token punctuation">,</span>height<span class="token operator">*</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 计算面积比较</span>
      <span class="token punctuation">}</span>
      stack<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 栈顶元素不大于当前值，入栈</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">// 遍历完了数组</span>
      <span class="token keyword">int</span> right <span class="token operator">=</span> len<span class="token punctuation">;</span>        <span class="token comment">// 右边界为数组长度</span>
      <span class="token keyword">int</span> height <span class="token operator">=</span> heights<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 栈顶出栈记录高度</span>
      <span class="token keyword">int</span> left <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>stack<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 左边界：栈不空则为栈顶元素，否则为-1</span>
      <span class="token class-name">Smax</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Smax</span><span class="token punctuation">,</span>height<span class="token operator">*</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 计算面积比较</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token class-name">Smax</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4ys2up18j30s40egq4b.jpg" alt="递归执行结果" width="100%/"></center>

<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a><font color="#A22015">三、总结</font></h2><p>  这两天的题目都是困难，做的很吃力，这个题就先这样做着吧，后面有精力在分析多方法。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>力扣</tag>
        <tag>困难</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣860-柠檬水找零</title>
    <url>/2020/12/25/li-kou-860-ning-meng-shui-zhao-ling/</url>
    <content><![CDATA[<h1 id="力扣860-柠檬水找零"><a href="#力扣860-柠檬水找零" class="headerlink" title="力扣860-柠檬水找零"></a><center>力扣860-柠檬水找零</center></h1><h2 id="一、原题题目"><a href="#一、原题题目" class="headerlink" title="一、原题题目"></a><font color="#A22015">一、原题题目</font></h2><h3 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h3><p>  在柠檬水摊上，每一杯柠檬水的售价为 <code>5</code> 美元。顾客排队购买你的产品，（按账单 <code>bills</code> 支付的顺序）一次购买一杯。每位顾客只买一杯柠檬水，然后向你付 <code>5</code> 美元、<code>10</code> 美元或 <code>20</code> 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 <code>5</code> 美元。</p>
<p>  注意，一开始你手头没有任何零钱。如果你能给每位顾客正确找零，返回 true ，否则返回 false 。</p>
<h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><ul>
<li><p><strong>示例1：</strong></p>
<p>  <strong>输入：</strong>  <code>[5,5,5,10,20]</code><br><strong>输出：</strong> <code>true</code><br><strong>解释：</strong> 前 <code>3</code> 位顾客那里，我们按顺序收取 <code>3</code> 张 <code>5</code> 美元的钞票。<br>  第 <code>4</code> 位顾客那里，我们收取一张 <code>10</code> 美元的钞票，并返还 <code>5</code> 美元。<br>  第 <code>5</code> 位顾客那里，我们找还一张 <code>10</code> 美元的钞票和一张 <code>5</code> 美元的钞票。<br>  由于所有客户都得到了正确的找零，所以我们输出 <code>true</code>。</p>
</li>
<li><p><strong>示例2：</strong></p>
<p>  <strong>输入：</strong> <code>[5,5,10]</code><br><strong>输出：</strong> <code>true</code></p>
</li>
<li><p><strong>示例3：</strong></p>
<p>  <strong>输入：</strong> <code>[10,10]</code><br><strong>输出：</strong> <code>false</code></p>
</li>
<li><p><strong>示例4：</strong></p>
<p>  <strong>输入：</strong> <code>[5,5,10,10,20]</code><br><strong>输出：</strong> <code>false</code><br><strong>解释：</strong> 前 <code>2</code> 位顾客那里，我们按顺序收取 <code>2</code> 张 <code>5</code> 美元的钞票。<br>  对于接下来的 <code>2</code> 位顾客，我们收取一张 <code>10</code> 美元的钞票，然后返还 <code>5</code> 美元。<br>  对于最后一位顾客，我们无法退回 <code>15</code> 美元，因为我们现在只有两张 <code>10</code> 美元的钞票。<br>  由于不是每位顾客都得到了正确的找零，所以答案是 <code>false</code>。</p>
</li>
</ul>
<p><strong>提示：</strong></p>
<ul>
<li>  <code>0 &lt;= bills.length &lt;= 10000</code></li>
<li>  <code>bills[i]</code> 不是 <code>5</code> 就是 <code>10</code> 或是 <code>20</code></li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a href="">https://leetcode-cn.com/problems/lemonade-change</a></p>
<h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a><font color="#A22015">二、解题思路</font></h2><h3 id="2-1-贪心思路解题"><a href="#2-1-贪心思路解题" class="headerlink" title="2.1 贪心思路解题"></a>2.1 贪心思路解题</h3><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  读完题目我又感觉这是一道贪心的题，都有点怀疑自己啦！这几天看到题老是想到贪心。这里我用三个变量 <code>five</code> <code>ten</code> <code>twenty</code> 来存储手头上拥有的 <code>5</code> 美元，<code>10</code> 美元，<code>20</code> 美元钞票的数量，当遍历账单时，按如下规则处理：</p>
<ul>
<li><p>  <code>5</code> 美元：不用找零，直接 <code>five + 1</code></p>
</li>
<li><p>  <code>10</code> 美元：必须要找零一个 <code>5</code> 美元，如果有即 <code>five &gt; 0</code> ，则 <code>five - 1</code> ，否则返回 <code>false</code></p>
</li>
<li><p><code>20</code> 美元：必须找零 <code>15</code> 美元，尽可能的先找一个 <code>10</code> 美元，再找一个 <code>5</code> 美元（贪心的体现）如果没有 <code>10</code> 美元的，则需要找三个 <code>5</code> 美元的，否则返回 <code>false</code></p>
<p>  1.如果 <code>five &gt;= 1 &amp;&amp; ten &gt;= 1</code> ，则 <code>five - 1</code> ,<code>ten - 1</code><br>2.如果 <code>ten == 0 &amp;&amp; five &gt;= 3</code> ，则 <code>five - 3</code><br>3.否则返回 <code>false</code></p>
</li>
</ul>
<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lemonadeChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bills<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> five <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>ten <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                   <span class="token comment">// 定义两个用于找零面额钞票数量的变量</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>bills<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment">// 遍历每一个账单</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>bills<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span>    five<span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token comment">// 当前账单为5美元，直接收下，不用找零</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>bills<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token comment">// 当前账单为10美元</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>five <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment">// 有5美元的找</span>
                    ten<span class="token operator">++</span><span class="token punctuation">;</span>                      <span class="token comment">// 则收10美元</span>
                    five<span class="token operator">--</span><span class="token punctuation">;</span>                     <span class="token comment">// 找零5美元</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token comment">// 没有5美元的找则返回false</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>bills<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token comment">// 当前账单为20美元</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>five<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>ten<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment">// 有10美元和5美元的找</span>
                    five<span class="token operator">--</span><span class="token punctuation">;</span>                     <span class="token comment">// 找零一个10美元</span>
                    ten<span class="token operator">--</span><span class="token punctuation">;</span>                      <span class="token comment">// 找零一个5美元</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ten <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">&amp;&amp;</span>five<span class="token operator">&gt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment">// 没有10美元只有足够5美元的找</span>
                    five<span class="token operator">-=</span><span class="token number">3</span><span class="token punctuation">;</span>                    <span class="token comment">// 找零三个5美元</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token comment">// 没有可找零的方案返回false</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm0axzdb9cj30s00eg3zw.jpg" alt="算法执行结果" width="100%/"></center>

<p>  写代码时发现 <code>twenty</code> 这个变量没有用到，故在上述代码中没有添加。之后也去参考了其他的题解，这个题好像也没啥可优化的啦~</p>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a><font color="#A22015">三、总结</font></h2><p>  最近贪心题目做的有点勤呀！能马上感觉到这个是贪心就满足了，至少说明对贪心有点理解啦~加油！</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>力扣</tag>
        <tag>简单</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS基础知识(1)</title>
    <url>/2020/12/16/css-ji-chu-zhi-shi-1/</url>
    <content><![CDATA[<h1 id="CSS基础知识-1"><a href="#CSS基础知识-1" class="headerlink" title="CSS基础知识(1)"></a><center>CSS基础知识(1)</center></h1><h2 id="一、CSS-简介"><a href="#一、CSS-简介" class="headerlink" title="一、CSS 简介"></a><font color="born">一、CSS 简介</font></h2><p>  CSS 的主要使用场景就是美化网页，布局页面的。</p>
<h3 id="1-1-HTML-的局限性"><a href="#1-1-HTML-的局限性" class="headerlink" title="1.1 HTML 的局限性"></a>1.1 HTML 的局限性</h3><p>  HTML是只<font color="red">关注内容的语义</font>。比如 &lt;h1&gt; 表明这是一个大标题，&lt;p&gt; 表 明这是一个段落，&lt;img&gt; 表明这儿有一个图片，&lt;a&gt; 表示此处有链接。虽然 HTML 可以做简单的样式，但是带来的是无尽的<font color="red">臃肿和繁琐</font>……</p>
<h3 id="1-2-CSS-网页的美容师"><a href="#1-2-CSS-网页的美容师" class="headerlink" title="1.2 CSS  网页的美容师"></a>1.2 CSS  网页的美容师</h3><p>  <font color="red">CSS</font> 是<font color="red">层叠样式表</font> ( <font color="red">Cascading Style Sheets</font> ) 的简称。有时我们也会称之为 <font color="red">CSS 样式表</font>或<font color="red">级联样式表</font>。CSS 是也是一种标记语言，CSS 主要用于设置 HTML 页面中的<font color="red">文本内容</font>(字体、大小、对齐方式等)、<font color="red">图片的外形</font>(宽高、边框样式、 边距等)以及<font color="red">版面的布局和外观显示样式</font>。CSS 让我们的网页更加丰富多彩，布局更加灵活自如。简单理解：<font color="red">CSS 可以美化 HTML , 让 HTML 更漂亮， 让页面布局更简单</font>。</p>
<p>  CSS 与 HTML 的关系可以形象的用下图表示。</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glprnuq6tgj30tg0iu7t4.jpg" alt="HTML和CSS关系" width="80%/"></center>

<ul>
<li>HTML 主要是做结构的，显示元素内容。</li>
<li>CSS 主要是美化网页的，布局页面的。</li>
<li>CSS 最大的价值：让 HTML 专注去做结构呈现，样式讲给 CSS，即将<font color="red">结构</font>（HTML）与<font color="red">样式</font>（CSS）相分离。</li>
</ul>
<h3 id="1-3-CSS-的语法规范"><a href="#1-3-CSS-的语法规范" class="headerlink" title="1.3 CSS 的语法规范"></a>1.3 CSS 的语法规范</h3><p>  使用 HTML 时，需要遵从一定的规范，CSS 也是如此。要想熟练地使用 CSS 对网页进行修饰，首先需要了解 CSS 样式规则。</p>
<ul>
<li><p>CSS 规则由两个主要的部分构成：<font color="red">选择器</font>以及一条或多条<font color="red">声明</font>。</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glprxe6iypj309p03b74g.jpg" alt="CSS语法构成" width="80%/"></center>
</li>
<li><p>注意事项：</p>
<ul>
<li><font color="red">选择器</font>是用于指定 CSS 样式的 <font color="red">HTML 标签</font>，花括号内是对该对象设置的具体样式</li>
<li>属性和属性值以“键值对”的形式出现</li>
<li>属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等</li>
<li>属性和属性值之间用英文 “<font color="red">:</font>” 分开</li>
<li>多个“键值对”之间用英文 “<font color="red">;</font>” 进行区分</li>
</ul>
</li>
<li><p>所有的样式，都包含在 &lt;style&gt; 标签内，表示是样式表。&lt;style&gt; 一般写到 &lt;/head&gt; 上方。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
        <span class="token selector">p</span> <span class="token punctuation">{</span>
            <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> 
            <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>  
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>我是一个被改了样式的段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glpsc0rplfj30rm0aomyt.jpg" alt="CSS改样式示例" width="80%/"></center>
</li>
<li><p>CSS 代码风格</p>
<ul>
<li>强烈推荐样式选择器，属性名，属性值关键字全部使用<font color="red">小写字母</font>，特殊情况除外</li>
<li>属性值前面，冒号后面，保留一个空格</li>
<li>选择器(标签)和大括号中间保留空格</li>
</ul>
</li>
</ul>
<h2 id="二、CSS-基础选择器"><a href="#二、CSS-基础选择器" class="headerlink" title="二、CSS 基础选择器"></a><font color="born">二、CSS 基础选择器</font></h2><h3 id="2-1-CSS-选择器的作用"><a href="#2-1-CSS-选择器的作用" class="headerlink" title="2.1 CSS 选择器的作用"></a>2.1 CSS 选择器的作用</h3><p>  选择器(选择符)就是根据不同需求把不同的标签选出来这就是选择器的作用。 简单来说，就是选择标签用的。</p>
<ul>
<li><p>CSS 样式其实就做两件事</p>
<p>1.找到所选择的标签。 选择器(选对人)。</p>
<p>2.设置这些标签的样式，比如颜色为红色(做对事)。</p>
</li>
</ul>
<h3 id="2-2-CSS-选择器分类"><a href="#2-2-CSS-选择器分类" class="headerlink" title="2.2 CSS 选择器分类"></a>2.2 CSS 选择器分类</h3><p>  <font color="red">选择器</font>分为<font color="red">基础选择器</font>和<font color="red">复合选择器</font>两个大类，我们这里先讲解一下基础选择器。后序会讲解复合选择器。</p>
<ul>
<li>基础选择器是由<font color="red">单个选择器组成</font>的</li>
<li>基础选择器包括：<font color="red">标签选择器</font>、<font color="red">类选择器</font>、<font color="red">id 选择器</font>和<font color="red">通配符选择器</font></li>
</ul>
<h3 id="2-3-标签选择器"><a href="#2-3-标签选择器" class="headerlink" title="2.3 标签选择器"></a>2.3 标签选择器</h3><p>  标签选择器(元素选择器)是指用 HTML 标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的 CSS 样式。</p>
<ul>
<li><p><strong>语法</strong></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">标签名</span> <span class="token punctuation">{</span>
	<span class="token property">属性1</span><span class="token punctuation">:</span> 属性值1<span class="token punctuation">;</span> 
  <span class="token property">属性2</span><span class="token punctuation">:</span> 属性值2<span class="token punctuation">;</span> 
  <span class="token property">属性3</span><span class="token punctuation">:</span> 属性值3<span class="token punctuation">;</span> 
  ...
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>作用：</strong>标签选择器可以把某一类标签全部选择出来，比如所有的 &lt;div&gt; 标签和所有的 &lt;span&gt; 标签。</p>
</li>
<li><p><strong>优点：</strong>能快速为页面中同类型的标签统一设置样式。</p>
</li>
<li><p><strong>缺点：</strong>不能设计差异化样式，只能选择全部的当前标签。</p>
</li>
</ul>
<h3 id="2-4-类选择器"><a href="#2-4-类选择器" class="headerlink" title="2.4 类选择器"></a>2.4 类选择器</h3><p>  如果想要差异化选择不同的标签，单独选一个或者某几个标签，可以使用类选择器.</p>
<ul>
<li><p><strong>语法</strong></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.类名</span> <span class="token punctuation">{</span>
	<span class="token property">属性1</span><span class="token punctuation">:</span> 属性值1<span class="token punctuation">;</span> 
	...
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>类选择器在 HTML 中以 class 属性表示，在 CSS 中，类选择器以一个点 “.” 号显示。每一个结构，如 &lt;p&gt; 、&lt;div&gt; 、&lt;span&gt; 等都可以用 class 属性来定义它所属的类，可以所属多个类。</p>
</li>
<li><p><strong>注意事项</strong></p>
<p>1.类选择器使用 “<font color="red">.</font>” (英文点号)进行标识，后面紧跟类名(自定义，我们自己命名的)。</p>
<p>2.可以理解为给这个标签起了一个名字来表示。</p>
<p>3.长名称或词组可以使用中横线来为选择器命名。</p>
<p>4.不要使用纯数字、中文等命名，尽量使用英文字母来表示。</p>
<p>5.命名要有意义，尽量使别人一眼就知道这个类名的目的。</p>
</li>
<li><p><strong>常见类命名推荐</strong></p>
<table>
<thead>
<tr>
<th align="center">类命名</th>
<th align="center">含义</th>
<th align="center">类命名</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">header</td>
<td align="center">头</td>
<td align="center">content/container</td>
<td align="center">内容</td>
</tr>
<tr>
<td align="center">footer</td>
<td align="center">尾</td>
<td align="center">nav</td>
<td align="center">导航栏</td>
</tr>
<tr>
<td align="center">sidebar</td>
<td align="center">侧栏</td>
<td align="center">column</td>
<td align="center">栏目</td>
</tr>
<tr>
<td align="center">wrapper</td>
<td align="center">页面布局宽度</td>
<td align="center">left/right/center</td>
<td align="center">左右中</td>
</tr>
<tr>
<td align="center">loginbar</td>
<td align="center">登录条</td>
<td align="center">logo</td>
<td align="center">标志</td>
</tr>
<tr>
<td align="center">banner</td>
<td align="center">广告</td>
<td align="center">main</td>
<td align="center">页面主题</td>
</tr>
<tr>
<td align="center">hot</td>
<td align="center">热点</td>
<td align="center">news</td>
<td align="center">新闻</td>
</tr>
<tr>
<td align="center">download</td>
<td align="center">下载</td>
<td align="center">subnav</td>
<td align="center">子导航</td>
</tr>
<tr>
<td align="center">menu</td>
<td align="center">菜单</td>
<td align="center">submenu</td>
<td align="center">子菜单</td>
</tr>
</tbody></table>
</li>
<li><p><strong>多类名</strong></p>
<p>我们可以给一个标签指定多个类名，从而达到更多的选择目的。 这些类名都可以选出这个标签.。简单理解就是一个标签有多个名字。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;
  .box</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> 
  <span class="token selector">.red</span> <span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.green</span> <span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box red<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>红色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box green<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>绿色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box red<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>红色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glpvy1xkxtj30rs0kuta9.jpg" alt="多类名示例" width="80%/"></center>

<p>上述的三个 div 都调用了两个类名来控制自己的样式。</p>
</li>
<li><p><strong>注意事项：</strong></p>
<ul>
<li>在标签 class 属性中可以写多个类名</li>
<li>多个类名中间必须用<font color="red">空格</font>分开</li>
<li>这个标签就可以分别具有这些类名的样式</li>
<li>可以把一些标签元素相同的样式(共同的部分)放到一个类里面</li>
<li>这些标签都可以调用这个公共的类,然后再调用自己独有的类</li>
<li>从而节省CSS代码，统一修改也非常方便</li>
</ul>
</li>
</ul>
<h3 id="2-5-id-选择器"><a href="#2-5-id-选择器" class="headerlink" title="2.5 id 选择器"></a>2.5 id 选择器</h3><p>  id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。HTML 元素以 id 属性来设置 id 选择器，CSS 中 id 选择器以 “<font color="red">#</font>“ 来定义。</p>
<ul>
<li><p>语法</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#id名</span> <span class="token punctuation">{</span>
	<span class="token property">属性1</span><span class="token punctuation">:</span> 属性值1<span class="token punctuation">;</span> ...
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>注意：id 属性只能在每个 HTML 文档中出现一次。</p>
</li>
<li><p>口诀：<font color="red">样式#定义，结构id调用, 只能调用一次, 别人切勿使用</font>。</p>
</li>
<li><p>id 选择器和类选择器的区别</p>
<ul>
<li>类选择器(class)好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用。</li>
<li>id 选择器好比人的身份证号码，全中国是唯一的，不得重复。</li>
<li>id 选择器和类选择器最大的不同在于使用次数上。</li>
<li>类选择器在修改样式中用的最多，id 选择器一般用于页面唯一性的元素上，经常和 JavaScript 搭配使用。</li>
</ul>
</li>
</ul>
<h3 id="2-6-通配符选择器"><a href="#2-6-通配符选择器" class="headerlink" title="2.6 通配符选择器"></a>2.6 通配符选择器</h3><p>  在 CSS 中，通配符选择器使用 “ <font color="red">*</font> ” 定义，它表示选取页面中所有元素(标签)。</p>
<ul>
<li><p>语法</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span> <span class="token punctuation">{</span>
  <span class="token property">属性1</span><span class="token punctuation">:</span> 属性值1<span class="token punctuation">;</span>
  ...
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>注意事项</p>
<ul>
<li>通配符选择器不需要调用， 自动就给所有的元素使用样式</li>
<li>特殊情况才使用，例如清除所有的元素标签的内外边距的代码如下</li>
</ul>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span> <span class="token punctuation">{</span>
	<span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
	<span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glpwq33121j30rs0kumz4.jpg" alt="没清楚内外边距" width="49%/"> <img src="https://tva1.sinaimg.cn/large/0081Kckwly1glpwoh7la7j30rs0kuabp.jpg" alt="没清楚内外边距" width="49%/"></center>

<p>上图左边是没清除 HTML 标签默认带有的内外边距，可以看到我们的元素距离浏览器左侧和上侧都有一定的空间，而使用通配符清除了之后就不会有，如上图右边所示。</p>
</li>
</ul>
<h2 id="三、CSS-字体属性"><a href="#三、CSS-字体属性" class="headerlink" title="三、CSS 字体属性"></a><font color="born">三、CSS 字体属性</font></h2><p>  CSS  <font color="red">Fonts(字体)</font>属性用于定义<font color="red">字体系列</font>（<font color="red">font-family</font>: “Microsoft Yahei”, Arial）、<font color="red">大小</font>（<font color="red">font-size</font>: 20px）、<font color="red">粗细</font>（<font color="red">font-weight</font>: bold）、<font color="red">文字样式</font>（<font color="red">font-style</font>: normal）。</p>
<h3 id="3-1-字体系列（font-family）"><a href="#3-1-字体系列（font-family）" class="headerlink" title="3.1 字体系列（font-family）"></a>3.1 字体系列（font-family）</h3><p>  CSS 使用 <font color="red">font-family</font> 属性定义文本的字体系列，即文字用什么字体显示。</p>
<ul>
<li><p><strong>语法：</strong></p>
  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">{</span> <span class="token property">font-family</span><span class="token punctuation">:</span><span class="token string">"微软雅黑"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token selector">div</span> <span class="token punctuation">{</span><span class="token property">font-family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">,</span><span class="token string">"Microsoft Yahei"</span><span class="token punctuation">,</span> <span class="token string">"微软雅黑"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p><strong>注意点：</strong></p>
<p>  1.各种字体之间必须使用英文状态下的逗号隔开，当给出多个字体时，浏览器依次选择系统拥有的字体渲染文字字体。</p>
<p>  <font color="red">2.一般情况下,如果有空格隔开的多个单词组成的字体那么就要加引号，例如上面的 Arial 字体名称没有空格隔开，则不需要加引号，而 Microsoft Yahei （即微软雅黑）字体名称中间有空格，则要用引号。</font></p>
<p>  3.尽量使用系统默认自带字体，保证在任何用户的浏览器中都能正确显示。</p>
<p>  4.最常见的几个字体：body {font-family: ‘Microsoft YaHei’,tahoma,arial,’Hiragino Sans GB’; }</p>
</li>
</ul>
<h3 id="3-2-字体大小（font-size）"><a href="#3-2-字体大小（font-size）" class="headerlink" title="3.2 字体大小（font-size）"></a>3.2 字体大小（font-size）</h3><p>  CSS 使用 <font color="red">font-size</font> 属性定义字体大小。</p>
<ul>
<li><p><strong>语法：</strong></p>
  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>注意点：</strong></p>
<p>  1.字体大小单位是像素（px），是我们网页的最常用的单位。</p>
<p>  2.谷歌浏览器默认的文字大小为16px。</p>
<p>  3.不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小。</p>
<p>  4.可以给 body 指定整个页面文字的大小。</p>
</li>
</ul>
<h3 id="3-3-字体粗细（font-weight）"><a href="#3-3-字体粗细（font-weight）" class="headerlink" title="3.3 字体粗细（font-weight）"></a>3.3 字体粗细（font-weight）</h3><p>  CSS 使用 font-weight 属性设置文本字体的粗细。</p>
<ul>
<li><p><strong>语法：</strong></p>
  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">{</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>属性值介绍</strong></p>
<table>
<thead>
<tr>
<th align="center">属性值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">normal</td>
<td align="center">默认值（不加粗的）400</td>
</tr>
<tr>
<td align="center">bold</td>
<td align="center">定义粗体 700</td>
</tr>
<tr>
<td align="center">100-900</td>
<td align="center">400及是 normal, 700 及是 bold ，注意这个数字后没有单位</td>
</tr>
</tbody></table>
</li>
<li><p><strong>注意点</strong></p>
<p>  1.该属性常用于让加粗标签(比如 h 和 strong 等) 不加粗，或者其他标签加粗。</p>
<p>  2.实际开发时，我们更喜欢用数字表示粗细。</p>
</li>
</ul>
<h3 id="3-4-文字样式（font-style）"><a href="#3-4-文字样式（font-style）" class="headerlink" title="3.4 文字样式（font-style）"></a>3.4 文字样式（font-style）</h3><p>  CSS 使用 font-style 属性设置文本的风格。</p>
<ul>
<li><p><strong>语法：</strong></p>
  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">{</span>
  <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>属性值介绍：</strong></p>
<table>
<thead>
<tr>
<th align="left">属性值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">normal</td>
<td align="center">默认值。浏览器显示一个标准的字体样式。</td>
</tr>
<tr>
<td align="left">italic</td>
<td align="center">浏览器会显示一个<font color="red">斜体</font>的字体样式。</td>
</tr>
<tr>
<td align="left">oblique</td>
<td align="center">浏览器会显示一个<font color="red">倾斜</font>的字体样式。</td>
</tr>
<tr>
<td align="left">inherit</td>
<td align="center">规定应该从父元素继承字体样式。</td>
</tr>
</tbody></table>
</li>
<li><p><strong>注意：</strong></p>
<p>  1.平时我们很少给文字加斜体，反而要给斜体标签(em，i)改为不倾斜字体。</p>
</li>
</ul>
<h3 id="3-5-字体的复合属性"><a href="#3-5-字体的复合属性" class="headerlink" title="3.5 字体的复合属性"></a>3.5 字体的复合属性</h3><ul>
<li><p><strong>语法：</strong></p>
  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">font</span><span class="token punctuation">:</span> font-style font-weight font-size/line-height font-family<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>注意点：</strong></p>
<p>  1.使用 font 属性时，必须按上面语法格式中的顺序书写，不能更换顺序，并且各个属性间以空格隔开。</p>
<p>  2.不需要设置的属性可以省略(取默认值)，但<font color="red">必须保留</font> <font color="red">font-size</font> 和 <font color="red">font-family</font> 属性，否则 font 属性将不起作用。</p>
</li>
</ul>
<h2 id="四、CSS-文本属性"><a href="#四、CSS-文本属性" class="headerlink" title="四、CSS 文本属性"></a><font color="born">四、CSS 文本属性</font></h2><p>  CSS Text（文本）属性可定义<font color="red">文本的外观</font>，比如<font color="red">文本的颜色</font>、<font color="red">文本对齐</font>、<font color="red">装饰文本</font>、<font color="red">文本缩进</font>、<font color="red">行间距</font>等。</p>
<h3 id="4-1-文本颜色（color）"><a href="#4-1-文本颜色（color）" class="headerlink" title="4.1 文本颜色（color）"></a>4.1 文本颜色（color）</h3><p>  <font color="red">color</font> 属性用于定义文本的颜色。</p>
<ul>
<li><p><strong>语法：</strong></p>
  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>color 属性值：</strong></p>
<p>  1.<font color="red">预定义的颜色值</font>：red、green、blue、pink 等</p>
<p>  2.<font color="red">用十六进制数</font>：#FF0000、#FF6600、<font color="red">#0F0</font>（#00FF00)（开发中最常用）</p>
<p>  3.<font color="red">RGB代码</font>：rgb(255,0,0) 或 rgb(100%,0%,0%)</p>
</li>
</ul>
<h3 id="4-2-文本对齐（text-align）"><a href="#4-2-文本对齐（text-align）" class="headerlink" title="4.2 文本对齐（text-align）"></a>4.2 文本对齐（text-align）</h3><p>  <font color="red">text-align</font> 属性用于设置元素内文本内容的<font color="red">水平对齐方式</font>。</p>
<ul>
<li><p><strong>语法：</strong></p>
  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>属性值介绍：</strong></p>
<table>
<thead>
<tr>
<th align="center">属性值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">left</td>
<td align="center">默认值。左对齐</td>
</tr>
<tr>
<td align="center">right</td>
<td align="center">右对齐</td>
</tr>
<tr>
<td align="center">center</td>
<td align="center">居中对齐</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="4-3-文本装饰（text-decoration）"><a href="#4-3-文本装饰（text-decoration）" class="headerlink" title="4.3 文本装饰（text-decoration）"></a>4.3 文本装饰（text-decoration）</h3><p>  <font color="red">text-decoration</font> 属性规定添加到文本的修饰。可以给文本添加<font color="red">下划线</font>、<font color="red">删除线</font>、<font color="red">上划线</font>等。</p>
<ul>
<li><p><strong>语法：</strong></p>
  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a</span> <span class="token punctuation">{</span>
  <span class="token property">text-decoration</span><span class="token punctuation">:</span>underline<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>属性值介绍：</strong></p>
<table>
<thead>
<tr>
<th align="center">属性值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">none</td>
<td align="center">默认值。没有装饰线</td>
</tr>
<tr>
<td align="center">underline</td>
<td align="center">下划线，链接 &lt;a&gt;自带下划线</td>
</tr>
<tr>
<td align="center">overline</td>
<td align="center">上划线</td>
</tr>
<tr>
<td align="center">line-through</td>
<td align="center">删除线</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="4-4-文本缩进（text-indent）"><a href="#4-4-文本缩进（text-indent）" class="headerlink" title="4.4 文本缩进（text-indent）"></a>4.4 文本缩进（text-indent）</h3><p>  <font color="red">text-indent</font> 属性用来指定文本的第一行的缩进，通常是将段落的<font color="red">首行缩进</font>。</p>
<ul>
<li><p>语法：</p>
  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">text-indent</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">p</span> <span class="token punctuation">{</span>
  <span class="token property">text-indent</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>属性值：</p>
<p>  1.通过设置该属性为一定的像素值，所有元素的文本内容第一行都可以缩进一个给定的长度，甚至该长度可以是负值。</p>
<p>  2.<font color="red">em</font> 是一个相对单位，就是当前元素(font-size) <font color="red">1 个文字的大小</font>, 如果当前元素没有设置大小，则会按照父元素的 1 个文字大小。</p>
</li>
</ul>
<h3 id="4-5-行间距（line-height）"><a href="#4-5-行间距（line-height）" class="headerlink" title="4.5 行间距（line-height）"></a>4.5 行间距（line-height）</h3><p>  <font color="red">line-height</font> 属性用于设置行间的距离(行高)。可以控制文字行与行之间的距离。</p>
<ul>
<li><p><strong>语法：</strong></p>
  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">{</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> 26px<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>注意：</strong></p>
<p>  行间距单位为像素，包括文本的高度、上间距、下间距。如下图</p>
  <center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glvjno2lsgj31d20fuadi.jpg" alt="行间距示例图" width="80%/"></center>

</li>
</ul>
<h3 id="4-6-文本属性总结"><a href="#4-6-文本属性总结" class="headerlink" title="4.6 文本属性总结"></a>4.6 文本属性总结</h3><table>
<thead>
<tr>
<th>属性</th>
<th>表示</th>
<th>注意点</th>
</tr>
</thead>
<tbody><tr>
<td>color</td>
<td>文本颜色</td>
<td>通常用16进制表示，简写形式#fff</td>
</tr>
<tr>
<td>text-align</td>
<td>文本水平对齐</td>
<td>设置文本水平对齐方式，默认为靠左</td>
</tr>
<tr>
<td>text-indent</td>
<td>文本第一行的缩进</td>
<td>通常用相对单位 2em</td>
</tr>
<tr>
<td>text-decoration</td>
<td>文本修饰</td>
<td>一般用于下划线的取消</td>
</tr>
<tr>
<td>line-height</td>
<td>行高</td>
<td>控制行与行之间的距离</td>
</tr>
</tbody></table>
<h2 id="五、CSS-引入方式"><a href="#五、CSS-引入方式" class="headerlink" title="五、CSS 引入方式"></a><font color="born">五、CSS 引入方式</font></h2><p>  在 html 文档中引入 CSS 样式表有三种引入方法：</p>
<ol>
<li> <font color="red">内部样式表（嵌入式）</font></li>
<li> <font color="red">行内样式表（行内式）</font></li>
<li> <font color="red">外部样式表（链接式）</font></li>
</ol>
<h3 id="5-1-内部样式表"><a href="#5-1-内部样式表" class="headerlink" title="5.1 内部样式表"></a>5.1 内部样式表</h3><p>  <font color="red">内部样式表</font>(<font color="red">内嵌样式表</font>)是写到 <font color="red">html 页面内部</font>。是将所有的 CSS 代码抽取出来，单独放到一个 &lt;style&gt; 标签中。</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glvkfs6n8sj31400re0xc.jpg" alt="内部样式表" width="80%/"></center>

<ul>
<li><p><strong>注意</strong></p>
<p>  1.&lt;style&gt; 标签理论上可以放在 HTML 文档的任何地方，但一般会放在文档的 &lt;head&gt; 标签中。</p>
<p>  2.通过此种方式，可以方便控制当前整个页面中的元素样式设置。</p>
<p>  3.代码结构清晰，但是并没有实现结构与样式完全分离。</p>
<p>  4.使用内部样式表设定 CSS，通常也被称为嵌入式引入，这种方式是我们练习时常用的方式。</p>
</li>
</ul>
<h3 id="5-2-行内样式表"><a href="#5-2-行内样式表" class="headerlink" title="5.2 行内样式表"></a>5.2 行内样式表</h3><p>  <font color="red">行内样式表</font>(<font color="red">内联样式表</font>)是在<font color="red">元素标签内部</font>的 style 属性中设定 CSS 样式。适合于修改简单样式。</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glvkriyoz0j318e0puafb.jpg" alt="行内样式表" width="80%/"></center>

<ul>
<li><p><strong>注意</strong></p>
<p>  1.style 其实就是标签的属性。</p>
<p>  2.在双引号中间，写法要符合 CSS 规范。</p>
<p>  3.只可控制当前的标签设置样式。</p>
<p>  4.简单样式可以用，复杂的不推荐用。</p>
<p>  5.使用行内样式表设定 CSS ，通常也别称为<font color="red">行内式引入</font>。</p>
</li>
</ul>
<h3 id="5-3-外部样式表"><a href="#5-3-外部样式表" class="headerlink" title="5.3 外部样式表"></a>5.3 外部样式表</h3><p>  实际开发都是用<font color="red">外部样式表</font>。适合于样式比较多的情况。核心是：样式<font color="red">单独写到CSS 文件</font>中，之后把CSS文件<font color="red">引入到 HTML 页面中</font>使用。</p>
<ul>
<li><p>引入外部样式表分为两步：</p>
<p>  1.新建一个后缀名为<font color="red"> .css 的样式文件</font>，文件中没有 &lt;style&gt; 标签，直接写样式把所有 CSS 代码都放入此文件中。</p>
<p>  2.在 HTML 页面的 &lt;head&gt;中，使用<font color="red">&lt;link&gt; 标签引入</font>这个文件。</p>
  <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css文件路径<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glvla4y828j31nk0u0gtu.jpg" alt="行内样式表" width="80%/"></center>







]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 标签（上）</title>
    <url>/2020/12/10/html-biao-qian-shang/</url>
    <content><![CDATA[<h1 id="HTML-标签（上）"><a href="#HTML-标签（上）" class="headerlink" title="HTML 标签（上）"></a><center>HTML 标签（上）</center></h1><h2 id="一、HTML-简介"><a href="#一、HTML-简介" class="headerlink" title="一、HTML 简介"></a><font color="born">一、HTML 简介</font></h2><h3 id="1-1-网页"><a href="#1-1-网页" class="headerlink" title="1.1 网页"></a>1.1 网页</h3><ul>
<li><p><strong>什么是网页？</strong></p>
<p>要知道什么是网页，先要理解网站的概念。<font color="red">网站</font>是指在因特网上根据一定的规则，使用 HTML 等制作的用于展示特定内容相关的网页集合。<font color="red">网页</font>就是网站中的一页，通常是 <font color="red">HTML 格式的文件</font>，它要通过浏览器来阅读。</p>
<p><font color="red">网页是构成网站的基本元素</font>，它通常由图片、链接、文字、声音、视频等<font color="red">元素</font>组成。通常我们看到的网页，常见以 <font color="red">.htm</font> 或 <font color="red">.html</font> 后缀结尾的文件，因此将其俗称为 <font color="red">HTML 文件</font>。</p>
</li>
<li><p><strong>什么是 HTML</strong></p>
<p><font color="red">HTML</font> 指的是超文本标记语言（ <font color="red"><strong>H</strong>yper <strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage</font>），它是用来描述网页的一种语言。是具有一套标记标签的标记语</p>
<p>所谓的超文本，有两层含义：</p>
<ul>
<li>它可以加入图片、声音、动画、多媒体等内容（超越了文本限制）。</li>
<li>它还可以从一个文件跳转到另一个文件，与世界各地主机的文件链接（超级链接文本）。</li>
</ul>
</li>
<li><p><strong>网页的形成</strong></p>
<p>网页是由网页元素组成的，这些元素是利用 html 标签描述出来，然后通过浏览器解析来显示给用户的。</p>
<p>前端人员开发代码 —-&gt; 浏览器解析、渲染代码 —-&gt; 生成最后的 Web 页面</p>
</li>
</ul>
<h3 id="1-2-常用的浏览器"><a href="#1-2-常用的浏览器" class="headerlink" title="1.2 常用的浏览器"></a>1.2 常用的浏览器</h3><ul>
<li><p><strong>常用的浏览器</strong></p>
<p>浏览器是网页显示、运行的平台。常用的浏览器有 IE 、火狐（Firefox）、谷歌（Chrome）、Safari、和 Opera 等。</p>
<p>查看浏览器市场份额：<a href="http://tongji.baidu.com/data/browser">http://tongji.baidu.com/data/browser</a> 谷歌浏览器占最大市场份额，强烈推荐使用。</p>
</li>
<li><p><strong>浏览器内核</strong></p>
<p>浏览器内核（渲染引擎）：负责读取网页内容，整理讯息，计算网页显示方式并显示页面。</p>
<table border="1" cellspacing="0" align="center" style="text-align: center;width: 75%">
  <tbody style="width: 100%;">
        <tr><!--表头-->
            <th>浏览器</th><th>内核</th><th>备注</th>
        </tr>
        <tr><!--第二行-->
            <td>IE</td><td>Trident</td><td>IE、猎豹安全、360极速浏览器、百度浏览器</td>
        </tr>
        <tr><!--第三行-->
            <td>Firefox</td><td>Gecko</td><td>火狐浏览器内核</td>
        </tr>
        <tr><!--第四行-->
            <td>Safari</td><td>Webkit</td><td>苹果浏览器内核</td>
        </tr>
        <tr><!--第五行-->
            <td>Chrome/Opera</td><td>Blink</td><td>谷歌、Opera 浏览器内核。其实是 WebKit 的分支。</td>
        </tr>
  </tbody>
</table>

<p>目前国内一般浏览器都会采用 Webkit/Blink 内核，如360、UC、QQ、搜狗等浏览器。</p>
</li>
</ul>
<h3 id="1-3-Web-标准"><a href="#1-3-Web-标准" class="headerlink" title="1.3 Web 标准"></a>1.3 Web 标准</h3><p>​    Web 标准是由 W3C组织和其他标准化组织制定的一系列标准的集合。W3C（万维网联盟）是国际最著名的标准化组织。</p>
<ul>
<li><p><strong>为什么需要 web 标准</strong></p>
<p>浏览器不同，它们显示页面或者渲染效果就有些许差异。有了 web 标准就可以消除所有浏览器的显示差异。</p>
</li>
<li><p><strong>web 标准的构成</strong></p>
<p>web 标准主要包括 <font color="red">结构（Structure）</font>、 <font color="red">表现（Presentation）</font>、 <font color="red">行为（Behavior）</font>三个方面。</p>
<ul>
<li>结构：结构用于对<strong>网页元素</strong>进行整理和分类，主要用 HTML。</li>
<li>表现：表现用于设置网页元素的板式、颜色、大小等<strong>外观样式</strong>，主要用 CSS。</li>
<li>行为：行为是指网页模型的定义及<strong>交互</strong>的编写，主要用 Javascript。</li>
</ul>
<p>web 标准提出的最佳体验方案：<font color="red">结构、样式、行为相分离</font>。即应该把<font color="red">结构写到 HTML 文件中，表现写到 CSS 中，行为写到 JavaScript 文件中</font>。</p>
</li>
</ul>
<h2 id="二、HTML-标签介绍"><a href="#二、HTML-标签介绍" class="headerlink" title="二、HTML 标签介绍"></a><font color="born">二、HTML 标签介绍</font></h2><h3 id="2-1-HTML-语法规范"><a href="#2-1-HTML-语法规范" class="headerlink" title="2.1 HTML 语法规范"></a>2.1 HTML 语法规范</h3><ul>
<li><p><strong>基本语法概述</strong></p>
<p>HTML 标签是<font color="red">由尖括号包围的关键词</font>，例如 <font color="red">&lt;html&gt;</font>。</p>
<p>HTML 标签通常是成对出现的，例如 &lt;html&gt; 和 &lt;/html&gt; ，它们称为<font color="red">双标签</font>。第一个是开始标签，第二个是结束标签。</p>
<p>也有特殊的标签是单个的标签，例如 &lt;br /&gt; ，它们称为<font color="red">单标签</font>。</p>
</li>
<li><p><strong>标签关系</strong></p>
<p>双标签关系可以分为包含关系和并列关系两类。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">/* 包含关系 */
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
/* 并列关系 */
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tead</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="2-2-HTML-基本结构标签"><a href="#2-2-HTML-基本结构标签" class="headerlink" title="2.2 HTML 基本结构标签"></a>2.2 HTML 基本结构标签</h3><ul>
<li><p><strong>第一个 HTML 网页</strong></p>
<p>每一个网页都会有一个基本的结构标签（也称之为骨架标签），页面内容也是在这些基本标签上书写的。HTML 页面也称为 HTML 文档。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>我的第一个页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    从来没有真正的绝境, 只有心灵的迷途|
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glh0faw7tij30xs0kugnd.jpg" alt="我的第一个网页" width="100%/"></center>

<table border="1" cellspacing="0" align="center" style="text-align: center;width: 68%">
        <tbody><tr><!--表头-->
            <th>标签名</th><th>定义</th><th>说明</th>
        </tr>
        <tr><!--第二行-->
            <td>&lt;html&gt;&lt;/html&gt;</td><td>HTML 标签</td><td>页面中最大的标签，我们称为根标签</td>
        </tr>
        <tr><!--第三行-->
            <td>&lt;head&gt;&lt;/head&gt;</td><td>文档的头部</td><td>网页的相关信息写在这里，必须要有 title 标签</td>
        </tr>
        <tr><!--第四行-->
            <td>&lt;title&gt;&lt;/title&gt;</td><td>文档的标题</td><td>网页的标题</td>
        </tr>
        <tr><!--第五行-->
            <td>&lt;body&gt;&lt;/body&gt;</td><td>文档的主体</td><td>元素内容，页面内容都放这里</td>
        </tr>
</tbody></table>

</li>
</ul>
<h2 id="三、开发工具-VSCode-的使用"><a href="#三、开发工具-VSCode-的使用" class="headerlink" title="三、开发工具 VSCode 的使用"></a><font color="born">三、开发工具 VSCode 的使用</font></h2><p>​    工欲善其事必先利其器，网页的开发工具有很多，Dreamweaver、sublime、WebStorm、HBuilder、Visual Studio Code等。其中 VSCode 在前端开发中最长用。</p>
<h3 id="3-1-软件的下载和基本的-html-文件创建"><a href="#3-1-软件的下载和基本的-html-文件创建" class="headerlink" title="3.1 软件的下载和基本的 html 文件创建"></a>3.1 软件的下载和基本的 html 文件创建</h3><ul>
<li><p>VSCode 下载可以去<a href="https://code.visualstudio.com/">VSCode官网</a>下载</p>
</li>
<li><p>新建文件，该文件名和和文件格式为 <font color="red">.html</font> 即可</p>
</li>
<li><p>在新建的 html 文件中输入 ! 接着回车或按 Tab 键即可生成网页骨架。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 输入 ! 回车可快速生成下面骨架 --&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>修改网页的&lt;title&gt; 和 &lt;body&gt; 标签为自己想修改的内容然后右键选择Open In Default Browser 在默认浏览器中打开，可能你的右键没有这个选项，需要安装插件。</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gliqfg55fxj317a0s8djx.jpg" alt="默认浏览器中打开网页" width="70%/"></center>
</li>
<li><p>觉得页面代码字体不合适可以通过 command + 加号键、和 command + 减号键调整字体大小。</p>
</li>
</ul>
<h3 id="3-2-VSCode-插件使用"><a href="#3-2-VSCode-插件使用" class="headerlink" title="3.2 VSCode 插件使用"></a>3.2 VSCode 插件使用</h3><ul>
<li><p><strong>插件安装方法，在最左边的是插件功能选择，之后再搜索框搜索插件名安装，重启 VSCode 即可生效。</strong></p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gliqprm66nj319e0tsdnt.jpg" alt="VSCode插件安装" width="70%/"></center>
</li>
<li><p><strong>推荐安装的插件</strong></p>
<ul>
<li><font color="red">Chinese(Simplified)Language Pack for VS Code</font>：中文（简体）语言包</li>
<li><font color="red">Open in Browser</font>：右键选择在浏览器中打开 html 文件，上面演示的功能</li>
<li><font color="red">JS-CSS-HTML Formatter</font>：每次保存，都会自动格式化js、css 和 html 代码</li>
<li><font color="red">Auto Rename Tag</font>：自动重命名配对的 HTML/XML 标签</li>
<li><font color="red">CSS Peek</font>：追踪至样式</li>
</ul>
<p>更多好用的插件希望大家相互推荐~</p>
</li>
</ul>
<h3 id="3-3-VSCode-工具生成的骨架标签新增的代码"><a href="#3-3-VSCode-工具生成的骨架标签新增的代码" class="headerlink" title="3.3 VSCode 工具生成的骨架标签新增的代码"></a>3.3 VSCode 工具生成的骨架标签新增的代码</h3><ul>
<li><p><strong><font color="red">文档类型声明标签 &lt; !DOCTYPE &gt;</font>：告诉浏览器使用那种 HTML 版本来显示网页</strong></p>
<p>&lt;!DOCTYPE html&gt; 表示当前页面采用的是 HTML5 版本来显示网页。&lt;!DOCTYPE html&gt; 不是一个 HTML 标签，它只是一个文档类型声明标签。</p>
</li>
<li><p><strong><font color="red">lang 语言种类</font>：用来定义当前文档显示的语言</strong></p>
<p><font color="red">en</font> 定义语言为英语，<font color="red">zh-CN</font>  定义语言为中文。无论哪种都可以在网页里写中英文，都能正常显示，这个属性只用于<font color="red">浏览器翻译功能的判断</font>而已。</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glircl05pzj314w0kuacx.jpg" alt="lang 属性的影响" width="67%/"></center>
</li>
<li><p><strong><font color="red">字符集</font>：是多个字符的集合，以便计算机能够识别和存储各种文字</strong></p>
<p>在&lt;head&gt; 标签内，可以通过 &lt;meta&gt; 标签的 charset 属性来规定 HTML 文档使用的字符编码集。</p>
<p>charset 常用值有：GB2312、BIG5、GBK 和 UTF-8，其中 <font color="red">UTF-8</font> 也被称为<font color="red">万国码</font>，基本包含了全世界所有国家需要用到的字符。</p>
<p>【注意】:<font color="red">上面语法是必须要写的代码，否则可能引起乱码的情况。一般情况下，统一使用“UTF-8”编码，尽量统一写成标准的 “UTF-8”，不要写成 “utf8” 或 “UTF8”。</font></p>
</li>
</ul>
<h2 id="四、HTML-常用标签"><a href="#四、HTML-常用标签" class="headerlink" title="四、HTML 常用标签"></a><font color="born">四、HTML 常用标签</font></h2><p>​    学习标签是有技巧的，重点是记住每个标签的语义。简单理解就是指标签的含义，即这个标签是用来干嘛的。 根据标签的语义，在合适的地方给一个最为合理的标签，可以让页面结构更清晰。</p>
<h3 id="4-1-标题标签-lt-h1-gt-lt-h6-gt"><a href="#4-1-标题标签-lt-h1-gt-lt-h6-gt" class="headerlink" title="4.1 标题标签<h1> - <h6>"></a>4.1 标题标签&lt;h1&gt; - &lt;h6&gt;</h3><ul>
<li><p>为了使网页更具有语义化，我们经常会在页面中用到标题标签。HTML 提供了 6 个等级的网页标题， 即 &lt;h1&gt; - &lt;h6&gt;。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>标题一共六级选,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>文字加粗一行显。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>由大到小依次减，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>从重到轻随之变。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">&gt;</span></span>语法规范书写后，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">&gt;</span></span>具体效果刷新见。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gliu2cxuncj31680p2mzq.jpg" alt="标题标签演示" width="70%/"></center>
</li>
<li><p>h 是单词 head 的缩写，意为头部、标题。</p>
</li>
<li><p>标签语义：作为标题使用，并且依据重要性递减。</p>
</li>
<li><p>特点有：</p>
<ul>
<li><p>加了标题的文字会变的加粗，字号也会依次变大。</p>
</li>
<li><p><font color="red">一个标题独占一行。</font></p>
</li>
</ul>
</li>
</ul>
<h3 id="4-2-lt-p-gt-段落标签和-lt-br-gt-换行标签"><a href="#4-2-lt-p-gt-段落标签和-lt-br-gt-换行标签" class="headerlink" title="4.2 <p> 段落标签和 <br /> 换行标签"></a>4.2 &lt;p&gt; 段落标签和 &lt;br /&gt; 换行标签</h3><ul>
<li><p>在网页中，要把文字有条理地显示出来，就需要将这些文字分段显示。在 HTML 标签中，<font color="red">&lt;p&gt;</font>标签用于<font color="red">定义段落</font>，它可以将整个网页分为若干个段落。</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;p&gt; 我是一个段落标签 &lt;/p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>p 是单词 paragraph的缩写，意为段落。 </p>
</li>
<li><p>标签语义：可以把 HTML 文档分割为若干段落。</p>
</li>
<li><p>特点:</p>
<ul>
<li>文本在一个段落中会根据浏览器窗口的大小自动换行。</li>
<li><font color="red">段落和段落之间保有空隙</font>。</li>
</ul>
</li>
<li><p>在 HTML 中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后才自动换行。如果希望某段文本强制换行显示，就需要使用换行标签 &lt;br /&gt;。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span> 我是一个段落标签 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span> 我是一个换行的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>段落标签 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gliuhmfyyqj30vm0kujtg.jpg" alt="段落和换行标签" width="80%/"></center>
</li>
<li><p>br 是单词 break 的缩写，意为打断、换行。 </p>
</li>
<li><p>标签语义:强制换行。</p>
</li>
<li><p>特点:</p>
<ul>
<li>&lt;br /&gt; 是个<font color="red">单标签</font>。</li>
<li>&lt;br /&gt; 标签只是简单地开始新的一行，跟段落不一样，段落之间会插入一些垂直的间距。</li>
</ul>
</li>
</ul>
<h3 id="4-3-文本格式化标签"><a href="#4-3-文本格式化标签" class="headerlink" title="4.3 文本格式化标签"></a>4.3 文本格式化标签</h3><ul>
<li><p>在网页中，有时需要为文字设置<strong>粗体</strong>、<em>斜体</em> 或<u>下划线</u>或<del>删除线</del>等效果，这时就需要用到 HTML 中的<font color="red">文本格式化标签</font>，使文字以特殊的方式显示。</p>
</li>
<li><p>标签语义: 突出重要性, 比普通文字更重要。格式化标签表</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glj5j35gaaj31g20aqac5.jpg" alt="格式化标签表" width="100%;/"></center>



</li>
</ul>
<h3 id="4-4-lt-div-gt-和-lt-span-gt-盒子标签"><a href="#4-4-lt-div-gt-和-lt-span-gt-盒子标签" class="headerlink" title="4.4 <div> 和 <span> 盒子标签"></a>4.4 &lt;div&gt; 和 &lt;span&gt; 盒子标签</h3><ul>
<li><p>&lt;div&gt; 和 &lt;span&gt; 是没有语义的，它们就是一个盒子，用来装内容的。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span> 我是div1,同时演示下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>加粗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span> 我是div2,同时演示下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>倾斜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span> 我是span1,同时演示下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">&gt;</span></span>删除线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>del</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span> 我是span2,同时演示下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ins</span><span class="token punctuation">&gt;</span></span>下划线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gliv2nuen5j30vm0kuq5e.jpg" alt="文本格式化标签和盒子标签" width="67%/"></center>
</li>
<li><p>div 是 division 的缩写，表示分割、分区。span 意为跨度、跨距。</p>
</li>
<li><p>特点：</p>
<ul>
<li><font color="red">&lt;div&gt; </font>标签用来布局，但是现在一行只能放一个&lt;div&gt;。 <font color="red">大盒子</font></li>
<li><font color="red">&lt;span&gt;</font> 标签用来布局，一行上可以多个 &lt;span&gt;。<font color="red">小盒子</font></li>
</ul>
</li>
</ul>
<h3 id="4-5-lt-img-gt-图像标签"><a href="#4-5-lt-img-gt-图像标签" class="headerlink" title="4.5 < img> 图像标签"></a>4.5 &lt; img&gt; 图像标签</h3><ul>
<li><p>在 HTML 标签中，&lt;img&gt; 标签用于定义 HTML 页面中的图像。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图像URL<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p><font color="red">img</font> 是单词 image 的缩写，意为图像。</p>
</li>
<li><p><font color="red">src</font> 是 &lt;img&gt; 标签的<font color="red">必须属性</font>，它用于<font color="red">指定图像文件的路径和文件名</font>。</p>
</li>
<li><p>图像标签的属性：</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glj5uulhwsj31g40f076e.jpg" alt="图像标签属性表" width="90%/"></center>
</li>
<li><p>图像标签属性注意点：</p>
<ul>
<li>图像标签可以拥有多个属性，必须写在标签名的后面。</li>
<li>属性之间<font color="red">不分先后</font>顺序，标签名与属性、属性与属性之间均<font color="red">以空格分开</font>。</li>
<li>属性采取<font color="red">键值对</font>&gt;的格式，即 key=“value” 的格式，<font color="red">属性 = “属性值”</font>。</li>
</ul>
</li>
<li><p>路径可以分为： </p>
<ul>
<li><font color="red">相对路径</font>是以引用文件所在位置为参考基础，而建立出的目录路劲，这里简单来说，图片相对于 HTML 页面的位置。相对路径是从代码所在的这个文件出发，去寻找目标文件的，而我们这里所说的上一级 、下一级和同一级就是图片相对于 HTML 页面的位置。</li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glj5xrztm6j31g808swg8.jpg" alt="相对路劲的分类" width="100%/"></center>

<ul>
<li><font color="red">绝对路径</font>是指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径。例如，Windown系统上”<font color="red">D:\web\img\logo.gif</font>“或MacOS系统上”<font color="red">/Users/ganmingpro/Desktop/log.jpg</font>“或完整的网络地址”<a href="http://www.itcast.cn/images/logo.gif&quot;%E3%80%82">http://www.itcast.cn/images/logo.gif"。</a></li>
</ul>
</li>
</ul>
<h3 id="4-6-lt-a-gt-超链接标签"><a href="#4-6-lt-a-gt-超链接标签" class="headerlink" title="4.6 <a> 超链接标签"></a>4.6 &lt;a&gt; 超链接标签</h3><ul>
<li><p>超链接可以链接到其他想要跳转的地方</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>跳转目标<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>目标窗口的弹出方式<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 文本或图像 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>a 是单词 anchor 的缩写，意为:锚。</p>
<center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glj5zx89x5j317c06o3zf.jpg" alt="相对路劲的分类" width="100%/"></center>
</li>
<li><p>链接的分类：</p>
<ol>
<li><font color="red">外部链接</font>：例如&lt;a href=”<a href="http://www.baidu.com&quot;>/">http://www.baidu.com"&gt;</a> 百度 &lt;/a&gt;。</li>
<li><font color="red">内部链接</font>：网站内部页面之间的相互链接. 直接链接内部页面名称即可，例如 &lt;a href=”index.html”&gt; 首页 &lt;/a&gt;。</li>
<li><font color="red">空链接</font>：如果当时没有确定链接目标时，&lt;a href=”#”&gt; 首页 &lt;/a&gt; 。</li>
<li><font color="red">下载链接</font>：如果 href 里面地址是一个文件或者压缩包，点击这个链接会下载这个文件。</li>
<li><font color="red">网页元素链接</font>：在网页中的各种网页元素，如文本、图像、表格、音频、视频等都可以添加超链接。</li>
<li><font color="red">锚点链接</font>：当我们想点击链接，可以快速定位到页面中的某个位置时用锚点链接。<ul>
<li>在链接文本的 href 属性中，设置属性值为<font color="red">#名字</font> 的形式，如&lt;a href=”#two”&gt; 第2集 &lt;/a&gt;。</li>
<li>找到目标位置标签，里面添加一个 <font color="red">id 属性 = 刚才的名字</font> ，如&lt;h3 id=”two”&gt;第2集介绍&lt;/h3&gt;。</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="4-7-HTML-中的注释和特殊字符"><a href="#4-7-HTML-中的注释和特殊字符" class="headerlink" title="4.7 HTML 中的注释和特殊字符"></a>4.7 HTML 中的注释和特殊字符</h3><ul>
<li><p>注释：如果需要在 HTML 文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。 HTML 中的注释以” <font color="red">&lt;!–</font> “开头，以” <font color="red">–&gt;</font> “结束。VSCode 中注释快捷键为 command + / (MacOS)。</p>
</li>
<li><p>特殊字符：在 HTML 页面中，一些特殊的符号很难或者不方便直接使用，此时我们就可以使用下面的字符来替代。</p>
</li>
</ul>
  <center><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glj00syet3j31700rmwh2.jpg" alt="特殊字符表" width="100%/"></center>

]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript预解析</title>
    <url>/2021/03/03/javascript-yu-jie-xi/</url>
    <content><![CDATA[<h1 id="JavaScript预解析"><a href="#JavaScript预解析" class="headerlink" title="JavaScript预解析"></a><center>JavaScript预解析</center></h1><h2 id="一、预解析"><a href="#一、预解析" class="headerlink" title="一、预解析"></a><font color="born">一、预解析</font></h2><p>  在理解 JS 的预解析前，我们先来看几个简单的代码程序，看看都会出现什么结果。</p>
<p>代码一：没有声明 <code>num</code> 变量，直接在控制台打印 <code>num</code> 变量。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>代码二：先在控制台打印 <code>num</code> 变量，之后在声明并赋值。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>代码三：先调用函数，之后在用函数关键字 <code>function</code> 来声明和定义函数。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你好'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>代码四：先调用函数，再用函数表达式的方法声明和定义函数。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'大家好'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<center><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1go6ob574rjj21gd0u0qep.jpg" alt="代码执行结果" width="100%/"></center>

<p>  如果能很好的理解上述的四段小程序为什么会输出相应的结果，那应该就是懂了 JS 预解析的过程。不能理解也不要紧，看完下面介绍就能完全搞懂。</p>
<p>  其实 JavaScript 代码是由浏览器中的 JavaScript 解析器来执行的。JavaScript 解析器在运行 JavaScript 代码的时候分为两步：<font color="red">预解析</font>和<font color="red">代码执行</font>。</p>
<ul>
<li><p>  <strong>预解析</strong>：JS 引擎会把 JS 代码里所有的 <code>var</code>(变量预解析) 和 <code>function</code>(函数预解析)  提升到当前作用域的最前面。</p>
</li>
<li><p>  <strong>代码执行</strong>： 预解析后再按照代码执行的顺序从上往下执行。</p>
</li>
</ul>
<h2 id="二、变量预解析与函数预解析"><a href="#二、变量预解析与函数预解析" class="headerlink" title="二、变量预解析与函数预解析"></a><font color="born">二、变量预解析与函数预解析</font></h2><ul>
<li>  <strong>变量预解析</strong>：就是把所有的变量声明提升到当前作用域的最前面，不提升赋值操作。</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token comment">// 上面代码相当于执行了以下代码</span>
	<span class="token keyword">var</span> num<span class="token punctuation">;</span>		<span class="token comment">// 变量提升 默认值：undefined</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
	num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  以上是开头代码二的实际执行过程，先把 <code>num</code> 变量声明给提到了<font color="red">当前作用域</font>前面，并没有提升赋值操作，所以默认就是 <code>undefined</code> 。下面是代码四的实际过程。这里就能明白代码二和代码四输出的结果啦！</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'大家好'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 上面代码相当于执行了以下代码</span>
  <span class="token keyword">var</span> fun<span class="token punctuation">;</span>	<span class="token comment">// 变量提升</span>
	<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 还不是函数</span>
	<span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'大家好'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>函数预解析</strong>：就是把所有的函数声明提升到当前作用域的最前面，不调用函数。</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你好'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
	<span class="token comment">// 上面代码相当于执行了以下代码</span>
	<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你好'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
	<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  这里要<strong>注意</strong>，函数提升提升的是用函数关键字 <code>function</code> 声明的函数，而像代码四中用<font color="red">函数表达式的方法</font>声明不提升。</p>
<h2 id="三、预解析案例分析"><a href="#三、预解析案例分析" class="headerlink" title="三、预解析案例分析"></a><font color="born">三、预解析案例分析</font></h2><ul>
<li>  案例一：输出结果是什么？</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  案例二：输出结果是什么？</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
	<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  案例三：输出结果是什么？</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
	<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  案例四：输出结果是什么？</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
	<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  有想到每个案例的结果吗？这里给出每个案例的结果，简单提下案例四里第 7 行代码 <code>var a = b = c = 9;</code> 相当于 <code>var a = 9; b = 9; c = 9;</code> <code>b</code> 和 <code>c</code> 变量前面都没有关键字 <code>var</code> 所以他们是全局变量，函数外面也能够访问到。</p>
<p>案例一：undefined </p>
<p>案例二：undefined 20 </p>
<p>案例三：undefined 9 </p>
<p>案例四：9 9 9 9 9 报错 </p>
<p>下面提供每个案例代码的实际流程代码。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 案例一原代码</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 相当于以下代码</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token keyword">var</span> num<span class="token punctuation">;</span>	<span class="token comment">// 变量提升 默认值：undefined</span>
	<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>		<span class="token comment">// 函数提升</span>
    <span class="token keyword">var</span> num<span class="token punctuation">;</span>				<span class="token comment">// 函数内部变量提升 默认值：undefined</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 打印就近的变量 undefined</span>
    num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
	num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 案例二原代码</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
	<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 相当于以下代码</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token keyword">var</span> num<span class="token punctuation">;</span>		<span class="token comment">// 变量提升 默认值：undefined</span>
	<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>	<span class="token comment">// 函数提升</span>
    <span class="token keyword">var</span> num<span class="token punctuation">;</span>			<span class="token comment">// 函数内部变量提升 默认值：undefined</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 打印就近的局部变量 undefined</span>
    num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>			<span class="token comment">// 给函数内部变量赋值20</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 打印就近的局部变量 20</span>
  <span class="token punctuation">}</span>
	num <span class="token operator">=</span> <span class="token number">10</span>
	<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 案例三原代码</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
	<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 相当于以下代码</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token keyword">var</span> a<span class="token punctuation">;</span>		<span class="token comment">// 变量提升 默认值：undefined</span>
	<span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>		<span class="token comment">// 函数提升</span>
    <span class="token keyword">var</span> b<span class="token punctuation">;</span>					<span class="token comment">// 函数内部变量b提升 默认值：undefined</span>
    <span class="token keyword">var</span> a<span class="token punctuation">;</span>					<span class="token comment">// 函数内部变量a提升 默认值：undefined</span>
    b <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>					<span class="token comment">// 给函数内部变量b赋值9</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 打印就近的局部变量a undefined</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 打印就近的局部变量b 9</span>
    a <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span>			<span class="token comment">// 给函数内部变量a赋值'123'</span>
  <span class="token punctuation">}</span>
	a <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
	<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 案例四原代码</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
	<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 相当于以下代码</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>				<span class="token comment">// 函数提升	</span>
    <span class="token keyword">var</span> a<span class="token punctuation">;</span>							<span class="token comment">// 函数内部变量a提升 默认值：undefined</span>
  	a <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>							<span class="token comment">// 给函数内部变量a赋值9</span>
  	b <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>							<span class="token comment">// 定义全局变量b并赋值9，不是 var 关键字修饰不提升</span>
  	c <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>							<span class="token comment">// 定义全局变量c并赋值9，不是 var 关键字修饰不提升</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// 打印就近的局部变量a 9</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// 打印全局变量b 9</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// 打印全局变量c 9</span>
  <span class="token punctuation">}</span>
	<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>				<span class="token comment">// 函数外打印全局变量c 9</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>				<span class="token comment">// 函数外打印全局变量b 9</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>				<span class="token comment">// a 是函数内局部变量，函数外不能访问，报错</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指03-数组中重复的数字</title>
    <url>/2021/03/04/jian-zhi-03-shu-zu-zhong-chong-fu-de-shu-zi/</url>
    <content><![CDATA[<h1 id="剑指03-数组中重复的数字"><a href="#剑指03-数组中重复的数字" class="headerlink" title="剑指03-数组中重复的数字"></a><center>剑指03-数组中重复的数字</center></h1><h2 id="一、原题题目"><a href="#一、原题题目" class="headerlink" title="一、原题题目"></a><font color="#A22015">一、原题题目</font></h2><h3 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h3><p>  找出数组中重复的数字。在一个长度为 <code>n</code> 的数组 <code>nums</code> 里的所有数字都在 <code>0～n-1</code> 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p>
<h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><ul>
<li><p><strong>示例1：</strong></p>
<p>  <strong>输入：</strong> <code>[2, 3, 1, 0, 2, 5, 3]</code><br><strong>输出：</strong> <code>2 或 3 </code></p>
</li>
</ul>
<p><strong>提示：</strong></p>
<ul>
<li>  可以假设 <code>s</code> 和 <code>t</code> 长度相同。</li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcofhttps://leetcode-cn.com/problems/isomorphic-strings/">https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcofhttps://leetcode-cn.com/problems/isomorphic-strings/</a>)</p>
<h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a><font color="#A22015">二、解题思路</font></h2><h3 id="2-1-利用【暴力遍历】解题"><a href="#2-1-利用【暴力遍历】解题" class="headerlink" title="2.1 利用【暴力遍历】解题"></a>2.1 利用【暴力遍历】解题</h3><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  题目的要求是找到重复的数字，那么如果我们用暴力遍历的方法，第一个数字和后面的比较，如果没有重复就 <code>i++</code> ，然后继续，这种方法需要时间复杂度是 <code>o(n^2)</code>，空间复杂度是 <code>o(n)</code> ，显然时间复杂度太高了，那么我们就会想如何才能减少时间复杂度来找到重复的数字呢？</p>
<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<p>  执行结果理所当然的超时，我们一般这种降低时间复杂度的方法就是，通过空间换时间，就是例如哈希表或者集合，把遍历过的值记录下来，这样就可以节约大量的时间，所以方法二就是使用哈希表把遍历过的元素存下来，如果发现一次就记录1，发现两次就记录2，并且每次遍历检查，如果大于等于2了，就返回该重复的数字，这种方法很好理解，也是大多数人会使用的方法，这种方法的好处在于把时间复杂度降低到了o(n)，但同样付出的代价是空间复杂度上升到了o(n)，这是很典型的空间换时间的题目，同样的题目，如两数之和也是类似。</p>
<h3 id="2-2-利用【空间换时间】提升性能"><a href="#2-2-利用【空间换时间】提升性能" class="headerlink" title="2.2 利用【空间换时间】提升性能"></a>2.2 利用【空间换时间】提升性能</h3><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  可以利用哈希表，数组，集合等来记录每个数组出现的情况，从而判断数组内的数字是否有重复，最后发现用数组记录的时间复杂度最低。</p>
<ul>
<li>  <strong>详细代码（Java）：哈希表</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>哈希表代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/008eGmZEly1go801s5leej30s40emmyr.jpg" alt="利用哈希表执行结果" width="100%/"></center>

<ul>
<li>  <strong>详细代码（Java）：集合</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/008eGmZEly1go807no7cgj30ru0eg75s.jpg" alt="利用集合执行结果" width="100%/"></center>

<ul>
<li>  <strong>详细代码（Java）：数组</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">boolean</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      num<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/008eGmZEly1go808k1scxj30rw0eegn5.jpg" alt="利用数组执行结果" width="100%/"></center>

<h3 id="2-3-利用【排序】解题"><a href="#2-3-利用【排序】解题" class="headerlink" title="2.3 利用【排序】解题"></a>2.3 利用【排序】解题</h3><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  再想提升性能可能就要在空间上下注意了，能不能原数组上实现题目要求呢？应该是有的，第一种方法我想到的是先对数组排序，如果存在两个连续的数字相同不就是重复的了嘛。</p>
<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/008eGmZEly1go80sph3h8j30s20egmyn.jpg" alt="排序执行结果" width="100%/"></center>

<h3 id="2-3-【原地置换】解题"><a href="#2-3-【原地置换】解题" class="headerlink" title="2.3 【原地置换】解题"></a>2.3 【原地置换】解题</h3><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  因为题目告诉我们的信息中是数字只会小于数组的个数，那么也就是说，如果没有重复的，那么每个数组应该都可以对应到一个下标位置。具体可以理解为一个萝卜一个坑。用下面的例子来看更直接。</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>     3  1  0  2   萝卜   
     i       0  1  2  3   坑  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>  0号坑说我要的是0号萝卜，不要3号萝卜，所以会去和3号坑的萝卜交换，因为如果0号坑拿了3号坑的3号萝卜，那说明3号坑装的也肯定是别人家的萝卜，所以要跟3号坑换，换完是这样的：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>     2  1  0  3   萝卜  
    i       0  1  2  3   坑 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>  然而0号坑还没找到自己的萝卜，它不要2号萝卜，又去和2号坑的萝卜交换，换完是这样的：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>     0  1  2  3   萝卜 
    i       0  1  2  3   坑  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>  这时候刚好就是一一对应的，交换过程也不会出现不同坑有相同编号的萝卜。要注意交换用的是while，也就是0号坑只有拿到0号萝卜，1号坑才能开始找自己的萝卜。</p>
<p>  如果有重复元素，例如：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>     1  2  3  2    萝卜
    i       0  1  2  3    坑<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>  同样的，0号坑不要1号，先和1号坑交换，交换完这样的：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>     2  1  3  2    萝卜
    i       0  1  2  3    坑<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>  0号坑不要2号萝卜，去和2号坑交换，交换完这样的：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>     3  1  2  2    萝卜
    i       0  1  2  3    坑<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>  0号坑不要3号萝卜，去和3号坑交换，交换完这样的：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>     2  1  2  3    萝卜
    i       0  1  2  3    坑<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>  0号坑不要2号萝卜，去和2号坑交换，结果发现你2号坑也是2号萝卜，那我还换个锤子，同时也说明有重复元素出现。</p>
<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> temp<span class="token punctuation">;</span>   <span class="token comment">// 定义临时交换变量</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 从第0个坑位开始找对应的萝卜</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment">// 当前坑位不是自己对应的萝卜 而是nums[i]坑位的</span>
      <span class="token comment">// 如果发现nums[i]坑位的萝卜是它自己坑位的，说明自己的是重复多的</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 
        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token comment">// 如果发现nums[i]坑位的萝卜不是它自己坑位的，先交换过来再继续去找</span>
      temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">;</span>
      nums<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/008eGmZEly1go81o8r0xsj30ry0eewfu.jpg" alt="原地置换执行结果" width="100%/"></center>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>简单</tag>
        <tag>数组</tag>
        <tag>剑指Offer</tag>
      </tags>
  </entry>
  <entry>
    <title>Web APIs 简介（JS 进阶1）</title>
    <url>/2021/03/05/web-apis-jian-jie/</url>
    <content><![CDATA[<h1 id="Web-APIs-简介"><a href="#Web-APIs-简介" class="headerlink" title="Web APIs 简介"></a><center>Web APIs 简介</center></h1><p><strong>目标：</strong></p>
<ul>
<li>  能够说出 Web APIs 阶段与 JavaScript 语法阶段的关联性?</li>
<li>  能够说出什么是 API?</li>
<li>  能够说出什么是 Web API?</li>
</ul>
<h2 id="一、Web-APIs-和-JS-基础关联性"><a href="#一、Web-APIs-和-JS-基础关联性" class="headerlink" title="一、Web APIs 和 JS 基础关联性"></a><font color="#A22015">一、Web APIs 和 JS 基础关联性</font></h2><h3 id="1-1-JS-的组成"><a href="#1-1-JS-的组成" class="headerlink" title="1.1 JS 的组成"></a>1.1 JS 的组成</h3><p>JavaScript 主要包含三部分内容：</p>
<ol>
<li> ECMAScript : JavaScript 语法（JavaScript基础）</li>
<li> DOM : 页面文档对象模型（Web APIs）</li>
<li> BOM : 浏览器对象模型（Web APIs ）</li>
</ol>
<center><img src="https://tva1.sinaimg.cn/large/008eGmZEly1go8z5lvrwij31720rm486.jpg" alt="JS 的组成"></center>

<h3 id="1-2-JS-基础阶段以及-Web-APIs-阶段"><a href="#1-2-JS-基础阶段以及-Web-APIs-阶段" class="headerlink" title="1.2  JS 基础阶段以及 Web APIs 阶段"></a>1.2  JS 基础阶段以及 Web APIs 阶段</h3><p><font color="red"><strong>JS 基础阶段</strong></font></p>
<ul>
<li><p>  学习的是 ECMAScript 标准规定的基本语法</p>
</li>
<li><p>  要求掌握JS基础语法</p>
</li>
<li><p>  只学习基本语法，做不常用的网页交互效果</p>
</li>
<li><p>  目的是为了 JS 后面的内容打基础、做铺垫</p>
</li>
</ul>
<p><font color="red"><strong>Web APIs阶段</strong></font></p>
<ul>
<li>  Web APIs 是 W3C 组织的标准</li>
<li>  Web APIs 主要学习 DOM 和 BOM</li>
<li>  Web APIs 是 JS 所独有的部分</li>
<li>  主要学习页面交互功能</li>
<li>  需要使用 JS 基础的课程内容做基础</li>
</ul>
<p>JS 基础学习 ECMAScript 基础语法为后面作铺垫，Web APIs是 JS 的应用，大量使用 Js 基础语法做交互效果。</p>
<h2 id="二、API-和-Web-API"><a href="#二、API-和-Web-API" class="headerlink" title="二、API 和 Web API"></a><font color="#A22015">二、API 和 Web API</font></h2><h3 id="2-1-API"><a href="#2-1-API" class="headerlink" title="2.1 API"></a>2.1 API</h3><p><font color="red">API ( Application Programming Interface，应用程序编程接口）</font>是一些预先定义的函数,目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。</p>
<p>简单理解：<font color="red">API 是给程序员提供的一种工具，以便能更轻松的实现想要完成的功能。</font></p>
<p>比如手机充电的接口:</p>
<center><img src="https://tva1.sinaimg.cn/large/008eGmZEly1go8zkbc5tej30i00d4n7o.jpg" alt="接口举例"></center>

<p>我们要实现充电这个功能：<br>●我们不关心手机内部变压器,内部怎么存储电等<br>●我们不关心这个充电线怎么制作的<br>●我们只知道,我们拿着充电线插进充电接口就可以充电<br>●这个充电接口就是一个API</p>
<h3 id="2-2-Web-API"><a href="#2-2-Web-API" class="headerlink" title="2.2 Web API"></a>2.2 Web API</h3><p><font color="red">Web API 是浏览器</font>提供的一套操作<font color="red">浏览器功能</font>和<font color="red">页面元素</font>的 <font color="red">API </font>( BOM和DOM)。现阶段我们主要针对于浏览器讲解常用的API，主要针对浏览器做交互效果。比如我们想要浏览器弹出一个警示框，直接使用<font color="red">alert( ‘弹出’ )</font> 。 MDN详细API: <a href="https://developer.mozilla.org/zh-CN/docs/Web/API">https://developer.mozilla.org/zh-CN/docs/Web/API</a>  ，因为Web API很多,所以我们将这个阶段称为Web APIs</p>
<h3 id="2-3-API-和-Web-API-总结"><a href="#2-3-API-和-Web-API-总结" class="headerlink" title="2.3 API 和 Web API  总结"></a>2.3 API 和 Web API  总结</h3><ol>
<li><font color="red">API 是为程序员提供的一个接口，帮助其实现某种功能，一般会使用就可以了，不必纠结内部如何实现。</font></li>
<li>Web API 主要是针对于浏览器提供的接口，主要针对于浏览器做交互效果。</li>
<li>Web API 一般都有输入和输出（函数的传参和返回值）， Web API很多都是方法（函数）。</li>
<li>学习 Web API 可以结合前面学习内置对象方法的思路学习，学会查询文档。</li>
</ol>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣331-验证二叉树的前序序列化</title>
    <url>/2021/03/12/li-kou-331-yan-zheng-er-cha-shu-de-qian-xu-xu-lie-hua/</url>
    <content><![CDATA[<h1 id="力扣331-验证二叉树的前序序列化"><a href="#力扣331-验证二叉树的前序序列化" class="headerlink" title="力扣331-验证二叉树的前序序列化"></a><center>力扣331-验证二叉树的前序序列化</center></h1><h2 id="一、原题题目"><a href="#一、原题题目" class="headerlink" title="一、原题题目"></a><font color="#A22015">一、原题题目</font></h2><h3 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h3><p>  序列化二叉树的一种方法是使用前序遍历。当我们遇到一个非空节点时，我们可以记录下这个节点的值。如果它是一个空节点，我们可以使用一个标记值记录，例如 <code>#</code>。</p>
<pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">      _9_
     <span class="token operator">/</span>   \
    <span class="token number">3</span>     <span class="token number">2</span>
   <span class="token operator">/</span> \   <span class="token operator">/</span> \
  <span class="token number">4</span>   <span class="token number">1</span>  #  <span class="token number">6</span>
 <span class="token operator">/</span> \ <span class="token operator">/</span> \   <span class="token operator">/</span> \
#  # # #  #  #<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>例如，上面的二叉树可以被序列化为字符串 <code>“9，3，4，#，#，1，#，#，2，#，6，#，#”</code> 其中 <code>#</code> 代表一个空节点。给定一串以逗号分隔的序列，验证它是否是正确的二叉树的前序序列化。编写一个在不重构树的条件下的可行算法。每个以逗号分隔的字符或为一个整数或为一个表示 null 指针的 <code>#</code> 。你可以认为输入格式总是有效的，例如它永远不会包含两个连续的逗号，比如 <code>"1,,3"</code> 。</p>
<h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><ul>
<li><p><strong>示例1：</strong></p>
<p>  <strong>输入：</strong> <code>"9,3,4,#,#,1,#,#,2,#,6,#,#"</code><br><strong>输出：</strong> <code>true</code></p>
</li>
<li><p><strong>示例2：</strong></p>
<p>  <strong>输入：</strong> <code>"1,#"</code><br><strong>输出：</strong> <code>false</code></p>
</li>
<li><p><strong>示例3：</strong></p>
<p>  <strong>输入：</strong> <code>false</code><br><strong>输出：</strong> false</p>
</li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/verify-preorder-serialization-of-a-binary-tree">https://leetcode-cn.com/problems/verify-preorder-serialization-of-a-binary-tree</a></p>
<h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a><font color="#A22015">二、解题思路</font></h2><h3 id="2-1-利用【递归思想】解题"><a href="#2-1-利用【递归思想】解题" class="headerlink" title="2.1 利用【递归思想】解题"></a>2.1 利用【递归思想】解题</h3><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  要判断这个字符串是否是一个二叉树的前序序列，如果是，那么根节点的左右子树的序列也必定是一个符合要求的二叉树前序序列。如示例一，当 <code>"9,3,4,#,#,1,#,#,2,#,6,#,#"</code> ，左孩子是节点 3 ，右孩子是节点 2 ，则左子树序列 <code>3，4，#，#，1，#，#</code> 和右子树序列 <code>2，#，6，#，#</code> 都将是一个符合要求的二叉树前序序列。再往下分析就可以得到最简单的二叉树前序序列必定是 <code>#</code> ，或者 <code>n，#，#</code> 。所以当碰到 <code>n，#，#</code> 时，说明节点为 n 的元素作为根节点则下面的都是符合要求的。所以只要是碰到了<code>n，#，#</code> 就将其改成 <code>#</code> 表示它后面的都是符合二叉树的前序序列要求的。</p>
<p>模拟示例一过程：”9,3,4,#,#,1,#,#,2,#,6,#,#”</p>
<p>9,3,4,#,# =&gt; 9,3,#，继续<br>9,3,#,1,#,# =&gt; 9,3,#,# =&gt; 9,# ，继续<br>9,#2,#,6,#,# =&gt; 9,#,2,#,# =&gt; 9,#,# =&gt; #，结束</p>
<center><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gohcqqyzosj31n00qgn1a.jpg" alt="示例一图解" width="100%/"></center>

<p>  可以遍历字符串里的每个元素，用 <code>split()</code> 函数将其以 <code>,</code> 分割为多个字符串数组，用一个容器去装每个元素，如果碰到 <code>n,#,#</code> 则将其该为 <code>#</code>  ，遍历到结束，如果容器中最后只剩下一个 <code>#</code> 则表示该字符串时一个二叉树的前序序列，返回 <code>true</code>，否则返回 <code>false</code> 。 </p>
<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isValidSerialization</span><span class="token punctuation">(</span><span class="token class-name">String</span> preorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// list 作为容器</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> preorder<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     			<span class="token comment">// 用 ，分割字符串并遍历</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment">// 每个元素加入 list 容器</span>
    <span class="token keyword">int</span> size <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">// 获取容器中元素个数</span>
    <span class="token comment">// 判断是否大于三个并且是以 n,#,# 结尾，是则只留下一个 # </span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>size<span class="token operator">&gt;=</span><span class="token number">3</span><span class="token operator">&amp;&amp;</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>size<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>size<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>size<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      size <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gohd5l8ze8j30s40ekdh8.jpg" alt="代码执行结果" width="100%/"></center>

<p>  效率不是很好，我用了其他容器好像也提升不了多少。</p>
<h3 id="2-2-利用【出入度关系】解题"><a href="#2-2-利用【出入度关系】解题" class="headerlink" title="2.2 利用【出入度关系】解题"></a>2.2 利用【出入度关系】解题</h3><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  二叉树的也属于图，节点（包括空节点 #）都是由边链接的，从上到下的关系就会有出度和入度的概念。</p>
<p>根节点：2个出度，0个入度</p>
<p>普通节点：2个出度，1个入度</p>
<p>空节点：0个出度，1个入度</p>
<p>最终出度和入度的和相同，都等于边的数目，并且在结束前<font color="red">出度一定大于入度</font>（最终都会以两个空节点结束）</p>
<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isValidSerialization</span><span class="token punctuation">(</span><span class="token class-name">String</span> preorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>preorder<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>preorder<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'#'</span><span class="token operator">&amp;&amp;</span>preorder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> d <span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>						<span class="token comment">// 出度减入度之差，根节点提前加上</span>
    <span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>		<span class="token comment">// 判断是否是根节点 根节点 d+2</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> preorder<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>		<span class="token comment">// 没遍历完的情况下如果入度大于或等于了出度，则一定不是</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>						<span class="token comment">// 是根节点</span>
        b<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  d<span class="token operator">--</span><span class="token punctuation">;</span>		<span class="token comment">// 是空节点 度-2</span>
      <span class="token keyword">else</span> d<span class="token operator">++</span><span class="token punctuation">;</span>										<span class="token comment">// 是普通节点 度+1</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> d <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span>					<span class="token comment">// 遍历完如果度为0 则是</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gohds0nja6j30rw0ecjss.jpg" alt="出入度方法执行结果" width="100%/"></center>



]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>中等</tag>
        <tag>力扣</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣705-设计哈希集合</title>
    <url>/2021/03/13/li-kou-705-she-ji-ha-xi-ji-he/</url>
    <content><![CDATA[<h1 id="力扣705-设计哈希集合"><a href="#力扣705-设计哈希集合" class="headerlink" title="力扣705-设计哈希集合"></a><center>力扣705-设计哈希集合</center></h1><h2 id="一、原题题目"><a href="#一、原题题目" class="headerlink" title="一、原题题目"></a><font color="#A22015">一、原题题目</font></h2><h3 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h3><p>  不使用任何内建的哈希表库设计一个哈希集合（HashSet）。</p>
<p>实现 MyHashSet 类：</p>
<ul>
<li>  void add(key) 向哈希集合中插入值 key 。</li>
<li>  bool contains(key) 返回哈希集合中是否存在这个值 key 。</li>
<li>  void remove(key) 将给定值 key 从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。</li>
</ul>
<h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">输入：
[<span class="token string">"MyHashSet"</span><span class="token punctuation">,</span> <span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token string">"contains"</span><span class="token punctuation">,</span> <span class="token string">"contains"</span><span class="token punctuation">,</span> <span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token string">"contains"</span><span class="token punctuation">,</span> <span class="token string">"remove"</span><span class="token punctuation">,</span> <span class="token string">"contains"</span>]
[[]<span class="token punctuation">,</span> [<span class="token number">1</span>]<span class="token punctuation">,</span> [<span class="token number">2</span>]<span class="token punctuation">,</span> [<span class="token number">1</span>]<span class="token punctuation">,</span> [<span class="token number">3</span>]<span class="token punctuation">,</span> [<span class="token number">2</span>]<span class="token punctuation">,</span> [<span class="token number">2</span>]<span class="token punctuation">,</span> [<span class="token number">2</span>]<span class="token punctuation">,</span> [<span class="token number">2</span>]]
输出：
[null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> null<span class="token punctuation">,</span> true<span class="token punctuation">,</span> null<span class="token punctuation">,</span> false]
解释：
MyHashSet myHashSet <span class="token operator">=</span> new MyHashSet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myHashSet.add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">/</span><span class="token operator">/</span> <span class="token function">set</span> <span class="token operator">=</span> [<span class="token number">1</span>]
myHashSet.add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">/</span><span class="token operator">/</span> <span class="token function">set</span> <span class="token operator">=</span> [<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>]
myHashSet.contains<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span> 返回 True
myHashSet.contains<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span> 返回 False ，（未找到）
myHashSet.add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">/</span><span class="token operator">/</span> <span class="token function">set</span> <span class="token operator">=</span> [<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>]
myHashSet.contains<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span> 返回 True
myHashSet.remove<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">/</span><span class="token operator">/</span> <span class="token function">set</span> <span class="token operator">=</span> [<span class="token number">1</span>]
myHashSet.contains<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span> 返回 False ，（已移除）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>提示：</strong></p>
<ul>
<li>  <code>0 &lt;= key &lt;= 106</code></li>
<li>  最多调用 <code>104</code> 次 <code>add</code>、<code>remove</code> 和 <code>contains</code> 。</li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/design-hashset">https://leetcode-cn.com/problems/design-hashset</a></p>
<h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a><font color="#A22015">二、解题思路</font></h2><h3 id="2-1-利用【ArrayList】解题"><a href="#2-1-利用【ArrayList】解题" class="headerlink" title="2.1 利用【ArrayList】解题"></a>2.1 利用【ArrayList】解题</h3><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  用一个 list 去实现，比较容易想到。</p>
<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHashSet</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> myHashSet<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">MyHashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        myHashSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>myHashSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> myHashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>myHashSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
            myHashSet<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> myHashSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gohnddbgckj30s80ek3zx.jpg" alt="ArrayList执行结果" width="100%/"></center>

<h3 id="2-2-利用【Boolen数组】解题"><a href="#2-2-利用【Boolen数组】解题" class="headerlink" title="2.2 利用【Boolen数组】解题"></a>2.2 利用【Boolen数组】解题</h3><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  因为题目限定了 key 的数量会小于等于 10^6，所以可以用一个1000001的Boolen数组来存每一个 key ，key 对应数组的下标。</p>
<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHashSet</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> myHashSet<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">MyHashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        myHashSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">1000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        myHashSet<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>
        myHashSet<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> myHashSet<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gohnb6t0u0j30ry0egmyj.jpg" alt="Boolen数组方法结果" width="100%/"></center>



]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>力扣</tag>
        <tag>简单</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣191-位1的个数</title>
    <url>/2021/03/22/li-kou-191-wei-1-de-ge-shu/</url>
    <content><![CDATA[<h1 id="力扣191-位1的个数"><a href="#力扣191-位1的个数" class="headerlink" title="力扣191-位1的个数"></a><center>力扣191-位1的个数</center></h1><h2 id="一、原题题目"><a href="#一、原题题目" class="headerlink" title="一、原题题目"></a><font color="#A22015">一、原题题目</font></h2><h3 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h3><p>  编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为<a href="https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8F">汉明重量</a>）。</p>
<h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><ul>
<li><p><strong>示例1：</strong></p>
<p>  <strong>输入：</strong> <code>00000000000000000000000000001011</code><br><strong>输出：</strong> <code>3</code><br><strong>解释：</strong> 输入的二进制串 <code>00000000000000000000000000001011</code>  中，共有3位为 <code>1</code>。</p>
</li>
<li><p><strong>示例2：</strong></p>
<p>  <strong>输入：</strong> <code>00000000000000000000000010000000</code><br><strong>输出：</strong> <code>1</code><br><strong>解释：</strong> 输入的二进制串 <code>00000000000000000000000010000000</code>  中，共有1位为 <code>1</code>。</p>
</li>
<li><p><strong>示例3：</strong></p>
<p>  <strong>输入：</strong> <code>11111111111111111111111111111101</code><br><strong>输出：</strong> 31<br><strong>解释：</strong> 输入的二进制串 <code>11111111111111111111111111111101</code>  中，共有31位为 <code>1</code>。</p>
</li>
</ul>
<p><strong>提示：</strong></p>
<ul>
<li><p>  请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</p>
</li>
<li><p>  在 Java 中，编译器使用<a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A5%E7%A0%81/5295284">二进制补码</a>记法来表示有符号整数。因此，在上面的 <strong>示例 3</strong> 中，输入表示有符号整数 <code>-3</code>。</p>
</li>
<li><p>  输入必须是长度为 <code>32</code> 的 <strong>二进制串</strong> 。</p>
</li>
</ul>
<p><strong>进阶：</strong> </p>
<ul>
<li>  如果多次调用这个函数，你将如何优化你的算法？</li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/number-of-1-bits/">https://leetcode-cn.com/problems/number-of-1-bits/</a></p>
<h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a><font color="#A22015">二、解题思路</font></h2><h3 id="2-1-直接检查每一位解题"><a href="#2-1-直接检查每一位解题" class="headerlink" title="2.1 直接检查每一位解题"></a>2.1 直接检查每一位解题</h3><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  用循环去检查每一位是否为1，在检查第 <code>i</code> 位时，我们可以用 <code>2</code><sup><code>i</code></sup> 与改数进行与运算，只有当第 <code>i</code> 位为 1 时，与运算的结果才不为0。例如对数字11进行分析如下：</p>
<center><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gosi6k55ndj30yy08y40e.jpg" alt="每位检查过程" width="100%/"></center>

<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            res<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述中有两个 java 中基本的位运算符：<code>&amp;</code> 和 <code>&lt;&lt;</code> </p>
<p>&amp;：按位与—-对应位上的数子进行与运算得到结果。</p>
<p>&lt;&lt;：左位移运算符。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span> n<span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 1 2 4 8 16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gosi8p911fj30s20egabg.jpg" alt="每位检查执行结果" width="100%/"></center>

<h3 id="2-2-利用【n-amp-n-1-】解题"><a href="#2-2-利用【n-amp-n-1-】解题" class="headerlink" title="2.2 利用【n &amp; (n-1)】解题"></a>2.2 利用【n &amp; (n-1)】解题</h3><ul>
<li>  <strong>解题思路</strong></li>
</ul>
<p>  &nbsp;<font color="red">利用 n&amp;(n - 1)，可以把 n的二进制位中的最低位的 1 变为 0 。这也是消除二进制末尾1的常用操作。</font></p>
<center><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gosk21b443j30xo066aa7.jpg" alt="消除二进制末尾1" width="100%/"></center>

<ul>
<li>  <strong>详细代码（Java）</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            count<span class="token operator">++</span><span class="token punctuation">;</span>
            n <span class="token operator">&amp;=</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  <strong>代码执行结果</strong></li>
</ul>
<center><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gosk6cmzoyj30s00ek3zw.jpg" alt="n &amp; (n-1)结果" width="100%/"></center>



]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>力扣</tag>
        <tag>简单</tag>
        <tag>位运算</tag>
      </tags>
  </entry>
</search>
